{"version":3,"sources":["../src/markdown/matter-markdown.ts","../src/markdown/markdown.ts","../src/wiki/render.ts","../src/wiki/wiki.ts","../src/html/html.ts"],"names":[],"mappings":"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","sourcesContent":["import matter from 'gray-matter'\nimport { DocDetail, DocProperties } from '@elog/types'\nimport { out } from '@elog/shared'\n\n/**\n * hexo 文章生产适配器\n *\n * @param {DocDetail} post 文章\n * @return {String} text\n */\nexport function matterMarkdownAdapter(post: DocDetail) {\n  let body = post.body\n  try {\n    const properties = post.properties\n    const props: DocProperties = {\n      ...properties,\n      title: properties?.title?.replace(/\"/g, ''), // 临时去掉标题中的引号，至少保证文章页面是正常可访问的\n    }\n    // @ts-ignore js-yaml lineWidth长度为无限\n    body = matter.stringify(body, props, { lineWidth: -1 })\n  } catch (e: any) {\n    out.warning(`【${post.properties.title}】Front matter 生成失败，请检查文档属性`, e.message)\n    out.debug(e)\n  }\n  return body\n}\n\nexport default matterMarkdownAdapter\n","import { DocDetail } from '@elog/types'\n\nexport function markdownAdapter(post: DocDetail) {\n  let { body } = post\n  return body\n}\n","import { Renderer as MarkdownRenderer, marked } from 'marked'\nimport { stringify } from 'querystring'\n\n/**\n * confluence wiki 语言映射\n */\nconst langMap: any = {\n  javascript: 'js',\n  typescript: 'js',\n  java: 'java',\n  shell: 'bash',\n  html: 'html',\n  xml: 'xml',\n  yaml: 'yml',\n}\n\n/**\n * WIKI 渲染器\n */\nclass WikiRenderer extends MarkdownRenderer {\n  constructor() {\n    super()\n  }\n  paragraph(text: string) {\n    return text + '\\n\\n'\n  }\n  html(html: string) {\n    return html\n  }\n  heading(text: string, level: number) {\n    return 'h' + level + '. ' + text + '\\n\\n'\n  }\n  strong(text: string) {\n    return '*' + text + '*'\n  }\n  em(text: string) {\n    return '_' + text + '_'\n  }\n  del(text: string) {\n    return '-' + text + '-'\n  }\n  codespan(text: string) {\n    return '{{' + text + '}}'\n  }\n  blockquote(quote: string) {\n    return '{quote}' + quote + '{quote}'\n  }\n  br() {\n    return '\\n'\n  }\n  hr() {\n    return '----'\n  }\n  link(href: string, _title: string, text: string) {\n    const arr = [href]\n    if (text) {\n      arr.unshift(text)\n    }\n    return '[' + arr.join('|') + ']'\n  }\n  list(body: string, ordered: boolean) {\n    const arr = body.trim().split('\\n').filter(Boolean)\n    const type = ordered ? '#' : '*'\n    return (\n      arr\n        .map((line) => {\n          const isSub = line.startsWith(type)\n          return '\\n' + type + (isSub ? '' : ' ') + line\n        })\n        .join('') + '\\n\\n'\n    )\n  }\n  listitem(body: string) {\n    return body + '\\n'\n  }\n  image(href: string) {\n    return '!' + href + '!'\n  }\n  table(header: string, body: string) {\n    return header + body + '\\n'\n  }\n  tablerow(content: string) {\n    return content + '\\n'\n  }\n  tablecell(\n    content: string,\n    flags: {\n      header: boolean\n    },\n  ) {\n    const type = flags.header ? '||' : '|'\n    return type + content\n  }\n  code(code: string, lang: string) {\n    if (lang) {\n      lang = lang.toLowerCase()\n      lang = langMap[lang] || 'none'\n    }\n    let config = {\n      language: lang,\n      borderStyle: 'solid',\n      theme: 'default', // dark is good\n      linenumbers: true,\n      collapse: false,\n    }\n    const lineCount = code.split('\\n').length\n    if (lineCount > 20) {\n      // code is too long\n      config.collapse = true\n    }\n    const param = stringify(config, '|', '=')\n    return '{code:' + param + '}\\n' + code + '\\n{code}\\n\\n'\n  }\n}\n\n/**\n * 将markdown转wiki\n * @param markdown\n */\nexport const md2Wiki = (markdown: string) => {\n  const wikiRenderer = new WikiRenderer()\n  return marked.parse(markdown, { renderer: wikiRenderer })\n}\n","import { md2Wiki } from './render'\nimport { DocDetail } from '@elog/types'\n\n/**\n * 将markdown转wiki\n * @param post\n */\nexport function wikiAdapter(post: DocDetail) {\n  const { body } = post\n  return md2Wiki(body)\n}\n","import { DocDetail } from '@elog/types'\nimport hljs from 'highlight.js'\nimport MarkdownIt from 'markdown-it'\n\n/**\n * markdown转html（代码高亮）\n * @param post\n */\nexport function htmlAdapterWithHighlight(post: DocDetail) {\n  let { body_html, body } = post\n  if (body_html) {\n    return body_html\n  } else {\n    return new MarkdownIt({\n      html: true,\n      xhtmlOut: true,\n      breaks: true,\n      linkify: true,\n      typographer: true,\n      highlight: function (code: string, lang: string) {\n        const language = hljs.getLanguage(lang) ? lang : 'plaintext'\n        return hljs.highlight(code, { language }).value\n      },\n    }).render(body)\n  }\n}\n\n/**\n * markdown转html（无代码高亮）\n * @param post\n */\nexport function htmlAdapter(post: DocDetail) {\n  let { body_html, body } = post\n  if (body_html) {\n    return body_html\n  } else {\n    return new MarkdownIt({\n      html: true,\n      xhtmlOut: true,\n      breaks: true,\n      linkify: true,\n      typographer: true,\n    }).render(body)\n  }\n}\n"]}