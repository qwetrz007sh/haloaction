import { DocDetail } from '@elog/types';
import HaloClient, { HaloConfig } from '@elog/sdk-halo';
import ConfluenceClient__default, { ConfluenceConfig } from '@elog/sdk-confluence';
export * from '@elog/sdk-confluence';
import WordPressClient, { WordPressConfig } from '@elog/sdk-wordpress';
export * from '@elog/plugin-adapter';

/**
 * 部署平台
 */
declare enum DeployPlatformEnum {
    LOCAL = "local",
    CONFLUENCE = "confluence",
    WORDPRESS = "wordpress",
    HALO = "halo"
}
/**
 * 本地部署相关
 */
declare enum FileNameEnum {
    TITLE = "title",
    URLNAME = "urlname"
}
declare enum FormatEnum {
    MARKDOWN = "markdown",
    /** @deprecated 即将1.0废弃 */
    MATTER_MARKDOWN = "matter-markdown",
    HTML = "html",
    HTML_HIGHLIGHT = "html-highlight",
    WIKI = "wiki"
}
declare const fileNameList: FileNameEnum[];
declare const formatList: FormatEnum[];

/**
 * local 配置
 */
interface LocalConfig {
    outputDir: string;
    filename: FileNameEnum;
    format: FormatEnum;
    catalog: boolean;
    formatExt?: string | Function;
    frontMatter?: {
        enable?: boolean;
        exclude?: string[];
        include?: string[];
    };
}
interface IHaloConfig extends HaloConfig {
    formatExt?: string;
    rowType?: string;
    needUploadImage?: boolean;
}
/**
 * 部署配置
 */
type DeployPlatformConfig = {
    [key in DeployPlatformEnum]: any;
};
type DeployConfig = {
    platform: DeployPlatformEnum;
} & DeployPlatformConfig;
/** 文档处理适配器 */
interface AdapterConfig {
    format: FormatEnum;
    formatExt?: string | Function;
    frontMatter?: {
        enable?: boolean;
        exclude?: string[];
        include?: string[];
    };
}
type AdapterFunction = (doc: DocDetail, imageClient?: any) => DocDetail | string | Promise<DocDetail>;
interface DocMap<T> {
    [key: string]: T;
}

/**
 * 文档处理适配器
 */
declare class AdapterClient {
    config: AdapterConfig;
    ctx: AdapterFunction;
    constructor(config: AdapterConfig);
    /**
     * 初始化适配器
     * @private
     */
    private initAdapter;
    /**
     * 获取文档处理器
     */
    getAdapter(): AdapterFunction;
}

declare class DeployLocal {
    config: LocalConfig;
    cacheFileNames: string[];
    adapterClient: AdapterClient;
    /** 文档处理适配器 */
    adapter: AdapterFunction;
    constructor(config: LocalConfig);
    /**
     * 过滤 Front-Matter
     * @param post
     * @param filename
     */
    filterFrontMatter(post: DocDetail, filename: string): void;
    /**
     * 本地部署
     * @param articleList
     * @param imageClient
     */
    deploy(articleList: DocDetail[], imageClient?: any): Promise<DocDetail[]>;
    /**
     * 检查文件名
     * @param fileName
     * @param originName
     * @param doc_id
     */
    checkFileName(fileName: string, originName: string, doc_id: string): string;
}

declare class DeployConfluence {
    config: ConfluenceConfig;
    ctx: ConfluenceClient__default;
    adapterClient: AdapterClient;
    /** 文档处理适配器 */
    adapter: AdapterFunction;
    constructor(config: ConfluenceConfig);
    deploy(articleList: DocDetail[]): Promise<undefined>;
}

declare class DeployWordPress {
    config: WordPressConfig;
    ctx: WordPressClient;
    adapterClient: AdapterClient;
    /** 文档处理适配器 */
    adapter: AdapterFunction;
    constructor(config: WordPressConfig);
    deploy(articleList: DocDetail[]): Promise<undefined>;
}

declare class DeployHalo {
    config: IHaloConfig;
    ctx: HaloClient;
    adapterClient: AdapterClient;
    /** 文档处理适配器 */
    adapter: AdapterFunction;
    constructor(config: HaloConfig);
    getIds(items: any, map: any): any;
    deploy(articleList: DocDetail[], imageClient?: any): Promise<void>;
}

/**
 * 部署器
 */
declare class Deploy {
    config: DeployConfig;
    deployClient: DeployLocal | DeployConfluence | DeployWordPress | DeployHalo;
    constructor(config: DeployConfig);
    initDeploy(): DeployLocal | DeployConfluence | DeployWordPress | DeployHalo;
    /**
     * 部署配置
     * @param articleList
     * @param imageClient
     */
    deploy(articleList: DocDetail[], imageClient?: any): Promise<void | DocDetail[]>;
}

export { AdapterConfig, AdapterFunction, DeployConfig, DeployPlatformEnum, DocMap, FileNameEnum, FormatEnum, IHaloConfig, LocalConfig, Deploy as default, fileNameList, formatList };
