"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } function _createStarExport(obj) { Object.keys(obj) .filter((key) => key !== "default" && key !== "__esModule") .forEach((key) => { if (exports.hasOwnProperty(key)) { return; } Object.defineProperty(exports, key, {enumerable: true, configurable: true, get: () => obj[key]}); }); }var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/platform/local.ts
var _filenamify = require('filenamify'); var _filenamify2 = _interopRequireDefault(_filenamify);
var _path = require('path'); var _path2 = _interopRequireDefault(_path);
var _mkdirp = require('mkdirp'); var _mkdirp2 = _interopRequireDefault(_mkdirp);
var _shared = require('@elog/shared');
var _fs = require('fs'); var _fs2 = _interopRequireDefault(_fs);

// src/const.ts
var DeployPlatformEnum = /* @__PURE__ */ ((DeployPlatformEnum2) => {
  DeployPlatformEnum2["LOCAL"] = "local";
  DeployPlatformEnum2["CONFLUENCE"] = "confluence";
  DeployPlatformEnum2["WORDPRESS"] = "wordpress";
  DeployPlatformEnum2["HALO"] = "halo";
  return DeployPlatformEnum2;
})(DeployPlatformEnum || {});
var FileNameEnum = /* @__PURE__ */ ((FileNameEnum2) => {
  FileNameEnum2["TITLE"] = "title";
  FileNameEnum2["URLNAME"] = "urlname";
  return FileNameEnum2;
})(FileNameEnum || {});
var FormatEnum = /* @__PURE__ */ ((FormatEnum2) => {
  FormatEnum2["MARKDOWN"] = "markdown";
  FormatEnum2["MATTER_MARKDOWN"] = "matter-markdown";
  FormatEnum2["HTML"] = "html";
  FormatEnum2["HTML_HIGHLIGHT"] = "html-highlight";
  FormatEnum2["WIKI"] = "wiki";
  return FormatEnum2;
})(FormatEnum || {});
var fileNameList = Object.values(FileNameEnum);
var formatList = Object.values(FormatEnum);

// src/adapter/index.ts







var _pluginadapter = require('@elog/plugin-adapter'); _createStarExport(_pluginadapter);
var AdapterClient = class {
  constructor(config) {
    this.config = config;
    this.ctx = this.initAdapter();
  }
  /**
   * 初始化适配器
   * @private
   */
  initAdapter() {
    var _a;
    if (this.config.formatExt) {
      const { format } = _shared.getPackage.call(void 0, this.config.formatExt);
      return format;
    } else {
      switch (this.config.format) {
        case "markdown" /* MARKDOWN */: {
          if ((_a = this.config.frontMatter) == null ? void 0 : _a.enable) {
            return _pluginadapter.matterMarkdownAdapter;
          }
          return _pluginadapter.markdownAdapter;
        }
        case "matter-markdown" /* MATTER_MARKDOWN */:
          return _pluginadapter.matterMarkdownAdapter;
        case "wiki" /* WIKI */:
          return _pluginadapter.wikiAdapter;
        case "html" /* HTML */:
          return _pluginadapter.htmlAdapter;
        case "html-highlight" /* HTML_HIGHLIGHT */:
          return _pluginadapter.htmlAdapterWithHighlight;
        default:
          return _pluginadapter.markdownAdapter;
      }
    }
  }
  /**
   * 获取文档处理器
   */
  getAdapter() {
    return this.ctx;
  }
};

// src/platform/local.ts
var DeployLocal = class {
  constructor(config) {
    this.cacheFileNames = [];
    this.config = config;
    this.adapterClient = new AdapterClient({
      format: config.format,
      frontMatter: config.frontMatter,
      formatExt: config.formatExt
    });
    this.adapter = this.adapterClient.getAdapter();
  }
  /**
   * 过滤 Front-Matter
   * @param post
   * @param filename
   */
  filterFrontMatter(post, filename) {
    var _a, _b, _c;
    const frontMatter = this.config.frontMatter;
    if (frontMatter == null ? void 0 : frontMatter.enable) {
      if ((_b = (_a = this.config.frontMatter) == null ? void 0 : _a.include) == null ? void 0 : _b.length) {
        Object.keys(post.properties).forEach((item) => {
          var _a2, _b2;
          if (!((_b2 = (_a2 = this.config.frontMatter) == null ? void 0 : _a2.include) == null ? void 0 : _b2.includes(item))) {
            if (item !== filename) {
              delete post.properties[item];
            }
          }
        });
      }
      if ((_c = frontMatter == null ? void 0 : frontMatter.exclude) == null ? void 0 : _c.length) {
        Object.keys(post.properties).forEach((item) => {
          var _a2, _b2;
          if ((_b2 = (_a2 = this.config.frontMatter) == null ? void 0 : _a2.exclude) == null ? void 0 : _b2.includes(item)) {
            if (item !== filename) {
              delete post.properties[item];
            }
          }
        });
      }
    }
  }
  /**
   * 本地部署
   * @param articleList
   * @param imageClient
   */
  deploy(articleList, imageClient) {
    return __async(this, null, function* () {
      let { filename = "title" /* TITLE */ } = this.config;
      const outputDir = _path2.default.join(process.cwd(), this.config.outputDir);
      for (let post of articleList) {
        this.filterFrontMatter(post, filename);
        let formatRes = yield this.adapter(post, imageClient);
        let body = "";
        if (typeof formatRes === "string") {
          body = formatRes;
        } else {
          body = formatRes.body;
          post = formatRes;
        }
        if (!post.properties[filename]) {
          _shared.out.warning("\u8DF3\u8FC7", `\u6587\u6863\u7F3A\u5931${filename}\u5C5E\u6027\uFF0C \u8BF7\u68C0\u67E5\u8BE5\u5B57\u6BB5\u662F\u5426\u88AB\u8986\u76D6`);
          continue;
        }
        let fileName = _filenamify2.default.call(void 0, post.properties[filename]);
        if (!fileName) {
          _shared.out.warning(`\u5B58\u5728\u672A\u547D\u540D\u6587\u6863\uFF0C\u5C06\u81EA\u52A8\u91CD\u547D\u540D\u4E3A\u3010\u672A\u547D\u540D\u6587\u6863_${post.doc_id}\u3011`);
          fileName = `\u672A\u547D\u540D\u6587\u6863_${post.doc_id}`;
        }
        let postPath;
        if (this.config.catalog) {
          if (Array.isArray(post.catalog)) {
            const tocPath = post.catalog.map((item) => item.title).join("/");
            fileName = this.checkFileName(fileName + tocPath, fileName, post.doc_id);
            const outdir = _path2.default.join(outputDir, tocPath);
            _mkdirp2.default.sync(outdir);
            postPath = _path2.default.join(outdir, `${fileName}.md`);
            _shared.out.info("\u751F\u6210\u6587\u6863", `${fileName}.md`);
          } else {
            _shared.out.warning("\u76EE\u5F55\u7F3A\u5931", `${fileName}\u7F3A\u5931\u76EE\u5F55\u4FE1\u606F\uFF0C\u5C06\u751F\u6210\u5728\u6307\u5B9A\u76EE\u5F55`);
            fileName = this.checkFileName(fileName, fileName, post.doc_id);
            postPath = _path2.default.join(outputDir, `${fileName}.md`);
            _shared.out.info("\u751F\u6210\u6587\u6863", `${fileName}.md`);
            _mkdirp2.default.sync(outputDir);
          }
        } else {
          fileName = this.checkFileName(fileName, fileName, post.doc_id);
          postPath = _path2.default.join(outputDir, `${fileName}.md`);
          _shared.out.info("\u751F\u6210\u6587\u6863", `${fileName}.md`);
          _mkdirp2.default.sync(outputDir);
        }
        _fs2.default.writeFileSync(postPath, body, {
          encoding: "utf8"
        });
        post.realName = fileName;
        post.relativePath = postPath.replace(outputDir, "");
      }
      return articleList;
    });
  }
  /**
   * 检查文件名
   * @param fileName
   * @param originName
   * @param doc_id
   */
  checkFileName(fileName, originName, doc_id) {
    let newName;
    if (this.cacheFileNames.includes(fileName)) {
      const newFileName = `${originName}_${doc_id}`;
      _shared.out.warning("\u6587\u6863\u91CD\u590D", `${originName}.md\u6587\u6863\u5DF2\u5B58\u5728\uFF0C\u5C06\u4E3A\u81EA\u52A8\u91CD\u547D\u540D\u4E3A${newFileName}.md`);
      newName = newFileName;
    } else {
      newName = originName;
      this.cacheFileNames.push(fileName);
    }
    return newName;
  }
};
var local_default = DeployLocal;

// src/platform/confluence.ts

var _sdkconfluence = require('@elog/sdk-confluence'); var _sdkconfluence2 = _interopRequireDefault(_sdkconfluence); _createStarExport(_sdkconfluence);
var DeployConfluence = class {
  constructor(config) {
    this.config = config;
    this.ctx = new (0, _sdkconfluence2.default)(config);
    this.adapterClient = new AdapterClient({ format: "wiki" /* WIKI */, formatExt: config.formatExt });
    this.adapter = this.adapterClient.getAdapter();
  }
  deploy(articleList) {
    return __async(this, null, function* () {
      var _a;
      _shared.out.info("\u6B63\u5728\u90E8\u7F72\u5230Confluence...");
      const sortArticleList = articleList.sort((a, b) => {
        if (!a.catalog || !b.catalog) {
          return 0;
        }
        return a.catalog.length - b.catalog.length;
      });
      const rootPageList = yield this.ctx.getRootPageList();
      let rootPageMap = {};
      rootPageList.forEach((item) => {
        rootPageMap[item.title] = item;
      });
      for (const articleInfo of sortArticleList) {
        articleInfo.body_wiki = this.adapter(articleInfo);
        const cacheWikiPage = rootPageMap[articleInfo.properties.title];
        if (cacheWikiPage) {
          _shared.out.info("\u66F4\u65B0\u6587\u6863", cacheWikiPage.title);
          const updatingPage = yield this.ctx.getPageById(cacheWikiPage.id);
          const version = updatingPage.version.number + 1;
          yield this.ctx.updatePage(articleInfo, cacheWikiPage.id, version);
        } else {
          _shared.out.info("\u65B0\u589E\u6587\u6863", articleInfo.properties.title);
          let parentId = "";
          const catalog = articleInfo.catalog;
          if (catalog == null ? void 0 : catalog.length) {
            const parentTitle = catalog[catalog.length - 1].title;
            parentId = (_a = rootPageMap[parentTitle]) == null ? void 0 : _a.id;
          }
          try {
            const createdPage = yield this.ctx.createPage(articleInfo, parentId);
            rootPageMap[createdPage.title] = createdPage;
          } catch (e) {
            if (e.message.indexOf("A page with this title already exists") > -1) {
              _shared.out.err(
                "\u8DF3\u8FC7\u90E8\u7F72",
                `\u6587\u7AE0\u6807\u9898\u5DF2\u5B58\u5728\u4E8Econfluence, \u8BF7\u68C0\u67E5: ${articleInfo.properties.title}`
              );
            } else {
              _shared.out.err("\u8DF3\u8FC7\u90E8\u7F72", e.message);
              _shared.out.debug(e);
            }
          }
        }
      }
      return void 0;
    });
  }
};
var confluence_default = DeployConfluence;

// src/platform/wordpress.ts







var _sdkwordpress = require('@elog/sdk-wordpress'); var _sdkwordpress2 = _interopRequireDefault(_sdkwordpress);

// src/utils/common.ts
function getNoRepValues(posts, tagKey, categoryKey) {
  const values = posts.reduce(
    (acc, cur) => {
      const tag = cur.properties[tagKey];
      const category = cur.properties[categoryKey];
      if (typeof tag === "string") {
        acc.tags.push(tag);
      } else if (Array.isArray(tag)) {
        acc.tags = acc.tags.concat(tag);
      }
      if (typeof category === "string") {
        acc.categories.push(category);
      } else if (Array.isArray(category)) {
        acc.categories = acc.categories.concat(category);
      }
      return acc;
    },
    { tags: [], categories: [] }
  );
  return {
    tags: Array.from(new Set(values.tags)),
    categories: Array.from(new Set(values.categories))
  };
}
var removeEmptyProperties = (obj) => {
  const filteredObj = {};
  Object.entries(obj).forEach(([key, value]) => {
    if (value !== null && value !== void 0 && value !== "" && value.length !== 0) {
      filteredObj[key] = value;
    }
  });
  return filteredObj;
};

// src/platform/wordpress.ts
var DeployWordPress = class {
  constructor(config) {
    this.config = config;
    this.ctx = new (0, _sdkwordpress2.default)(config);
    this.adapterClient = new AdapterClient({
      format: "html-highlight" /* HTML_HIGHLIGHT */,
      formatExt: config.formatExt
    });
    this.adapter = this.adapterClient.getAdapter();
  }
  deploy(articleList) {
    return __async(this, null, function* () {
      try {
        _shared.out.access("\u6B63\u5728\u90E8\u7F72\u5230 WordPress...");
        let tagsKey = "tags";
        let categoriesKey = "categories";
        let urlnameKey = "urlname";
        let coverKey = "cover";
        let descriptionKey = "description";
        if (this.config.keyMap && Object.keys(this.config.keyMap)) {
          tagsKey = this.config.keyMap.tags || tagsKey;
          categoriesKey = this.config.keyMap.categories || categoriesKey;
          urlnameKey = this.config.keyMap.urlname || urlnameKey;
          coverKey = this.config.keyMap.cover || coverKey;
          descriptionKey = this.config.keyMap.description || descriptionKey;
        }
        const sortArticleList = articleList.sort((a, b) => {
          if (!a.catalog || !b.catalog) {
            return 0;
          }
          return a.catalog.length - b.catalog.length;
        });
        const postList = yield this.ctx.getAllPosts();
        let postMap = {};
        postList.forEach((item) => {
          postMap[item.title.rendered] = item;
        });
        const wpTags = yield this.ctx.getAllTags();
        const wpCategories = yield this.ctx.getAllCategories();
        const wpMedias = yield this.ctx.getAllMedia();
        const noRepValues = getNoRepValues(sortArticleList, tagsKey, categoriesKey);
        for (const tag of noRepValues.tags) {
          const wpTag = wpTags.find((t) => t.name === tag);
          if (!wpTag) {
            try {
              const newTag = yield this.ctx.createTag({ name: tag });
              wpTags.push(newTag);
            } catch (e) {
              _shared.out.warning(`\u521B\u5EFA ${tag} \u6807\u7B7E\u5931\u8D25: ${e.message}`);
              _shared.out.debug(e);
            }
          }
        }
        for (const category of noRepValues.categories) {
          const wpCategory = wpCategories.find((t) => t.name === category);
          if (!wpCategory) {
            try {
              const newCategory = yield this.ctx.createCategory({ name: category });
              wpCategories.push(newCategory);
            } catch (e) {
              _shared.out.warning(`\u521B\u5EFA ${category} \u5206\u7C7B\u5931\u8D25: ${e.message}`);
              _shared.out.debug(e);
            }
          }
        }
        let publishedPostMap = {};
        for (const articleInfo of sortArticleList) {
          if (publishedPostMap[articleInfo.properties.title]) {
            _shared.out.warning("\u8DF3\u8FC7\u66F4\u65B0", `\u5B58\u5728\u91CD\u590D\u6587\u6863\uFF1A${articleInfo.properties.title}`);
            continue;
          }
          articleInfo.body_html = this.adapter(articleInfo);
          const post = {
            title: articleInfo.properties.title,
            content: articleInfo.body_html,
            status: "publish",
            slug: articleInfo.properties[urlnameKey] || articleInfo.properties.title,
            excerpt: articleInfo.properties[descriptionKey]
          };
          const postTags = articleInfo.properties[tagsKey];
          if (postTags == null ? void 0 : postTags.length) {
            const tags = Array.isArray(postTags) ? postTags : postTags.split(",");
            post.tags = tags.map((tag) => {
              const wpTag = wpTags.find((t) => t.name === tag);
              return wpTag == null ? void 0 : wpTag.id;
            });
          }
          const postCategories = articleInfo.properties[categoriesKey];
          if (postCategories == null ? void 0 : postCategories.length) {
            const categories = Array.isArray(postCategories) ? postCategories : postCategories.split(",");
            post.categories = categories.reduce((acc, cur) => {
              const wpCategory = wpCategories.find((t) => t.name === cur);
              if (wpCategory) {
                acc.push(wpCategory.id);
              }
              return acc;
            }, []);
          }
          if (articleInfo.properties[coverKey]) {
            const picUrl = articleInfo.properties[coverKey];
            const url = _shared.cleanParameter.call(void 0, picUrl);
            const uuid = _shared.generateUniqueId.call(void 0, url);
            const fileType = yield _shared.getFileType.call(void 0, picUrl);
            if (fileType) {
              const filename = `${uuid}.${fileType.type}`;
              const cacheMedia = wpMedias.find((item) => {
                var _a;
                return ((_a = item.title) == null ? void 0 : _a.rendered) === filename;
              });
              if (cacheMedia) {
                _shared.out.info("\u5FFD\u7565\u4E0A\u4F20", `\u56FE\u7247\u5DF2\u5B58\u5728: ${cacheMedia.guid.rendered}`);
                post.featured_media = cacheMedia.id;
              } else {
                const pic = yield _shared.getPicBufferFromURL.call(void 0, picUrl);
                if (!pic) {
                  continue;
                }
                const media = yield this.ctx.uploadMedia(pic, filename);
                _shared.out.info("\u4E0A\u4F20\u6210\u529F", media.guid.rendered);
                wpMedias.push(media);
                post.featured_media = media.id;
              }
            }
          }
          const cachePage = postMap[articleInfo.properties.title];
          if (cachePage) {
            yield this.ctx.updatePost(cachePage.id, removeEmptyProperties(post));
            _shared.out.info("\u66F4\u65B0\u6210\u529F", articleInfo.properties.title);
          } else {
            const newPost = yield this.ctx.createPost(
              removeEmptyProperties(post)
            );
            postMap[newPost.title.rendered] = newPost;
            _shared.out.info("\u65B0\u589E\u6210\u529F", articleInfo.properties.title);
          }
          publishedPostMap[articleInfo.properties.title] = cachePage;
        }
        return void 0;
      } catch (error) {
        _shared.out.err("\u90E8\u7F72\u5230 WordPress \u5931\u8D25: ", error.message);
        _shared.out.debug(error);
        process.exit(-1);
      }
    });
  }
};
var wordpress_default = DeployWordPress;

// src/platform/halo.ts
var _sdkhalo = require('@elog/sdk-halo'); var _sdkhalo2 = _interopRequireDefault(_sdkhalo);
var _transliteration = require('transliteration');









var DeployHalo = class {
  constructor(config) {
    this.config = config;
    this.ctx = new (0, _sdkhalo2.default)(config);
    this.adapterClient = new AdapterClient({
      format: "html" /* HTML */,
      formatExt: this.config.formatExt
    });
    this.adapter = this.adapterClient.getAdapter();
  }
  getIds(items, map) {
    if (!items)
      return [];
    let list = items;
    if (typeof items === "string") {
      list = [items];
    }
    return list.map((item) => {
      return map[item].metadata.name;
    });
  }
  deploy(articleList, imageClient) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      _shared.out.access("\u6B63\u5728\u90E8\u7F72\u5230 Halo...");
      const postList = yield this.ctx.getPostList();
      let postMap = {};
      postList.items.forEach((item) => {
        postMap[item.post.metadata.name] = item;
      });
      let categoryMap = {};
      const categories = yield this.ctx.getCategories();
      categories.items.forEach((item) => {
        categoryMap[item.spec.displayName] = item;
      });
      let tagMap = {};
      const tags = yield this.ctx.getTags();
      tags.items.forEach((item) => {
        tagMap[item.spec.displayName] = item;
      });
      let imageMap = {};
      const images = yield this.ctx.getAttachments();
      images.items.forEach((item) => {
        if (item.spec.displayName) {
          imageMap[item.spec.displayName] = item;
        }
      });
      const noRepValues = getNoRepValues(articleList, "tags", "categories");
      for (const [index, category] of noRepValues.categories.entries()) {
        const element = categoryMap[category];
        if (!element) {
          try {
            const params = {
              spec: {
                displayName: category,
                slug: _transliteration.slugify.call(void 0, category, { trim: true }),
                description: "",
                cover: "",
                template: "",
                priority: categories.items.length + index,
                children: []
              },
              apiVersion: "content.halo.run/v1alpha1",
              kind: "Category",
              metadata: {
                name: "",
                generateName: "category-"
              }
            };
            const newCategory = yield this.ctx.createCategory(params);
            categoryMap[newCategory.spec.displayName] = newCategory;
            _shared.out.info("\u65B0\u589E\u5206\u7C7B", category);
          } catch (e) {
            _shared.out.err(`\u521B\u5EFA ${category} \u5206\u7C7B\u5931\u8D25: ${e.message}`);
            _shared.out.debug(e);
          }
        }
      }
      for (const tag of noRepValues.tags) {
        const element = tagMap[tag];
        if (!element) {
          try {
            const params = {
              spec: {
                displayName: tag,
                slug: _transliteration.slugify.call(void 0, tag, { trim: true }),
                color: "#ffffff",
                cover: ""
              },
              apiVersion: "content.halo.run/v1alpha1",
              kind: "Tag",
              metadata: {
                name: "",
                generateName: "tag-"
              }
            };
            const newTag = yield this.ctx.createTag(params);
            tagMap[newTag.spec.displayName] = newTag;
            _shared.out.info("\u65B0\u589E\u6807\u7B7E", tag);
          } catch (e) {
            _shared.out.err(`\u521B\u5EFA ${tag} \u6807\u7B7E\u5931\u8D25: ${e.message}`);
            _shared.out.debug(e);
          }
        }
      }
      for (let doc of articleList) {
        if (this.config.needUploadImage) {
          const urlList = _shared.getUrlListFromContent.call(void 0, doc.body);
          const cover = doc.properties.cover;
          if (cover) {
            urlList.push(_shared.getUrl.call(void 0, cover));
          }
          for (const image of urlList) {
            const fileName = _shared.generateUniqueId.call(void 0, image.url, 28);
            const fileType = yield _shared.getFileType.call(void 0, image.url);
            if (!fileType) {
              _shared.out.warning(`${(_a = doc == null ? void 0 : doc.properties) == null ? void 0 : _a.title} \u5B58\u5728\u83B7\u53D6\u56FE\u7247\u7C7B\u578B\u5931\u8D25\uFF0C\u8DF3\u8FC7\uFF1A${image.url}`);
              continue;
            }
            const fullName = `${fileName}.${fileType.type}`;
            const item2 = imageMap[fullName];
            if (!item2) {
              const buffer = yield _shared.getPicBufferFromURL.call(void 0, image.original);
              if (!buffer) {
                _shared.out.warning("\u8DF3\u8FC7", `${(_b = doc == null ? void 0 : doc.properties) == null ? void 0 : _b.title} \u5B58\u5728\u83B7\u53D6\u56FE\u7247\u5185\u5BB9\u5931\u8D25\uFF1A${image.url}`);
                continue;
              }
              try {
                const attachment = yield this.ctx.uploadAttachment(buffer, fullName);
                const imageUrl = yield this.ctx.getAttachmentPermalink(attachment.metadata.name);
                _shared.out.info("\u4E0A\u4F20\u6210\u529F", imageUrl);
                imageMap[fullName] = __spreadProps(__spreadValues({}, attachment), {
                  status: __spreadProps(__spreadValues({}, attachment.status), {
                    permalink: imageUrl
                  })
                });
                doc.body = doc.body.replace(image.original, imageUrl);
                if (image.original === cover) {
                  doc.properties.cover = imageUrl;
                }
              } catch (e) {
                _shared.out.warning("\u8DF3\u8FC7", `${(_c = doc == null ? void 0 : doc.properties) == null ? void 0 : _c.title} \u5B58\u5728\u4E0A\u4F20\u56FE\u7247\u5931\u8D25\uFF1A${image.url}`);
                _shared.out.debug(e);
              }
            } else {
              _shared.out.info("\u5FFD\u7565\u4E0A\u4F20", `\u56FE\u7247\u5DF2\u5B58\u5728: ${item2.status.permalink}`);
              doc.body = doc.body.replace(image.original, item2.status.permalink);
              if (image.original === cover) {
                doc.properties.cover = item2.status.permalink;
              }
            }
          }
        }
        let formatRes = yield this.adapter(doc, imageClient);
        if (typeof formatRes === "string") {
          doc.body_html = formatRes;
        } else {
          doc.body_html = formatRes.body_html;
          doc = formatRes;
        }
        let params = {
          post: {
            spec: {
              title: "",
              slug: "",
              template: "",
              cover: "",
              deleted: false,
              publish: false,
              pinned: false,
              allowComment: true,
              visible: _sdkhalo.PostSpecVisibleEnum.Public,
              priority: 0,
              excerpt: {
                autoGenerate: true,
                raw: ""
              },
              categories: [],
              tags: [],
              htmlMetas: []
            },
            apiVersion: "content.halo.run/v1alpha1",
            kind: "Post",
            metadata: {
              name: doc.doc_id
            }
          },
          content: {
            raw: "",
            content: "",
            rawType: "html"
          }
        };
        const item = postMap[doc.doc_id];
        if (item) {
          params = item;
          params.content = {
            raw: "",
            content: "",
            rawType: "html"
          };
        }
        params.post.spec.title = doc.properties.title;
        params.post.spec.slug = doc.properties.urlname;
        params.post.spec.cover = doc.properties.cover;
        params.post.spec.excerpt.raw = doc.properties.excerpt;
        const autoExcerpt = doc.properties.autoExcerpt;
        params.post.spec.excerpt.autoGenerate = typeof autoExcerpt === "string" && autoExcerpt === "true" || typeof autoExcerpt === "boolean" && autoExcerpt;
        const pinned = doc.properties.pinned;
        params.post.spec.pinned = typeof pinned === "string" && pinned === "true" || typeof pinned === "boolean" && pinned;
        if (doc.properties.public === void 0) {
          params.post.spec.visible = _sdkhalo.PostSpecVisibleEnum.Public;
        } else {
          params.post.spec.visible = doc.properties.public ? _sdkhalo.PostSpecVisibleEnum.Public : _sdkhalo.PostSpecVisibleEnum.Private;
        }
        const categoryIds = this.getIds(doc.properties.categories, categoryMap);
        const tagIds = this.getIds(doc.properties.tags, tagMap);
        if (doc.properties.tags) {
          params.post.spec.tags = tagIds;
        }
        if (doc.properties.categories) {
          params.post.spec.categories = categoryIds;
        }
        params.content.content = doc.body_html;
        if (this.config.rowType === "markdown") {
          params.content.raw = doc.body;
          params.content.rawType = "markdown";
        } else {
          params.content.rawType = "html";
          params.content.raw = doc.body_html;
        }
        if (!item) {
          try {
            yield this.ctx.createPost(params);
            _shared.out.info("\u65B0\u589E\u6587\u6863", doc.properties.title);
          } catch (e) {
            _shared.out.err(`\u65B0\u589E ${doc.properties.title} \u6587\u6863\u5931\u8D25: ${e.message}`);
            _shared.out.debug(e);
          }
        } else {
          try {
            yield this.ctx.updatePostInfo(doc.doc_id, params.post);
            yield _shared.delay.call(void 0, );
            yield this.ctx.updatePostContent(doc.doc_id, params.content);
            _shared.out.info("\u66F4\u65B0\u6587\u6863", doc.properties.title);
          } catch (e) {
            _shared.out.err(`\u66F4\u65B0 ${doc.properties.title} \u6587\u6863\u5931\u8D25: ${e.message}`);
            _shared.out.debug(e);
          }
        }
        const publish = doc.properties.publish;
        if (publish === void 0 || typeof publish === "string" && publish === "true" || typeof publish === "boolean" && publish) {
          yield this.ctx.publishPost(doc.doc_id);
          _shared.out.info("\u53D1\u5E03\u6587\u6863", doc.properties.title);
        } else {
          yield this.ctx.unpublishPost(doc.doc_id);
          _shared.out.info("\u4E0B\u67B6\u6587\u6863", doc.properties.title);
        }
      }
    });
  }
};
var halo_default = DeployHalo;

// src/client.ts
var Deploy = class {
  constructor(config) {
    this.config = config;
    this.deployClient = this.initDeploy();
  }
  initDeploy() {
    if (this.config.platform === "confluence" /* CONFLUENCE */) {
      const config = this.config.confluence;
      return new confluence_default(config);
    } else if (this.config.platform === "wordpress" /* WORDPRESS */) {
      const config = this.config.wordpress;
      return new wordpress_default(config);
    } else if (this.config.platform === "halo" /* HALO */) {
      const config = this.config.halo;
      return new halo_default(config);
    } else {
      const config = this.config.local;
      return new local_default(config);
    }
  }
  /**
   * 部署配置
   * @param articleList
   * @param imageClient
   */
  deploy(articleList, imageClient) {
    return __async(this, null, function* () {
      return this.deployClient.deploy(articleList, imageClient);
    });
  }
};
var client_default = Deploy;

// src/index.ts


var src_default = client_default;







exports.DeployPlatformEnum = DeployPlatformEnum; exports.FileNameEnum = FileNameEnum; exports.FormatEnum = FormatEnum; exports.default = src_default; exports.fileNameList = fileNameList; exports.formatList = formatList;
//# sourceMappingURL=index.js.map