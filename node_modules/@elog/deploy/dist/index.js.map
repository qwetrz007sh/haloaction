{"version":3,"sources":["../src/platform/local.ts","../src/const.ts","../src/adapter/index.ts","../src/platform/confluence.ts","../src/platform/wordpress.ts","../src/utils/common.ts","../src/platform/halo.ts","../src/client.ts","../src/index.ts"],"names":["DeployPlatformEnum","FileNameEnum","FormatEnum","_a","_b","out","generateUniqueId","getFileType","getPicBufferFromURL","item"],"mappings":"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","sourcesContent":["import filenamify from 'filenamify'\nimport path from 'path'\nimport mkdirp from 'mkdirp'\nimport { out } from '@elog/shared'\nimport fs from 'fs'\nimport { AdapterFunction, LocalConfig } from '../types'\nimport { FileNameEnum } from '../const'\nimport { DocDetail } from '@elog/types'\nimport { AdapterClient } from '../adapter'\n\nclass DeployLocal {\n  config: LocalConfig\n  cacheFileNames: string[] = []\n  adapterClient: AdapterClient\n  /** 文档处理适配器 */\n  adapter: AdapterFunction\n\n  constructor(config: LocalConfig) {\n    this.config = config\n    this.adapterClient = new AdapterClient({\n      format: config.format,\n      frontMatter: config.frontMatter,\n      formatExt: config.formatExt,\n    })\n    this.adapter = this.adapterClient.getAdapter()\n  }\n\n  /**\n   * 过滤 Front-Matter\n   * @param post\n   * @param filename\n   */\n  filterFrontMatter(post: DocDetail, filename: string) {\n    const frontMatter = this.config.frontMatter\n    if (frontMatter?.enable) {\n      if (this.config.frontMatter?.include?.length) {\n        Object.keys(post.properties).forEach((item: string) => {\n          // 过滤不需要的属性\n          if (!this.config.frontMatter?.include?.includes(item)) {\n            if (item !== filename) {\n              delete post.properties[item]\n            }\n          }\n        })\n      }\n      if (frontMatter?.exclude?.length) {\n        Object.keys(post.properties).forEach((item: string) => {\n          if (this.config.frontMatter?.exclude?.includes(item)) {\n            if (item !== filename) {\n              delete post.properties[item]\n            }\n          }\n        })\n      }\n    }\n  }\n\n  /**\n   * 本地部署\n   * @param articleList\n   * @param imageClient\n   */\n  async deploy(articleList: DocDetail[], imageClient?: any) {\n    let { filename = FileNameEnum.TITLE } = this.config\n    const outputDir = path.join(process.cwd(), this.config.outputDir)\n\n    for (let post of articleList) {\n      this.filterFrontMatter(post, filename)\n      let formatRes = await this.adapter(post, imageClient)\n      let body = ''\n\n      if (typeof formatRes === 'string') {\n        /** @deprecated 兼容处理，将在 1.0 版本移除 */\n        body = formatRes\n      } else {\n        // DocDetail 类型\n        body = formatRes.body\n        post = formatRes\n      }\n\n      if (!post.properties[filename]) {\n        out.warning('跳过', `文档缺失${filename}属性， 请检查该字段是否被覆盖`)\n        continue\n      }\n      let fileName = filenamify(post.properties[filename])\n      if (!fileName) {\n        // 没有文件名的文档\n        out.warning(`存在未命名文档，将自动重命名为【未命名文档_${post.doc_id}】`)\n        fileName = `未命名文档_${post.doc_id}`\n      }\n      let postPath: string\n      if (this.config.catalog) {\n        // 开启按目录生成\n        if (Array.isArray(post.catalog)) {\n          // 是否存在目录\n          const tocPath = post.catalog.map((item) => item.title).join('/')\n          fileName = this.checkFileName(fileName + tocPath, fileName, post.doc_id)\n          const outdir = path.join(outputDir, tocPath)\n          mkdirp.sync(outdir)\n          postPath = path.join(outdir, `${fileName}.md`)\n          // 生成文件夹\n          out.info('生成文档', `${fileName}.md`)\n        } else {\n          out.warning('目录缺失', `${fileName}缺失目录信息，将生成在指定目录`)\n          // 不存在则直接生成\n          fileName = this.checkFileName(fileName, fileName, post.doc_id)\n          postPath = path.join(outputDir, `${fileName}.md`)\n          out.info('生成文档', `${fileName}.md`)\n          mkdirp.sync(outputDir)\n        }\n      } else {\n        // 直接生成\n        fileName = this.checkFileName(fileName, fileName, post.doc_id)\n        postPath = path.join(outputDir, `${fileName}.md`)\n        out.info('生成文档', `${fileName}.md`)\n        mkdirp.sync(outputDir)\n      }\n      fs.writeFileSync(postPath, body, {\n        encoding: 'utf8',\n      })\n      // 真正的文件名\n      post.realName = fileName\n      // 删除outputDir之后的postPath\n      post.relativePath = postPath.replace(outputDir, '')\n    }\n    return articleList\n  }\n\n  /**\n   * 检查文件名\n   * @param fileName\n   * @param originName\n   * @param doc_id\n   */\n  checkFileName(fileName: string, originName: string, doc_id: string) {\n    let newName: string\n    if (this.cacheFileNames.includes(fileName)) {\n      const newFileName = `${originName}_${doc_id}`\n      out.warning('文档重复', `${originName}.md文档已存在，将为自动重命名为${newFileName}.md`)\n      newName = newFileName\n    } else {\n      newName = originName\n      this.cacheFileNames.push(fileName)\n    }\n    return newName\n  }\n}\n\nexport default DeployLocal\n","/**\n * 部署平台\n */\nexport enum DeployPlatformEnum {\n  LOCAL = 'local',\n  CONFLUENCE = 'confluence',\n  WORDPRESS = 'wordpress',\n  HALO = 'halo',\n}\n\n/**\n * 本地部署相关\n */\nexport enum FileNameEnum {\n  TITLE = 'title',\n  URLNAME = 'urlname',\n}\nexport enum FormatEnum {\n  MARKDOWN = 'markdown',\n  /** @deprecated 即将1.0废弃 */\n  MATTER_MARKDOWN = 'matter-markdown',\n  HTML = 'html',\n  HTML_HIGHLIGHT = 'html-highlight',\n  WIKI = 'wiki',\n}\n\nexport const fileNameList = Object.values(FileNameEnum)\n\nexport const formatList = Object.values(FormatEnum)\n","import { getPackage } from '@elog/shared'\nimport {\n  htmlAdapter,\n  htmlAdapterWithHighlight,\n  markdownAdapter,\n  matterMarkdownAdapter,\n  wikiAdapter,\n} from '@elog/plugin-adapter'\nimport { AdapterConfig, AdapterFunction } from '../types'\nimport { FormatEnum } from '../const'\n\n/**\n * 文档处理适配器\n */\nexport class AdapterClient {\n  config: AdapterConfig\n  ctx: AdapterFunction\n\n  constructor(config: AdapterConfig) {\n    this.config = config\n    this.ctx = this.initAdapter()\n  }\n\n  /**\n   * 初始化适配器\n   * @private\n   */\n  private initAdapter() {\n    if (this.config.formatExt) {\n      const { format } = getPackage(this.config.formatExt)\n      return format\n    } else {\n      switch (this.config.format) {\n        case FormatEnum.MARKDOWN: {\n          if (this.config.frontMatter?.enable) {\n            return matterMarkdownAdapter\n          }\n          return markdownAdapter\n        }\n        case FormatEnum.MATTER_MARKDOWN:\n          return matterMarkdownAdapter\n        case FormatEnum.WIKI:\n          return wikiAdapter\n        case FormatEnum.HTML:\n          return htmlAdapter\n        case FormatEnum.HTML_HIGHLIGHT:\n          return htmlAdapterWithHighlight\n        default:\n          return markdownAdapter\n      }\n    }\n  }\n\n  /**\n   * 获取文档处理器\n   */\n  public getAdapter() {\n    return this.ctx\n  }\n}\n","import { out } from '@elog/shared'\nimport ConfluenceClient, { ConfluenceConfig, WikiMap } from '@elog/sdk-confluence'\nimport { DocDetail } from '@elog/types'\nimport { AdapterClient } from '../adapter'\nimport { AdapterFunction } from '../types'\nimport { FormatEnum } from '../const'\n\nclass DeployConfluence {\n  config: ConfluenceConfig\n  ctx: ConfluenceClient\n  adapterClient: AdapterClient\n  /** 文档处理适配器 */\n  adapter: AdapterFunction\n\n  constructor(config: ConfluenceConfig) {\n    this.config = config\n    this.ctx = new ConfluenceClient(config)\n    this.adapterClient = new AdapterClient({ format: FormatEnum.WIKI, formatExt: config.formatExt })\n    this.adapter = this.adapterClient.getAdapter()\n  }\n\n  async deploy(articleList: DocDetail[]) {\n    out.info('正在部署到Confluence...')\n    // 重新排序articleList，按照层级更新文章\n    // 先更新第一级，再更新第二级...\n    const sortArticleList = articleList.sort((a, b) => {\n      if (!a.catalog || !b.catalog) {\n        return 0\n      }\n      return a.catalog.length - b.catalog.length\n    })\n    // 获取rootPage下的文章列表\n    const rootPageList = await this.ctx.getRootPageList()\n    let rootPageMap: WikiMap = {}\n    // List转Map\n    rootPageList.forEach((item) => {\n      rootPageMap[item.title] = item\n    })\n    // 根据目录上传到wiki上\n    for (const articleInfo of sortArticleList) {\n      // 将markdown转wiki\n      articleInfo.body_wiki = this.adapter(articleInfo) as string\n      // 是否存在\n      const cacheWikiPage = rootPageMap[articleInfo.properties.title]\n      if (cacheWikiPage) {\n        out.info('更新文档', cacheWikiPage.title)\n        // 获取版本信息\n        const updatingPage = await this.ctx.getPageById(cacheWikiPage.id)\n        const version = updatingPage.version.number + 1\n        await this.ctx.updatePage(articleInfo, cacheWikiPage.id, version)\n      } else {\n        out.info('新增文档', articleInfo.properties.title)\n        // 新增\n        // 在rootPageMap中找到parent title\n        let parentId = ''\n        const catalog = articleInfo.catalog\n        if (catalog?.length) {\n          const parentTitle = catalog[catalog.length - 1].title\n          parentId = rootPageMap[parentTitle]?.id\n        }\n        // 直接新增\n        // 如果有parentId就存在parentPage下，没有则存在空间的rootPage下\n        try {\n          const createdPage = await this.ctx.createPage(articleInfo, parentId)\n          // 临时更新Map\n          rootPageMap[createdPage.title] = createdPage\n        } catch (e: any) {\n          // 有可能是重名更新失败\n          if (e.message.indexOf('A page with this title already exists') > -1) {\n            out.err(\n              '跳过部署',\n              `文章标题已存在于confluence, 请检查: ${articleInfo.properties.title}`,\n            )\n          } else {\n            out.err('跳过部署', e.message)\n            out.debug(e)\n          }\n        }\n      }\n    }\n    return undefined\n  }\n}\n\nexport default DeployConfluence\n","import {\n  cleanParameter,\n  generateUniqueId,\n  getFileType,\n  getPicBufferFromURL,\n  out,\n} from '@elog/shared'\nimport WordPressClient, {\n  CreateWordPressPost,\n  UpdateWordPressPost,\n  WordPressConfig,\n  WordPressPost,\n} from '@elog/sdk-wordpress'\nimport { DocDetail } from '@elog/types'\nimport { AdapterClient } from '../adapter'\nimport { AdapterFunction, DocMap } from '../types'\nimport { FormatEnum } from '../const'\nimport { getNoRepValues, removeEmptyProperties } from '../utils/common'\n\nclass DeployWordPress {\n  config: WordPressConfig\n  ctx: WordPressClient\n  adapterClient: AdapterClient\n  /** 文档处理适配器 */\n  adapter: AdapterFunction\n\n  constructor(config: WordPressConfig) {\n    this.config = config\n    this.ctx = new WordPressClient(config)\n    this.adapterClient = new AdapterClient({\n      format: FormatEnum.HTML_HIGHLIGHT,\n      formatExt: config.formatExt,\n    })\n    this.adapter = this.adapterClient.getAdapter()\n  }\n\n  async deploy(articleList: DocDetail[]) {\n    try {\n      out.access('正在部署到 WordPress...')\n      let tagsKey = 'tags'\n      let categoriesKey = 'categories'\n      let urlnameKey = 'urlname'\n      let coverKey = 'cover'\n      let descriptionKey = 'description'\n      // 获取keyMap\n      if (this.config.keyMap && Object.keys(this.config.keyMap)) {\n        tagsKey = this.config.keyMap.tags || tagsKey\n        categoriesKey = this.config.keyMap.categories || categoriesKey\n        urlnameKey = this.config.keyMap.urlname || urlnameKey\n        coverKey = this.config.keyMap.cover || coverKey\n        descriptionKey = this.config.keyMap.description || descriptionKey\n      }\n      // 重新排序articleList，按照层级更新文章\n      // 先更新第一级，再更新第二级...\n      const sortArticleList = articleList.sort((a, b) => {\n        if (!a.catalog || !b.catalog) {\n          return 0\n        }\n        return a.catalog.length - b.catalog.length\n      })\n      // 获取文章列表\n      const postList = await this.ctx.getAllPosts()\n      let postMap: DocMap<WordPressPost> = {}\n      // List转Map\n      postList.forEach((item) => {\n        postMap[item.title.rendered] = item\n      })\n      // 获取wp标签\n      const wpTags = await this.ctx.getAllTags()\n      // 获取wp分类\n      const wpCategories = await this.ctx.getAllCategories()\n      // 获取wp媒体\n      const wpMedias = await this.ctx.getAllMedia()\n      const noRepValues = getNoRepValues(sortArticleList, tagsKey, categoriesKey)\n      for (const tag of noRepValues.tags) {\n        const wpTag = wpTags.find((t) => t.name === tag)\n        if (!wpTag) {\n          try {\n            const newTag = await this.ctx.createTag({ name: tag })\n            wpTags.push(newTag)\n          } catch (e: any) {\n            out.warning(`创建 ${tag} 标签失败: ${e.message}`)\n            out.debug(e)\n          }\n        }\n      }\n      for (const category of noRepValues.categories) {\n        const wpCategory = wpCategories.find((t) => t.name === category)\n        if (!wpCategory) {\n          // 如果没有找到，就在wp创建一个\n          try {\n            const newCategory = await this.ctx.createCategory({ name: category })\n            wpCategories.push(newCategory)\n          } catch (e: any) {\n            out.warning(`创建 ${category} 分类失败: ${e.message}`)\n            out.debug(e)\n          }\n        }\n      }\n\n      let publishedPostMap: DocMap<WordPressPost> = {}\n      // 根据目录上传到wp上\n      for (const articleInfo of sortArticleList) {\n        // 重复文档跳过同步\n        if (publishedPostMap[articleInfo.properties.title]) {\n          out.warning('跳过更新', `存在重复文档：${articleInfo.properties.title}`)\n          continue\n        }\n        // 自定义处理md文档\n        articleInfo.body_html = this.adapter(articleInfo) as string\n        const post: UpdateWordPressPost | CreateWordPressPost = {\n          title: articleInfo.properties.title,\n          content: articleInfo.body_html,\n          status: 'publish',\n          slug: articleInfo.properties[urlnameKey] || articleInfo.properties.title,\n          excerpt: articleInfo.properties[descriptionKey],\n        }\n        const postTags = articleInfo.properties[tagsKey] as string | string[]\n        if (postTags?.length) {\n          const tags = Array.isArray(postTags) ? postTags : postTags.split(',')\n          // 从wpTags中找到对应的tagId\n          post.tags = tags.map((tag) => {\n            const wpTag = wpTags.find((t) => t.name === tag)!\n            return wpTag?.id\n          })\n        }\n        const postCategories = articleInfo.properties[categoriesKey] as string | string[]\n        if (postCategories?.length) {\n          const categories = Array.isArray(postCategories)\n            ? postCategories\n            : postCategories.split(',')\n          // 从wpCategories中用reduce找到对应的categoryIds\n          post.categories = categories.reduce((acc: number[], cur) => {\n            const wpCategory = wpCategories.find((t) => t.name === cur)\n            if (wpCategory) {\n              acc.push(wpCategory.id)\n            }\n            return acc\n          }, [])\n        }\n        if (articleInfo.properties[coverKey]) {\n          const picUrl = articleInfo.properties[coverKey]\n          const url = cleanParameter(picUrl)\n          const uuid = generateUniqueId(url)\n          const fileType = await getFileType(picUrl)\n          if (fileType) {\n            const filename = `${uuid}.${fileType.type}`\n            // out.info('处理图片', `生成文件名: ${filename}`)\n            // 检查是否已经存在图片\n            const cacheMedia = wpMedias.find((item) => item.title?.rendered === filename)\n            if (cacheMedia) {\n              out.info('忽略上传', `图片已存在: ${cacheMedia.guid.rendered}`)\n              post.featured_media = cacheMedia.id\n            } else {\n              const pic = await getPicBufferFromURL(picUrl)\n              if (!pic) {\n                continue\n              }\n              // 上传特色图片\n              const media = await this.ctx.uploadMedia(pic, filename)\n              out.info('上传成功', media.guid.rendered)\n              wpMedias.push(media)\n              post.featured_media = media.id\n            }\n          }\n        }\n        const cachePage = postMap[articleInfo.properties.title]\n        if (cachePage) {\n          await this.ctx.updatePost(cachePage.id, removeEmptyProperties(post))\n          out.info('更新成功', articleInfo.properties.title)\n        } else {\n          const newPost = await this.ctx.createPost(\n            removeEmptyProperties(post) as CreateWordPressPost,\n          )\n          postMap[newPost.title.rendered] = newPost\n          out.info('新增成功', articleInfo.properties.title)\n        }\n        publishedPostMap[articleInfo.properties.title] = cachePage\n      }\n      return undefined\n    } catch (error: any) {\n      out.err('部署到 WordPress 失败: ', error.message)\n      out.debug(error)\n      process.exit(-1)\n    }\n  }\n}\n\nexport default DeployWordPress\n","import { DocDetail } from '@elog/types'\n\ninterface NoRepValues {\n  tags: string[]\n  categories: string[]\n}\n\nexport function getNoRepValues(\n  posts: DocDetail[],\n  tagKey: string,\n  categoryKey: string,\n): NoRepValues {\n  const values = posts.reduce(\n    (acc: NoRepValues, cur) => {\n      const tag = cur.properties[tagKey] as string | string[]\n      const category = cur.properties[categoryKey] as string | string[]\n      if (typeof tag === 'string') {\n        acc.tags.push(tag)\n      } else if (Array.isArray(tag)) {\n        acc.tags = acc.tags.concat(tag)\n      }\n      if (typeof category === 'string') {\n        acc.categories.push(category)\n      } else if (Array.isArray(category)) {\n        acc.categories = acc.categories.concat(category)\n      }\n      return acc\n    },\n    { tags: [], categories: [] },\n  )\n  // 去重\n  return {\n    tags: Array.from(new Set(values.tags)),\n    categories: Array.from(new Set(values.categories)),\n  }\n}\n\ninterface AnyObject {\n  [key: string]: any\n}\n\n/**\n * 删除对象中的空属性\n * @param obj\n */\nexport const removeEmptyProperties = (obj: AnyObject): AnyObject => {\n  const filteredObj: AnyObject = {}\n\n  Object.entries(obj).forEach(([key, value]) => {\n    if (value !== null && value !== undefined && value !== '' && value.length !== 0) {\n      filteredObj[key] = value\n    }\n  })\n\n  return filteredObj\n}\n","import HaloClient, { HaloConfig, PostRequest, PostSpecVisibleEnum } from '@elog/sdk-halo'\nimport { DocDetail } from '@elog/types'\nimport { AdapterClient } from '../adapter'\nimport { AdapterFunction, IHaloConfig } from '../types'\nimport { FormatEnum } from '../const'\nimport { getNoRepValues } from '../utils/common'\nimport { slugify } from 'transliteration'\nimport {\n  delay,\n  generateUniqueId,\n  getFileType,\n  getPicBufferFromURL,\n  getUrl,\n  getUrlListFromContent,\n  out,\n} from '@elog/shared'\n\nclass DeployHalo {\n  config: IHaloConfig\n  ctx: HaloClient\n  adapterClient: AdapterClient\n  /** 文档处理适配器 */\n  adapter: AdapterFunction\n\n  constructor(config: HaloConfig) {\n    this.config = config\n    this.ctx = new HaloClient(config)\n    this.adapterClient = new AdapterClient({\n      format: FormatEnum.HTML,\n      formatExt: this.config.formatExt,\n    })\n    this.adapter = this.adapterClient.getAdapter()\n  }\n\n  getIds(items: any, map: any) {\n    if (!items) return []\n    let list = items\n    if (typeof items === 'string') {\n      list = [items]\n    }\n    return list.map((item: any) => {\n      return map[item].metadata.name\n    })\n  }\n\n  async deploy(articleList: DocDetail[], imageClient?: any) {\n    out.access('正在部署到 Halo...')\n    // 获取文章列表\n    const postList = await this.ctx.getPostList()\n\n    let postMap: any = {}\n    // List转Map\n    postList.items.forEach((item) => {\n      postMap[item.post.metadata.name] = item\n    })\n\n    let categoryMap: any = {}\n    // 获取分类\n    const categories = await this.ctx.getCategories()\n    // List转Map\n    categories.items.forEach((item) => {\n      categoryMap[item.spec.displayName] = item\n    })\n\n    let tagMap: any = {}\n    // 获取标签\n    const tags = await this.ctx.getTags()\n    // List转Map\n    tags.items.forEach((item) => {\n      tagMap[item.spec.displayName] = item\n    })\n\n    let imageMap: any = {}\n\n    // 获取图片\n    const images = await this.ctx.getAttachments()\n\n    images.items.forEach((item) => {\n      if (item.spec.displayName) {\n        imageMap[item.spec.displayName] = item\n      }\n    })\n\n    const noRepValues = getNoRepValues(articleList, 'tags', 'categories')\n    // 收集文档分类\n\n    for (const [index, category] of noRepValues.categories.entries()) {\n      const element = categoryMap[category]\n      if (!element) {\n        try {\n          // 新增 Tag\n          const params = {\n            spec: {\n              displayName: category,\n              slug: slugify(category, { trim: true }),\n              description: '',\n              cover: '',\n              template: '',\n              priority: categories.items.length + index,\n              children: [],\n            },\n            apiVersion: 'content.halo.run/v1alpha1',\n            kind: 'Category',\n            metadata: {\n              name: '',\n              generateName: 'category-',\n            },\n          }\n          const newCategory = await this.ctx.createCategory(params)\n          categoryMap[newCategory.spec.displayName] = newCategory\n          out.info('新增分类', category)\n        } catch (e: any) {\n          out.err(`创建 ${category} 分类失败: ${e.message}`)\n          out.debug(e)\n        }\n      }\n    }\n\n    // 收集文档标签\n    for (const tag of noRepValues.tags) {\n      const element = tagMap[tag]\n      if (!element) {\n        try {\n          // 新增 Tag\n          const params = {\n            spec: {\n              displayName: tag,\n              slug: slugify(tag, { trim: true }),\n              color: '#ffffff',\n              cover: '',\n            },\n            apiVersion: 'content.halo.run/v1alpha1',\n            kind: 'Tag',\n            metadata: {\n              name: '',\n              generateName: 'tag-',\n            },\n          }\n          const newTag = await this.ctx.createTag(params)\n          tagMap[newTag.spec.displayName] = newTag\n          out.info('新增标签', tag)\n        } catch (e: any) {\n          out.err(`创建 ${tag} 标签失败: ${e.message}`)\n          out.debug(e)\n        }\n      }\n    }\n    for (let doc of articleList) {\n      if (this.config.needUploadImage) {\n        // 收集文档图片\n        const urlList = getUrlListFromContent(doc.body)\n        // 封面图\n        const cover = doc.properties.cover\n        if (cover) {\n          urlList.push(getUrl(cover))\n        }\n        for (const image of urlList) {\n          // 生成文件名\n          const fileName = generateUniqueId(image.url, 28)\n          // 生成文件名后缀\n          const fileType = await getFileType(image.url)\n          if (!fileType) {\n            out.warning(`${doc?.properties?.title} 存在获取图片类型失败，跳过：${image.url}`)\n            continue\n          }\n          // 完整文件名\n          const fullName = `${fileName}.${fileType.type}`\n          // 检查Halo是否存在该文件\n          const item = imageMap[fullName]\n          if (!item) {\n            // 上传\n            // 获取 buffer\n            const buffer = await getPicBufferFromURL(image.original)\n            if (!buffer) {\n              out.warning('跳过', `${doc?.properties?.title} 存在获取图片内容失败：${image.url}`)\n              continue\n            }\n            try {\n              const attachment = await this.ctx.uploadAttachment(buffer, fullName)\n              const imageUrl = await this.ctx.getAttachmentPermalink(attachment.metadata.name)\n              out.info('上传成功', imageUrl)\n              // 记录最新的\n              imageMap[fullName] = {\n                ...attachment,\n                status: {\n                  ...attachment.status,\n                  permalink: imageUrl,\n                },\n              }\n              // 替换文档中的图片路径\n              doc.body = doc.body.replace(image.original, imageUrl)\n              // 替换属性中的图片\n              if (image.original === cover) {\n                doc.properties.cover = imageUrl\n              }\n            } catch (e: any) {\n              out.warning('跳过', `${doc?.properties?.title} 存在上传图片失败：${image.url}`)\n              out.debug(e)\n            }\n          } else {\n            out.info('忽略上传', `图片已存在: ${item.status.permalink}`)\n            // 替换文档中的图片路径\n            doc.body = doc.body.replace(image.original, item.status.permalink)\n            // 替换属性中的图片\n            if (image.original === cover) {\n              doc.properties.cover = item.status.permalink\n            }\n          }\n        }\n      }\n      // markdown转 Html\n      let formatRes = await this.adapter(doc, imageClient)\n\n      if (typeof formatRes === 'string') {\n        doc.body_html = formatRes\n      } else {\n        // DocDetail 类型\n        doc.body_html = formatRes.body_html\n        doc = formatRes\n      }\n\n      // 上传文档\n      let params: PostRequest = {\n        post: {\n          spec: {\n            title: '',\n            slug: '',\n            template: '',\n            cover: '',\n            deleted: false,\n            publish: false,\n            pinned: false,\n            allowComment: true,\n            visible: PostSpecVisibleEnum.Public,\n            priority: 0,\n            excerpt: {\n              autoGenerate: true,\n              raw: '',\n            },\n            categories: [],\n            tags: [],\n            htmlMetas: [],\n          },\n          apiVersion: 'content.halo.run/v1alpha1',\n          kind: 'Post',\n          metadata: {\n            name: doc.doc_id,\n          },\n        },\n        content: {\n          raw: '',\n          content: '',\n          rawType: 'html',\n        },\n      }\n      // 判断文档是否存在 halo\n      const item = postMap[doc.doc_id]\n      if (item) {\n        params = item\n        params.content = {\n          raw: '',\n          content: '',\n          rawType: 'html',\n        }\n      }\n      // 覆盖文档标题\n      params.post.spec.title = doc.properties.title\n      // 覆盖文档slug\n      params.post.spec.slug = doc.properties.urlname\n      // 覆盖文档封面图\n      params.post.spec.cover = doc.properties.cover\n      // 覆盖文档摘要\n      params.post.spec.excerpt.raw = doc.properties.excerpt\n      // 是否自动生成文档摘要\n      const autoExcerpt = doc.properties.autoExcerpt\n      params.post.spec.excerpt.autoGenerate =\n        (typeof autoExcerpt === 'string' && autoExcerpt === 'true') ||\n        (typeof autoExcerpt === 'boolean' && autoExcerpt)\n      // 覆盖文档是否置顶\n      const pinned = doc.properties.pinned\n      params.post.spec.pinned =\n        (typeof pinned === 'string' && pinned === 'true') || (typeof pinned === 'boolean' && pinned)\n      // 覆盖文档是否公开\n      if (doc.properties.public === undefined) {\n        params.post.spec.visible = PostSpecVisibleEnum.Public\n      } else {\n        params.post.spec.visible = doc.properties.public\n          ? PostSpecVisibleEnum.Public\n          : PostSpecVisibleEnum.Private\n      }\n      // 覆盖文档分类和标签\n      const categoryIds = this.getIds(doc.properties.categories, categoryMap)\n      const tagIds = this.getIds(doc.properties.tags, tagMap)\n      if (doc.properties.tags) {\n        params.post.spec.tags = tagIds\n      }\n      if (doc.properties.categories) {\n        params.post.spec.categories = categoryIds\n      }\n      // 覆盖文档内容\n      params.content.content = doc.body_html\n      if (this.config.rowType === 'markdown') {\n        params.content.raw = doc.body\n        params.content.rawType = 'markdown'\n      } else {\n        params.content.rawType = 'html'\n        params.content.raw = doc.body_html\n      }\n      // 判断文档是否存在 halo\n      if (!item) {\n        // 不存在，走新增流程\n        try {\n          await this.ctx.createPost(params)\n          out.info('新增文档', doc.properties.title)\n        } catch (e: any) {\n          out.err(`新增 ${doc.properties.title} 文档失败: ${e.message}`)\n          out.debug(e)\n        }\n        // 发布\n      } else {\n        try {\n          // 走更新流程\n          // 更新基本信息\n          await this.ctx.updatePostInfo(doc.doc_id, params.post)\n          // 手动阻塞 500ms\n          await delay()\n          // 更新内容信息\n          await this.ctx.updatePostContent(doc.doc_id, params.content)\n          out.info('更新文档', doc.properties.title)\n        } catch (e: any) {\n          out.err(`更新 ${doc.properties.title} 文档失败: ${e.message}`)\n          out.debug(e)\n        }\n      }\n      // 发布文档\n      const publish = doc.properties.publish\n      if (\n        publish === undefined ||\n        (typeof publish === 'string' && publish === 'true') ||\n        (typeof publish === 'boolean' && publish)\n      ) {\n        await this.ctx.publishPost(doc.doc_id)\n        out.info('发布文档', doc.properties.title)\n      } else {\n        await this.ctx.unpublishPost(doc.doc_id)\n        out.info('下架文档', doc.properties.title)\n      }\n    }\n  }\n}\n\nexport default DeployHalo\n","import DeployLocal from './platform/local'\nimport DeployConfluence from './platform/confluence'\nimport DeployWordPress from './platform/wordpress'\nimport { DeployPlatformEnum } from './const'\nimport { DeployConfig, LocalConfig } from './types'\nimport { ConfluenceConfig } from '@elog/sdk-confluence'\nimport { DocDetail } from '@elog/types'\nimport { WordPressConfig } from '@elog/sdk-wordpress'\nimport { HaloConfig } from '@elog/sdk-halo'\nimport DeployHalo from './platform/halo'\n\n/**\n * 部署器\n */\nclass Deploy {\n  config: DeployConfig\n  deployClient: DeployLocal | DeployConfluence | DeployWordPress | DeployHalo\n\n  constructor(config: DeployConfig) {\n    this.config = config\n    // 初始化部署方式\n    this.deployClient = this.initDeploy()\n  }\n\n  initDeploy() {\n    if (this.config.platform === DeployPlatformEnum.CONFLUENCE) {\n      const config = this.config.confluence as ConfluenceConfig\n      return new DeployConfluence(config)\n    } else if (this.config.platform === DeployPlatformEnum.WORDPRESS) {\n      const config = this.config.wordpress as WordPressConfig\n      return new DeployWordPress(config)\n    } else if (this.config.platform === DeployPlatformEnum.HALO) {\n      const config = this.config.halo as HaloConfig\n      return new DeployHalo(config)\n    } else {\n      const config = this.config.local as LocalConfig\n      return new DeployLocal(config)\n    }\n  }\n\n  /**\n   * 部署配置\n   * @param articleList\n   * @param imageClient\n   */\n  async deploy(articleList: DocDetail[], imageClient?: any) {\n    return this.deployClient.deploy(articleList, imageClient)\n  }\n}\n\nexport default Deploy\n","import Deploy from './client'\nexport * from './types'\nexport * from './const'\nexport * from '@elog/plugin-adapter'\nexport * from '@elog/sdk-confluence'\nexport default Deploy\n"]}