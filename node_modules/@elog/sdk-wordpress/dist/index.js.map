{"version":3,"sources":["../src/client.ts","../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  WordPressConfig,\n  WordPressPost,\n  CreateWordPressPost,\n  UpdateWordPressPost,\n  WordPressCategory,\n  WordPressTag,\n  WordPressMedia,\n  WordPressMediaParams,\n} from './types'\nimport { out } from '@elog/shared'\nimport WPAPI from 'wpapi'\nclass WordPressClient {\n  config: WordPressConfig\n  wpClient: WPAPI\n  constructor(config: WordPressConfig) {\n    this.config = config\n    if (!config.endpoint) {\n      out.err('缺少参数', '缺少WordPress endpoint')\n      process.exit(-1)\n    }\n    this.config.username = config.username || process.env.WORDPRESS_USERNAME!\n    this.config.password = config.password || process.env.WORDPRESS_PASSWORD!\n    if (!this.config.username || !this.config.password) {\n      out.err('缺少参数', '缺少WordPress账号或密码')\n      process.exit(-1)\n    }\n    this.wpClient = new WPAPI({\n      endpoint: config.endpoint,\n      username: config.username,\n      password: config.password,\n    })\n  }\n\n  /**\n   * 获取文章列表\n   */\n  async getPostList(pageSize = 100, page = 1): Promise<WordPressPost[]> {\n    return this.wpClient.posts().perPage(pageSize).page(page)\n  }\n\n  /**\n   * 获取所有文章\n   * @param page\n   * @param allPosts\n   */\n  async getAllPosts(page = 1, allPosts: WordPressPost[] = []): Promise<WordPressPost[]> {\n    return this.wpClient\n      .posts()\n      .perPage(100)\n      .page(page)\n      .then((posts) => {\n        // 将当前页面的文章合并到所有文章数组中\n        allPosts = allPosts.concat(posts)\n\n        if (posts.length === 100) {\n          // 继续获取下一页\n          return this.getAllPosts(page + 1, allPosts)\n        } else {\n          // 已获取到最后一页或没有文章\n          return allPosts\n        }\n      })\n      .catch((err) => {\n        if (err.code === 'rest_post_invalid_page_number') {\n          // 请求页码超过总页数，直接返回所有文章\n          return allPosts\n        } else {\n          out.err('获取文章列表失败', err.message)\n          out.debug(err)\n        }\n      })\n  }\n\n  /**\n   * 创建文章\n   */\n  async createPost(post: CreateWordPressPost): Promise<WordPressPost> {\n    return this.wpClient.posts().create(post)\n  }\n\n  /**\n   * 更新文章\n   */\n  async updatePost(id: number, post: UpdateWordPressPost): Promise<WordPressPost> {\n    return this.wpClient.posts().id(id).update(post)\n  }\n\n  /**\n   * 删除文章\n   */\n  async deletePost(id: number): Promise<WordPressPost> {\n    return this.wpClient.posts().id(id).delete()\n  }\n\n  /**\n   * 获取标签\n   */\n  async getTags(): Promise<WordPressTag[]> {\n    return this.wpClient.tags()\n  }\n\n  /**\n   * 获取全部标签\n   */\n  async getAllTags(page = 1, allTags: WordPressTag[] = []): Promise<WordPressTag[]> {\n    return this.wpClient\n      .tags()\n      .perPage(100)\n      .page(page)\n      .then((tags) => {\n        if (tags.length === 0) return allTags\n        // 将当前页面的标签合并到所有标签数组中\n        allTags = allTags.concat(tags)\n\n        if (tags.length === 100) {\n          // 继续获取下一页\n          return this.getAllTags(page + 1, allTags)\n        } else {\n          // 已获取到最后一页或没有标签\n          return allTags\n        }\n      })\n      .catch((err) => {\n        out.err('获取标签列表失败', err.message)\n        out.debug(err)\n      })\n  }\n\n  /**\n   * 新增标签\n   */\n  async createTag(tag: { name: string }): Promise<WordPressTag> {\n    return this.wpClient.tags().create(tag)\n  }\n\n  /**\n   * 获取分类\n   */\n  async getCategories(): Promise<WordPressCategory[]> {\n    return this.wpClient.categories()\n  }\n\n  /**\n   * 获取全部分类\n   */\n  async getAllCategories(\n    page = 1,\n    allCategories: WordPressCategory[] = [],\n  ): Promise<WordPressCategory[]> {\n    return this.wpClient\n      .categories()\n      .perPage(100)\n      .page(page)\n      .then((categories) => {\n        if (categories.length === 0) return allCategories\n        // 将当前页面的分类合并到所有分类数组中\n        allCategories = allCategories.concat(categories)\n\n        if (categories.length === 100) {\n          // 继续获取下一页\n          return this.getAllCategories(page + 1, allCategories)\n        } else {\n          // 已获取到最后一页或没有分类\n          return allCategories\n        }\n      })\n      .catch((err) => {\n        out.err('获取分类列表失败', err.message)\n        out.debug(err)\n      })\n  }\n\n  /**\n   * 新增分类\n   * WordPress的分类存在父子关系，但是先不支持\n   * @param category\n   */\n  async createCategory(category: { name: string }): Promise<WordPressCategory> {\n    return this.wpClient.categories().create(category)\n  }\n\n  /**\n   * 获取媒体库\n   */\n  async getMedia(): Promise<WordPressMedia[]> {\n    return this.wpClient.media()\n  }\n\n  /**\n   * 获取全部媒体库\n   */\n  async getAllMedia(page = 1, allMedia: WordPressMedia[] = []): Promise<WordPressMedia[]> {\n    return this.wpClient\n      .media()\n      .perPage(100)\n      .page(page)\n      .then((medias) => {\n        // 将当前页面的文章合并到所有媒体数组中\n        allMedia = allMedia.concat(medias)\n\n        if (medias.length === 100) {\n          // 继续获取下一页\n          return this.getAllMedia(page + 1, allMedia)\n        } else {\n          // 已获取到最后一页或没有媒体\n          return allMedia\n        }\n      })\n      .catch((err) => {\n        if (err.code === 'rest_post_invalid_page_number') {\n          // 请求页码超过总页数，直接返回所有媒体\n          return allMedia\n        } else {\n          out.err('获取图片列表失败', err.message)\n          out.debug(err)\n        }\n      })\n  }\n\n  /**\n   * 上传媒体\n   */\n  async uploadMedia(file: Buffer, filename: string): Promise<WordPressMedia> {\n    const imageInfo: WordPressMediaParams = {\n      title: filename,\n      description: 'upload by @elog/sdk-wordpress',\n    }\n    return this.wpClient\n      .media()\n      .file(file as any, filename)\n      .create(imageInfo)\n  }\n}\n\nexport default WordPressClient\n","import WordPressClient from './client'\n\nexport * from './types'\n\nexport default WordPressClient\n"]}