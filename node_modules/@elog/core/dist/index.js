"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } } function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } function _createStarExport(obj) { Object.keys(obj) .filter((key) => key !== "default" && key !== "__esModule") .forEach((key) => { if (exports.hasOwnProperty(key)) { return; } Object.defineProperty(exports, key, {enumerable: true, configurable: true, get: () => obj[key]}); }); }var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/client.ts



var _sdkyuque = require('@elog/sdk-yuque'); _createStarExport(_sdkyuque);
var _sdknotion = require('@elog/sdk-notion'); var _sdknotion2 = _interopRequireDefault(_sdknotion); _createStarExport(_sdknotion);
var _sdkflowus = require('@elog/sdk-flowus'); var _sdkflowus2 = _interopRequireDefault(_sdkflowus); _createStarExport(_sdkflowus);
var _sdkfeishu = require('@elog/sdk-feishu'); var _sdkfeishu2 = _interopRequireDefault(_sdkfeishu);
var _deploy = require('@elog/deploy'); var _deploy2 = _interopRequireDefault(_deploy); _createStarExport(_deploy);
var _pluginimage = require('@elog/plugin-image'); var _pluginimage2 = _interopRequireDefault(_pluginimage); _createStarExport(_pluginimage);
var _shared = require('@elog/shared'); _createStarExport(_shared);
var _fs = require('fs'); var fs = _interopRequireWildcard(_fs);
var _path = require('path'); var path = _interopRequireWildcard(_path);
var Elog = class {
  constructor(config) {
    /** 缓存文章 */
    this.cachedArticles = [];
    /** 是否需要更新，当所有文章都不需要更新，这个标记就会阻止后续流程 */
    this.needUpdate = false;
    /** 待更新的文章列表 */
    this.needUpdateArticles = [];
    /** 废弃文档 */
    this.wasteArticles = [];
    this.config = config;
    this.initIncrementalUpdate(config);
    this.downloaderClient = this.initWritingPlatform(config);
    this.deployClient = this.initDeployPlatform(config);
    this.initImgCdn(config);
  }
  /**
   * 初始化增量配置
   * @param config
   */
  initIncrementalUpdate(config) {
    var _a;
    if (config.extension.disableCache) {
      _shared.out.access("\u5168\u91CF\u66F4\u65B0", "\u5DF2\u7981\u7528\u7F13\u5B58\uFF0C\u5C06\u5168\u91CF\u66F4\u65B0\u6587\u6863");
      return;
    }
    try {
      const cacheJson = __require(path.join(process.cwd(), config.extension.cachePath));
      const { docs } = cacheJson;
      this.cachedArticles = docs || [];
    } catch (error) {
      _shared.out.access("\u5168\u91CF\u66F4\u65B0", "\u672A\u83B7\u53D6\u5230\u7F13\u5B58\uFF0C\u5C06\u5168\u91CF\u66F4\u65B0\u6587\u6863");
    }
    if ((_a = this.config.extension) == null ? void 0 : _a.isForced) {
      _shared.out.warning("\u6CE8\u610F", "\u5DF2\u5F00\u542F\u5F3A\u5236\u540C\u6B65\uFF0C\u5C06\u6309\u7167\u5F53\u524D\u914D\u7F6E\u627E\u51FA\u9700\u8981\u5220\u9664\u7684\u6587\u6863\u5E76\u5220\u9664");
    }
  }
  /**
   * 初始化写作平台
   * @param config
   */
  initWritingPlatform(config) {
    if (config.write.platform === "yuque" /* YUQUE */) {
      let yuqueConfig = config.write.yuque;
      return new (0, _sdkyuque.YuqueWithToken)(yuqueConfig);
    } else if (config.write.platform === "yuque-pwd" /* YUQUE_WITH_PWD */) {
      let yuqueConfig = config.write["yuque-pwd"];
      return new (0, _sdkyuque.YuqueWithPwd)(yuqueConfig);
    } else if (config.write.platform === "notion" /* NOTION */) {
      let notionConfig = config.write.notion;
      return new (0, _sdknotion2.default)(notionConfig);
    } else if (config.write.platform === "flowus" /* FLOWUS */) {
      let flowusConfig = config.write.flowus;
      return new (0, _sdkflowus2.default)(flowusConfig);
    } else if (config.write.platform === "feishu" /* FEISHU */) {
      let feiShuConfig = config.write.feishu;
      return new (0, _sdkfeishu2.default)(feiShuConfig);
    } else {
      _shared.out.err("\u9519\u8BEF", "\u672A\u77E5\u7684\u5199\u4F5C\u5E73\u53F0");
      process.exit(0);
    }
  }
  /**
   * 初始化部署平台
   * @param config
   */
  initDeployPlatform(config) {
    const deployOptions = config.deploy;
    return new (0, _deploy2.default)(deployOptions);
  }
  /**
   * 初始化图片转CDN配置
   * @param config
   */
  initImgCdn(config) {
    var _a, _b;
    if (((_a = config.image) == null ? void 0 : _a.enable) || ((_b = config.image) == null ? void 0 : _b.enableForExt)) {
      this.imageClient = new (0, _pluginimage2.default)(config.image);
    }
  }
  /**
   * 下载文章详情列表
   */
  fetchArticles() {
    return __async(this, null, function* () {
      var _a;
      if (this.config.write.platform === "yuque-pwd" /* YUQUE_WITH_PWD */) {
        const client = this.downloaderClient;
        yield client.login();
      }
      let articleList = yield this.downloaderClient.getDocList();
      if (!(articleList == null ? void 0 : articleList.length)) {
        this.needUpdate = false;
        return;
      }
      this.cachedArticles = this.cachedArticles.filter((cache) => {
        var _a2;
        const isExist = articleList.findIndex((item) => item.doc_id === cache.doc_id) !== -1;
        if (!isExist && ((_a2 = this.config.extension) == null ? void 0 : _a2.isForced)) {
          this.wasteArticles.push(cache);
          _shared.out.warning(`${cache.properties.title} \u6587\u6863\u5DF2\u88AB\u5220\u9664\uFF0C\u5C06\u5728\u540C\u6B65\u7ED3\u675F\u540E\u5904\u7406`);
        }
        return isExist;
      });
      let ids = [];
      let idMap = {};
      for (const article of articleList) {
        const cacheIndex = this.cachedArticles.findIndex(
          (cacheItem) => cacheItem.doc_id === article.doc_id
        );
        if (cacheIndex < 0) {
          ids.push(article.doc_id);
          idMap[article.doc_id] = {
            status: "create" /* create */
          };
        } else {
          const cacheArticle = this.cachedArticles[cacheIndex];
          const cacheAvailable = article.updated === cacheArticle.updated;
          if (cacheArticle.needUpdate === _shared.ImageFail) {
            _shared.out.access(
              `\u4E0A\u6B21\u540C\u6B65\u65F6 \u3010${cacheArticle.properties.title}\u3011 \u5B58\u5728\u56FE\u7247\u4E0B\u8F7D\u5931\u8D25\uFF0C\u672C\u6B21\u5C06\u5C1D\u8BD5\u91CD\u65B0\u540C\u6B65`
            );
          }
          if (!cacheAvailable || cacheArticle.needUpdate === _shared.ImageFail) {
            ids.push(article.doc_id);
            idMap[article.doc_id] = {
              index: cacheIndex,
              status: "update" /* update */
            };
          }
        }
      }
      if (!ids.length) {
        this.needUpdate = false;
        return;
      }
      this.needUpdate = true;
      let docDetailList = yield this.downloaderClient.getDocDetailList(ids);
      if (this.config.deploy.platform === _deploy.DeployPlatformEnum.LOCAL) {
        docDetailList = this.processDocPath(docDetailList);
      }
      if ((_a = this.config.image) == null ? void 0 : _a.enable) {
        _shared.out.access("\u5F00\u59CB\u5904\u7406\u56FE\u7247...");
        docDetailList = yield this.processImage(docDetailList);
      }
      this.needUpdateArticles = docDetailList;
      for (const docDetail of docDetailList) {
        const { index, status } = idMap[docDetail.doc_id];
        if (status === "create" /* create */) {
          this.cachedArticles.push(docDetail);
        } else {
          this.cachedArticles[index] = docDetail;
        }
      }
    });
  }
  /**
   * 写入缓存 json 文件
   */
  writeArticleCache() {
    var _a;
    try {
      let catalog = [];
      if (this.config.write.platform === "yuque" /* YUQUE */ || this.config.write.platform === "yuque-pwd" /* YUQUE_WITH_PWD */) {
        const yuqueClient = this.downloaderClient;
        catalog = yuqueClient.ctx.catalog;
      } else if (this.config.write.platform === "notion" /* NOTION */) {
        const notionClient = this.downloaderClient;
        catalog = notionClient.ctx.catalog;
      } else if (this.config.write.platform === "flowus" /* FLOWUS */) {
        const flowusClient = this.downloaderClient;
        catalog = flowusClient.ctx.catalog;
      } else if (this.config.write.platform === "feishu" /* FEISHU */) {
        const feiShuClient = this.downloaderClient;
        catalog = feiShuClient.ctx.catalog;
      }
      let cacheDocs = this.cachedArticles.map((item) => {
        return {
          id: item.id,
          doc_id: item.doc_id,
          updated: item.updated,
          properties: item.properties,
          catalog: item.catalog,
          realName: item.realName,
          relativePath: item.relativePath,
          needUpdate: item.needUpdate,
          docPath: item.docPath
        };
      });
      if ((_a = this.config.extension) == null ? void 0 : _a.isFullCache) {
        cacheDocs = this.cachedArticles;
      }
      const cacheJson = {
        docs: cacheDocs,
        catalog
      };
      fs.writeFileSync(this.config.extension.cachePath, JSON.stringify(cacheJson, null, 2), {
        encoding: "utf8"
      });
    } catch (e) {
      _shared.out.warning("\u7F13\u5B58\u5931\u8D25", `\u5199\u5165\u7F13\u5B58\u4FE1\u606F\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\uFF0C${e.message}`);
      _shared.out.debug(e);
    }
  }
  /**
   * 处理文章图片
   */
  processImage(docDetailList) {
    return __async(this, null, function* () {
      if (this.config.write.platform === "feishu" /* FEISHU */) {
        return this.imageClient.replaceImagesFromFeiShu(
          docDetailList,
          this.downloaderClient.ctx.feishu
        );
      }
      return this.imageClient.replaceImages(docDetailList);
    });
  }
  /**
   * 部署文章
   */
  deployArticles() {
    return __async(this, null, function* () {
      return this.deployClient.deploy(this.needUpdateArticles, this.imageClient);
    });
  }
  /**
   * 强制同步
   * 仅适用于想让线上和本地文档保持强一致
   * 例如：线上文档改名/删除后，本地旧文档也想要同步删除
   */
  syncForced() {
    var _a, _b;
    if (((_a = this.wasteArticles) == null ? void 0 : _a.length) && ((_b = this.cachedArticles) == null ? void 0 : _b.length) && this.config.deploy.platform === _deploy.DeployPlatformEnum.LOCAL) {
      _shared.out.warning("\u6587\u6863\u5F3A\u5236\u540C\u6B65\u4E2D...");
      const outputDir = path.join(process.cwd(), this.config.deploy.local.outputDir);
      for (const wasteArticle of this.wasteArticles) {
        let deleteItem = wasteArticle;
        if (!deleteItem.relativePath || !deleteItem.realName) {
          continue;
        }
        const docRealPath = path.join(outputDir, deleteItem.relativePath);
        if (fs.existsSync(docRealPath)) {
          fs.unlinkSync(docRealPath);
          _shared.out.info("\u5220\u9664\u6587\u6863", `${wasteArticle.realName}.md`);
        }
      }
      return true;
    }
    return false;
  }
  /**
   * 处理本地部署
   * @param articleList
   */
  processDocPath(articleList) {
    for (const post of articleList) {
      let postPath = this.config.deploy.local.outputDir;
      if (this.config.deploy.local.catalog) {
        if (Array.isArray(post.catalog)) {
          const tocPath = post.catalog.map((item) => item.title).join("/");
          postPath = path.join(postPath, tocPath);
        }
      }
      post.docPath = postPath;
    }
    return articleList;
  }
  // 下载文档 => 增量更新文章到缓存 json 文件
  deploy() {
    return __async(this, null, function* () {
      yield this.fetchArticles();
      if (!this.needUpdate) {
        const isNeedSyncForce = this.syncForced();
        if (isNeedSyncForce) {
          _shared.out.access("\u4EFB\u52A1\u7ED3\u675F", "\u540C\u6B65\u6210\u529F\uFF01");
        } else {
          _shared.out.access("\u4EFB\u52A1\u7ED3\u675F", "\u6CA1\u6709\u9700\u8981\u540C\u6B65\u7684\u6587\u6863");
        }
        return;
      }
      const realArticles = yield this.deployArticles();
      if (realArticles == null ? void 0 : realArticles.length) {
        this.cachedArticles = this.cachedArticles.map((item) => {
          const realArticle = realArticles.find((realItem) => realItem.doc_id === item.doc_id);
          if (realArticle) {
            return realArticle;
          }
          return item;
        });
      }
      this.syncForced();
      this.writeArticleCache();
      _shared.out.access("\u4EFB\u52A1\u7ED3\u675F", "\u540C\u6B65\u6210\u529F\uFF01");
    });
  }
};
var client_default = Elog;

// src/index.ts






var src_default = client_default;


exports.default = src_default;
//# sourceMappingURL=index.js.map