{"version":3,"sources":["../../src/client.ts","../../src/index.ts"],"sourcesContent":["// write\nimport {\n  YuqueWithToken,\n  YuqueWithTokenConfig,\n  YuqueWithPwd,\n  YuqueWithPwdConfig,\n} from '@elog/sdk-yuque'\nimport NotionClient, { NotionConfig } from '@elog/sdk-notion'\nimport FlowUsClient, { FlowUsConfig } from '@elog/sdk-flowus'\nimport FeiShuClient, { FeiShuConfig } from '@elog/sdk-feishu'\n// deploy\nimport DeployClient, { DeployConfig, DeployPlatformEnum } from '@elog/deploy'\n// imageClient\nimport ImageClient from '@elog/plugin-image'\n// types\nimport { CacheJSON, DocStatusMap, ElogConfig } from './types'\nimport { BaseDoc, DocDetail } from '@elog/types'\n// const\nimport { DocStatus, WritePlatform } from './const'\n// utils\nimport { ImageFail, out } from '@elog/shared'\nimport * as fs from 'fs'\nimport * as path from 'path'\n\n/**\n * 处理器\n */\nclass Elog {\n  /** 配置文件 */\n  config: ElogConfig\n  /** 下载器 */\n  downloaderClient: YuqueWithToken | YuqueWithPwd | NotionClient | FlowUsClient | FeiShuClient\n  /** 部署器 */\n  deployClient: DeployClient\n  /** 图片转CDN转换器 */\n  imageClient: any\n  /** 缓存文章 */\n  cachedArticles: DocDetail[] = []\n  /** 是否需要更新，当所有文章都不需要更新，这个标记就会阻止后续流程 */\n  needUpdate = false\n  /** 待更新的文章列表 */\n  needUpdateArticles: DocDetail[] = []\n  /** 废弃文档 */\n  wasteArticles: DocDetail[] = []\n\n  constructor(config: ElogConfig) {\n    // 初始化配置\n    this.config = config\n    // 初始化增量配置\n    this.initIncrementalUpdate(config)\n    // 初始化写作平台\n    this.downloaderClient = this.initWritingPlatform(config)\n    // 初始化部署平台\n    this.deployClient = this.initDeployPlatform(config)\n    // 初始化图片转CDN\n    this.initImgCdn(config)\n  }\n\n  /**\n   * 初始化增量配置\n   * @param config\n   */\n  initIncrementalUpdate(config: ElogConfig) {\n    if (config.extension.disableCache) {\n      out.access('全量更新', '已禁用缓存，将全量更新文档')\n      return\n    }\n    try {\n      const cacheJson: CacheJSON = require(path.join(process.cwd(), config.extension.cachePath))\n      const { docs } = cacheJson\n      // 获取缓存文章\n      this.cachedArticles = (docs as DocDetail[]) || []\n    } catch (error) {\n      out.access('全量更新', '未获取到缓存，将全量更新文档')\n    }\n    if (this.config.extension?.isForced) {\n      out.warning('注意', '已开启强制同步，将按照当前配置找出需要删除的文档并删除')\n    }\n  }\n\n  /**\n   * 初始化写作平台\n   * @param config\n   */\n  initWritingPlatform(config: ElogConfig) {\n    if (config.write.platform === WritePlatform.YUQUE) {\n      let yuqueConfig = config.write.yuque as YuqueWithTokenConfig\n      return new YuqueWithToken(yuqueConfig)\n    } else if (config.write.platform === WritePlatform.YUQUE_WITH_PWD) {\n      let yuqueConfig = config.write['yuque-pwd'] as YuqueWithPwdConfig\n      return new YuqueWithPwd(yuqueConfig)\n    } else if (config.write.platform === WritePlatform.NOTION) {\n      let notionConfig = config.write.notion as NotionConfig\n      return new NotionClient(notionConfig)\n    } else if (config.write.platform === WritePlatform.FLOWUS) {\n      let flowusConfig = config.write.flowus as FlowUsConfig\n      return new FlowUsClient(flowusConfig)\n    } else if (config.write.platform === WritePlatform.FEISHU) {\n      let feiShuConfig = config.write.feishu as FeiShuConfig\n      return new FeiShuClient(feiShuConfig)\n    } else {\n      out.err('错误', '未知的写作平台')\n      process.exit(0)\n    }\n  }\n\n  /**\n   * 初始化部署平台\n   * @param config\n   */\n  initDeployPlatform(config: ElogConfig) {\n    const deployOptions = config.deploy as DeployConfig\n    return new DeployClient(deployOptions)\n  }\n\n  /**\n   * 初始化图片转CDN配置\n   * @param config\n   */\n  initImgCdn(config: ElogConfig) {\n    if (config.image?.enable || config.image?.enableForExt) {\n      this.imageClient = new ImageClient(config.image)\n    }\n  }\n\n  /**\n   * 下载文章详情列表\n   */\n  async fetchArticles() {\n    if (this.config.write.platform === WritePlatform.YUQUE_WITH_PWD) {\n      const client = this.downloaderClient as YuqueWithPwd\n      await client.login()\n    }\n    let articleList = (await this.downloaderClient.getDocList()) as BaseDoc[]\n    if (!articleList?.length) {\n      this.needUpdate = false\n      return\n    }\n    // 过滤掉被删除的文章\n    this.cachedArticles = this.cachedArticles.filter((cache) => {\n      const isExist = articleList.findIndex((item) => item.doc_id === cache.doc_id) !== -1\n      if (!isExist && this.config.extension?.isForced) {\n        // 记录被删除/改名的文档\n        this.wasteArticles.push(cache)\n        out.warning(`${cache.properties.title} 文档已被删除，将在同步结束后处理`)\n      }\n      return isExist\n    })\n    let ids: string[] = []\n    let idMap: DocStatusMap = {}\n    for (const article of articleList) {\n      // 判断哪些文章是新增的\n      const cacheIndex = this.cachedArticles.findIndex(\n        (cacheItem) => cacheItem.doc_id === article.doc_id,\n      )\n      // 新增的则加入需要下载的ids列表\n      if (cacheIndex < 0) {\n        // cacheIndex = _cachedArticles.length;\n        ids.push(article.doc_id)\n        // 记录被更新文章状态\n        idMap[article.doc_id] = {\n          status: DocStatus.create,\n        }\n      } else {\n        // 不是新增的则判断是否文章更新了\n        const cacheArticle = this.cachedArticles[cacheIndex]\n        const cacheAvailable = article.updated === cacheArticle.updated\n\n        if (cacheArticle.needUpdate === ImageFail) {\n          out.access(\n            `上次同步时 【${cacheArticle.properties.title}】 存在图片下载失败，本次将尝试重新同步`,\n          )\n        }\n        if (!cacheAvailable || cacheArticle.needUpdate === ImageFail) {\n          // 如果文章更新了则加入需要下载的ids列表, 没有更新则不需要下载\n          ids.push(article.doc_id)\n          // 记录被更新文章状态和索引\n          idMap[article.doc_id] = {\n            index: cacheIndex,\n            status: DocStatus.update,\n          }\n        }\n      }\n    }\n    // 没有则不需要更新\n    if (!ids.length) {\n      this.needUpdate = false\n      return\n    }\n    this.needUpdate = true\n    let docDetailList = (await this.downloaderClient.getDocDetailList(ids)) as DocDetail[]\n    if (this.config.deploy.platform === DeployPlatformEnum.LOCAL) {\n      docDetailList = this.processDocPath(docDetailList)\n    }\n    // 处理文章的图片\n    if (this.config.image?.enable) {\n      out.access('开始处理图片...')\n      docDetailList = await this.processImage(docDetailList)\n    }\n    // 缓存需要更新的文档\n    this.needUpdateArticles = docDetailList\n    // 更新缓存里的文章\n    for (const docDetail of docDetailList) {\n      const { index, status } = idMap[docDetail.doc_id]\n      if (status === DocStatus.create) {\n        // 新增文档\n        this.cachedArticles.push(docDetail)\n      } else {\n        // 更新文档\n        this.cachedArticles[index as number] = docDetail\n      }\n    }\n  }\n\n  /**\n   * 写入缓存 json 文件\n   */\n  writeArticleCache() {\n    try {\n      let catalog: any[] = []\n      if (\n        this.config.write.platform === WritePlatform.YUQUE ||\n        this.config.write.platform === WritePlatform.YUQUE_WITH_PWD\n      ) {\n        const yuqueClient = this.downloaderClient\n        catalog = yuqueClient.ctx.catalog\n      } else if (this.config.write.platform === WritePlatform.NOTION) {\n        const notionClient = this.downloaderClient as NotionClient\n        catalog = notionClient.ctx.catalog\n      } else if (this.config.write.platform === WritePlatform.FLOWUS) {\n        const flowusClient = this.downloaderClient as FlowUsClient\n        catalog = flowusClient.ctx.catalog\n      } else if (this.config.write.platform === WritePlatform.FEISHU) {\n        const feiShuClient = this.downloaderClient as FeiShuClient\n        catalog = feiShuClient.ctx.catalog\n      }\n\n      let cacheDocs: Partial<DocDetail>[] = this.cachedArticles.map((item) => {\n        // 只缓存重要属性\n        return {\n          id: item.id,\n          doc_id: item.doc_id,\n          updated: item.updated,\n          properties: item.properties,\n          catalog: item.catalog,\n          realName: item.realName,\n          relativePath: item.relativePath,\n          needUpdate: item.needUpdate,\n          docPath: item.docPath,\n        }\n      })\n      if (this.config.extension?.isFullCache) {\n        // 缓存全部属性\n        cacheDocs = this.cachedArticles\n      }\n      const cacheJson: CacheJSON = {\n        docs: cacheDocs,\n        catalog,\n      }\n      fs.writeFileSync(this.config.extension.cachePath, JSON.stringify(cacheJson, null, 2), {\n        encoding: 'utf8',\n      })\n    } catch (e: any) {\n      out.warning('缓存失败', `写入缓存信息失败，请检查，${e.message}`)\n      out.debug(e)\n    }\n  }\n\n  /**\n   * 处理文章图片\n   */\n  async processImage(docDetailList: DocDetail[]) {\n    if (this.config.write.platform === WritePlatform.FEISHU) {\n      // 飞书的图片资源需要单独处理\n      return this.imageClient.replaceImagesFromFeiShu(\n        docDetailList,\n        (this.downloaderClient as FeiShuClient).ctx.feishu,\n      )\n    }\n    return this.imageClient.replaceImages(docDetailList)\n  }\n\n  /**\n   * 部署文章\n   */\n  async deployArticles() {\n    return this.deployClient.deploy(this.needUpdateArticles, this.imageClient)\n  }\n\n  /**\n   * 强制同步\n   * 仅适用于想让线上和本地文档保持强一致\n   * 例如：线上文档改名/删除后，本地旧文档也想要同步删除\n   */\n  syncForced() {\n    if (\n      this.wasteArticles?.length &&\n      this.cachedArticles?.length &&\n      this.config.deploy.platform === DeployPlatformEnum.LOCAL\n    ) {\n      out.warning('文档强制同步中...')\n      // 本地文档路径\n      const outputDir = path.join(process.cwd(), this.config.deploy.local.outputDir)\n      // 将本地文档路径下的文档根据废弃文档列表进行删除\n      for (const wasteArticle of this.wasteArticles) {\n        let deleteItem = wasteArticle\n        if (!deleteItem.relativePath || !deleteItem.realName) {\n          continue\n        }\n        const docRealPath = path.join(outputDir, deleteItem.relativePath)\n        if (fs.existsSync(docRealPath)) {\n          fs.unlinkSync(docRealPath)\n          out.info('删除文档', `${wasteArticle.realName}.md`)\n        }\n      }\n      return true\n    }\n    return false\n  }\n\n  /**\n   * 处理本地部署\n   * @param articleList\n   */\n  processDocPath(articleList: DocDetail[]) {\n    for (const post of articleList) {\n      let postPath = this.config.deploy.local.outputDir\n      if (this.config.deploy.local.catalog) {\n        // 开启按目录生成\n        if (Array.isArray(post.catalog)) {\n          // 是否存在目录\n          const tocPath = post.catalog.map((item) => item.title).join('/')\n          postPath = path.join(postPath, tocPath)\n        }\n      }\n      post.docPath = postPath\n    }\n    return articleList\n  }\n\n  // 下载文档 => 增量更新文章到缓存 json 文件\n  async deploy() {\n    // 下载文档\n    await this.fetchArticles()\n    if (!this.needUpdate) {\n      const isNeedSyncForce = this.syncForced()\n      // 结束进程\n      if (isNeedSyncForce) {\n        out.access('任务结束', '同步成功！')\n      } else {\n        out.access('任务结束', '没有需要同步的文档')\n      }\n      return\n    }\n    // 部署文章\n    const realArticles = await this.deployArticles()\n    if (realArticles?.length) {\n      // 将this.cachedArticles中的文章替换成realArticles中的文章\n      this.cachedArticles = this.cachedArticles.map((item) => {\n        const realArticle = realArticles.find((realItem) => realItem.doc_id === item.doc_id)\n        if (realArticle) {\n          return realArticle\n        }\n        return item\n      })\n    }\n    // 删除本地不存在的文章\n    this.syncForced()\n    // 写入文章缓存\n    this.writeArticleCache()\n    out.access('任务结束', '同步成功！')\n  }\n}\n\nexport default Elog\n","import Elog from './client'\n\nexport default Elog\n\n// core api\nexport * from './types'\n// deploy api\nexport * from '@elog/deploy'\n// plugin-image api\nexport * from '@elog/plugin-image'\n// sdk-flowus api\nexport * from '@elog/sdk-flowus'\n// sdk-notion api\nexport * from '@elog/sdk-notion'\n// sdk-yuque api\nexport * from '@elog/sdk-yuque'\n// shared api\nexport * from '@elog/shared'\n"],"mappings":"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","names":["_a"]}