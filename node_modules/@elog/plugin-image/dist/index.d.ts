import { DocDetail } from '@elog/types';
import { COSOptions } from 'cos-nodejs-sdk-v5';
import { Options } from 'ali-oss';

declare enum ImagePlatformEnum {
    QINIU = "qiniu",
    UPYUN = "upyun",
    COS = "cos",
    GITHUB = "github",
    OSS = "oss",
    LOCAL = "local"
}

interface ImgBaseConfig {
    host?: string;
    prefixKey?: string;
    secretExt?: string;
}
interface ICosConfig extends ImgBaseConfig {
    secretId: string;
    secretKey: string;
    bucket: string;
    region: string;
}
type CosConfig = ICosConfig & COSOptions;
interface IOssConfig extends ImgBaseConfig {
    secretId: string;
    secretKey: string;
    bucket: string;
    region: string;
    stsToken?: string;
    secure?: boolean;
    endpoint?: string;
}
type OssConfig = IOssConfig & Options;
interface QiniuConfig extends ImgBaseConfig {
    secretId: string;
    secretKey: string;
    bucket: string;
    region: string;
}
interface UPYunConfig extends ImgBaseConfig {
    bucket: string;
    user: string;
    password: string;
}
type GetImagePath = (doc: DocDetail, outputDir: string) => {
    dirPath: string;
    prefixKey: string;
};
interface GithubConfig extends ImgBaseConfig {
    user: string;
    token: string;
    repo: string;
    branch?: string;
}
interface ImgLocalConfig {
    outputDir: string;
    prefixKey?: string;
    /** 路径根据文档计算 */
    pathFollowDoc?: boolean;
    /** 图片路径拓展点 */
    imagePathExt?: string;
}
type ImagePlugin = string | Function;
/**
 * 图床配置
 */
type ImagePlatformConfig = {
    [key in ImagePlatformEnum]: any;
};
type ImageConfig = {
    enable: boolean;
    platform: ImagePlatformEnum | string;
    /** 不开启图床使用图床插件 */
    enableForExt?: string;
    plugin?: ImagePlugin;
    [key: string]: any;
} & ImagePlatformConfig;

declare class ImgBedClient {
    config: ImageConfig;
    imageClient: any;
    constructor(config: ImageConfig);
    /**
     * 获取图床对象的实例
     *
     * @param {string} platform 图床类型
     * @return {any} 图床实例
     */
    getImageBedInstance(platform: ImagePlatformEnum | string): any;
    /**
     * 检查图床是否已经存在图片，存在则返回url
     * @param fileName
     */
    hasImage(fileName: string): Promise<string | undefined>;
    /**
     * 上传图片到图床
     * @param imgBuffer
     * @param fileName
     * @param doc
     */
    uploadImg(imgBuffer: Buffer, fileName: string, doc: DocDetail): Promise<string | undefined>;
}

interface ImageUrl {
    url: string;
    original: string;
}
interface ImageSource {
    fileName: string;
    original: string;
    url?: string;
    upload: boolean;
    buffer?: Buffer;
}

declare class ImageUploader {
    config: ImageConfig;
    ctx: ImgBedClient;
    constructor(config: ImageConfig);
    /**
     * 上传
     * @param urlList
     * @param doc
     * @param failBack
     */
    upload(urlList: ImageUrl[], doc: DocDetail, failBack?: (image: ImageUrl) => void): Promise<ImageUrl[] | undefined>;
    /**
     * 替换图片
     * @param articleList
     */
    replaceImages(articleList: DocDetail[]): Promise<DocDetail[]>;
    /**
     * 从图片链接上传到图床/下载到本地，适用于自定义上传图片
     * @param originalUrl
     * @param doc
     */
    uploadImageFromUrl(originalUrl: string, doc: DocDetail): Promise<string | undefined>;
    /**
     * 从飞书下载图片
     * @param articleList
     * @param feishuClient
     * @param doc
     */
    replaceImagesFromFeiShu(articleList: DocDetail[], feishuClient: any): Promise<DocDetail[]>;
    uploadFromFeiShu(urlList: ImageUrl[], feishuClient: any, doc: DocDetail, failBack?: (image: ImageUrl) => void): Promise<ImageUrl[] | undefined>;
}

export { CosConfig, GetImagePath, GithubConfig, ICosConfig, IOssConfig, ImageConfig, ImagePlugin, ImageSource, ImageUrl, ImgLocalConfig, OssConfig, QiniuConfig, UPYunConfig, ImageUploader as default };
