var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/platform/cos.ts
import COS from "cos-nodejs-sdk-v5";
import { out as out2 } from "@elog/shared";

// src/platform/utils.ts
import { out } from "@elog/shared";
import path from "path";
import fs from "fs";
var getSecretExt = (config) => __async(void 0, null, function* () {
  out.warning("\u6CE8\u610F", "\u6B63\u5728\u4F7F\u7528\u5BC6\u94A5\u62D3\u5C55\u70B9\uFF0C\u8BF7\u9075\u5FAA\u5BC6\u94A5\u62D3\u5C55\u70B9\u6CE8\u5165\u89C4\u8303");
  try {
    const secretExtPath = path.resolve(process.cwd(), config.secretExt);
    const { getSecret } = __require(secretExtPath);
    const ext = yield getSecret();
    config = __spreadValues(__spreadValues({}, config), ext);
    return config;
  } catch (e) {
    out.err(e.message);
    out.err("\u6267\u884C\u5931\u8D25", "\u5BC6\u94A5\u62D3\u5C55\u70B9\u6267\u884C\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\uFF01");
    process.exit(1);
  }
});
var getImagePathExt = (imagePathExt) => {
  out.warning("\u6CE8\u610F", "\u6B63\u5728\u4F7F\u7528\u56FE\u7247\u8DEF\u5F84\u62D3\u5C55\u70B9\uFF0C\u8BF7\u9075\u5FAA\u62D3\u5C55\u70B9\u6CE8\u5165\u89C4\u8303");
  try {
    const imagePathExtPath = path.resolve(process.cwd(), imagePathExt);
    const { getImagePath } = __require(imagePathExtPath);
    return getImagePath;
  } catch (e) {
    out.err(e.message);
    out.err("\u6267\u884C\u5931\u8D25", "\u56FE\u7247\u8DEF\u5F84\u62D3\u5C55\u70B9\u6267\u884C\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\uFF01");
    process.exit(1);
  }
};
var formattedPrefix = (prefix) => {
  if (!prefix)
    return "";
  let _prefix = prefix;
  if (_prefix.startsWith("/")) {
    _prefix = _prefix.slice(1);
  }
  if (!_prefix.endsWith("/")) {
    _prefix = `${_prefix}/`;
  }
  return _prefix;
};
var resolvePluginPath = (pluginPath) => {
  const pluginLocalPath = path.resolve(process.cwd(), pluginPath);
  if (fs.existsSync(pluginLocalPath)) {
    return pluginLocalPath;
  } else {
    return pluginPath;
  }
};
var getPlugin = (plugin, config) => {
  try {
    if (typeof plugin === "string") {
      out.warning("\u6CE8\u610F", `\u6B63\u5728\u4F7F\u7528\u56FE\u5E8A\u63D2\u4EF6: ${plugin}\uFF0C\u8BF7\u9075\u5FAA\u56FE\u5E8A\u63D2\u4EF6\u5F00\u53D1\u89C4\u8303`);
      const pluginLocalPath = resolvePluginPath(plugin);
      const PluginInstance = __require(pluginLocalPath);
      return new PluginInstance(config);
    }
    if (typeof plugin === "function") {
      out.warning("\u6CE8\u610F", `\u6B63\u5728\u4F7F\u7528\u56FE\u5E8A\u63D2\u4EF6: ${plugin.name}\uFF0C\u8BF7\u9075\u5FAA\u56FE\u5E8A\u63D2\u4EF6\u5F00\u53D1\u89C4\u8303`);
      const PluginInstance = plugin;
      return new PluginInstance(config);
    }
    out.err("\u56FE\u5E8A\u63D2\u4EF6\u914D\u7F6E\u6709\u8BEF\uFF0C\u8BF7\u68C0\u67E5");
    process.exit(1);
  } catch (e) {
    if (e.message.includes("Cannot find module")) {
      out.err("\u56FE\u5E8A\u63D2\u4EF6\u4E0D\u5B58\u5728\uFF0C\u8BF7\u68C0\u67E5");
    }
    process.exit(1);
  }
};

// src/platform/cos.ts
var CosClient = class {
  constructor(config) {
    this.config = config;
    void this.initCos();
  }
  /**
   * 初始化配置和COS实例
   */
  initCos() {
    return __async(this, null, function* () {
      if (this.config.secretExt) {
        this.config = yield getSecretExt(this.config);
      } else {
        this.config = __spreadProps(__spreadValues({}, this.config), {
          SecretId: this.config.secretId || process.env.COS_SECRET_ID,
          SecretKey: this.config.secretKey || process.env.COS_SECRET_KEY
        });
      }
      if (!this.config.SecretId || !this.config.SecretKey) {
        out2.err("\u7F3A\u5C11\u817E\u8BAF\u4E91COS\u5BC6\u94A5\u4FE1\u606F");
        process.exit(-1);
      }
      this.config.prefixKey = formattedPrefix(this.config.prefixKey);
      this.imgClient = new COS(this.config);
    });
  }
  /**
   * 检查图床是否已经存在图片，存在则返回url,不存在返回undefined
   * @param fileName
   */
  hasImage(fileName) {
    return __async(this, null, function* () {
      if (!this.imgClient) {
        yield this.initCos();
      }
      try {
        yield this.imgClient.headObject({
          Bucket: this.config.bucket,
          // 存储桶名字（必须）
          Region: this.config.region,
          // 存储桶所在地域，必须字段
          Key: `${this.config.prefixKey}${fileName}`
          //  文件名  必须
        });
        if (this.config.host) {
          return `https://${this.config.host}/${this.config.prefixKey}${fileName}`;
        }
        return `https://${this.config.bucket}.cos.${this.config.region}.myqcloud.com/${this.config.prefixKey}${fileName}`;
      } catch (e) {
        out2.debug(`\u56FE\u5E8A\u68C0\u67E5\u51FA\u9519: ${e.message}`);
      }
    });
  }
  /**
   * 上传图片到图床
   * @param imgBuffer
   * @param fileName
   */
  uploadImg(imgBuffer, fileName) {
    return __async(this, null, function* () {
      if (!this.imgClient) {
        yield this.initCos();
      }
      try {
        const res = yield this.imgClient.putObject({
          Bucket: this.config.bucket,
          // 存储桶名字（必须）
          Region: this.config.region,
          // 存储桶所在地域，必须字段
          Key: `${this.config.prefixKey}/${fileName}`,
          //  文件名  必须
          StorageClass: "STANDARD",
          // 上传模式（标准模式）
          Body: imgBuffer
          // 上传文件对象
        });
        if (this.config.host) {
          return `https://${this.config.host}/${this.config.prefixKey}${fileName}`;
        }
        return `https://${res.Location}`;
      } catch (e) {
        out2.warning("\u8DF3\u8FC7\u4E0A\u4F20", `\u4E0A\u4F20\u56FE\u7247\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5: ${e.message}`);
        out2.debug(e);
      }
    });
  }
};
var cos_default = CosClient;

// src/platform/oss.ts
import OSS from "ali-oss";
import { out as out3 } from "@elog/shared";
var OssClient = class {
  constructor(config) {
    this.config = config;
    void this.init();
  }
  /**
   * 初始化配置和OSS实例
   */
  init() {
    return __async(this, null, function* () {
      var _a;
      if ((_a = this.config.prefixKey) == null ? void 0 : _a.endsWith("/")) {
        this.config.prefixKey = this.config.prefixKey.slice(0, -1);
      }
      if (this.config.secretExt) {
        this.config = yield getSecretExt(this.config);
      } else {
        this.config = __spreadProps(__spreadValues({}, this.config), {
          accessKeyId: this.config.secretId || process.env.OSS_SECRET_ID,
          accessKeySecret: this.config.secretKey || process.env.OSS_SECRET_KEY
        });
      }
      if (!this.config.accessKeyId || !this.config.accessKeySecret) {
        out3.err("\u7F3A\u5C11\u963F\u91CC\u4E91OSS\u5BC6\u94A5\u4FE1\u606F");
        process.exit(-1);
      }
      this.config.prefixKey = formattedPrefix(this.config.prefixKey);
      this.imgClient = new OSS(this.config);
    });
  }
  /**
   * 检查图床是否已经存在图片，存在则返回url,不存在返回空
   * @param fileName
   */
  hasImage(fileName) {
    return __async(this, null, function* () {
      if (!this.imgClient) {
        yield this.init();
      }
      try {
        yield this.imgClient.head(`${this.config.prefixKey}${fileName}`);
        if (this.config.host) {
          return `https://${this.config.host}/${this.config.prefixKey}${fileName}`;
        }
        return `https://${this.config.bucket}.${this.config.region}.aliyuncs.com/${this.config.prefixKey}${fileName}`;
      } catch (e) {
        out3.debug(`\u56FE\u5E8A\u68C0\u67E5\u51FA\u9519: ${e.message}`);
      }
    });
  }
  /**
   * 上传图片到图床
   * @param imgBuffer
   * @param fileName
   */
  uploadImg(imgBuffer, fileName) {
    return __async(this, null, function* () {
      if (!this.imgClient) {
        yield this.init();
      }
      try {
        const res = yield this.imgClient.put(`${this.config.prefixKey}${fileName}`, imgBuffer);
        if (this.config.host) {
          return `https://${this.config.host}/${this.config.prefixKey}${fileName}`;
        }
        return res.url;
      } catch (e) {
        out3.warning("\u8DF3\u8FC7\u4E0A\u4F20", `\u4E0A\u4F20\u56FE\u7247\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5: ${e.message}`);
        out3.debug(e);
      }
    });
  }
};
var oss_default = OssClient;

// src/platform/upyun.ts
import { out as out4 } from "@elog/shared";
var upyun = __require("upyun");
var UPClient = class {
  constructor(config) {
    this.config = config;
    void this.init();
  }
  /**
   * 初始化配置
   */
  init() {
    return __async(this, null, function* () {
      if (this.config.secretExt) {
        this.config = yield getSecretExt(this.config);
      } else {
        this.config = __spreadProps(__spreadValues({}, this.config), {
          user: this.config.user || process.env.UPYUN_SECRET_ID,
          password: this.config.password || process.env.UPYUN_SECRET_KEY
        });
      }
      if (!this.config.user || !this.config.password || !this.config.bucket) {
        out4.err("\u7F3A\u5C11\u53C8\u62CD\u4E91\u914D\u7F6E\u4FE1\u606F");
        process.exit(-1);
      }
      this.config.prefixKey = formattedPrefix(this.config.prefixKey);
      if (!this.config.host) {
        out4.access(`\u672A\u6307\u5B9A\u57DF\u540Dhost\uFF0C\u5C06\u4F7F\u7528\u6D4B\u8BD5\u57DF\u540D\uFF1Ahttp://${this.config.bucket}.test.upcdn.net`);
        this.config.host = `http://${this.config.bucket}.test.upcdn.net`;
      }
      this.imgClient = new upyun.Client(
        new upyun.Service(this.config.bucket, this.config.user, this.config.password)
      );
    });
  }
  /**
   * 检查图床是否已经存在图片，存在则返回url,不存在返回空
   * @param fileName
   */
  hasImage(fileName) {
    return __async(this, null, function* () {
      if (!this.imgClient) {
        yield this.init();
      }
      try {
        const res = yield this.imgClient.headFile(`${this.config.prefixKey}${fileName}`);
        if (res) {
          return `${this.config.host}/${this.config.prefixKey}${fileName}`;
        } else {
          return void 0;
        }
      } catch (e) {
        out4.debug(`\u56FE\u7247\u4E0D\u5B58\u5728: ${e.message}`);
        return void 0;
      }
    });
  }
  /**
   * 上传图片到图床
   * @param imgBuffer
   * @param fileName
   */
  uploadImg(imgBuffer, fileName) {
    return __async(this, null, function* () {
      if (!this.imgClient) {
        yield this.init();
      }
      try {
        const res = yield this.imgClient.putFile(`${this.config.prefixKey}${fileName}`, imgBuffer);
        if (res) {
          return `${this.config.host}/${this.config.prefixKey}${fileName}`;
        } else {
          return void 0;
        }
      } catch (e) {
        out4.warning(`\u4E0A\u4F20\u56FE\u7247\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5: ${e.message}`);
        out4.debug(e);
        return void 0;
      }
    });
  }
};
var upyun_default = UPClient;

// src/platform/github.ts
import { out as out5, request } from "@elog/shared";
var GithubClient = class {
  constructor(config) {
    this.config = config;
    void this.init();
  }
  init() {
    return __async(this, null, function* () {
      var _a;
      if (!this.config.host) {
        out5.access("\u672A\u6307\u5B9A\u52A0\u901F\u57DF\u540D\uFF0C\u5C06\u4F7F\u7528\u9ED8\u8BA4\u57DF\u540D\uFF1Ahttps://raw.githubusercontent.com");
      } else if ((_a = this.config.host) == null ? void 0 : _a.includes("cdn.jsdelivr.net")) {
        this.config.host = "https://cdn.jsdelivr.net";
      }
      if (this.config.secretExt) {
        this.config = yield getSecretExt(this.config);
      } else {
        this.config = __spreadProps(__spreadValues({}, this.config), {
          token: this.config.token || process.env.GITHUB_TOKEN
        });
      }
      if (!this.config.token || !this.config.user || !this.config.repo) {
        out5.err("\u7F3A\u5C11Github \u914D\u7F6E\u4FE1\u606F");
        process.exit(-1);
      }
      this.config.prefixKey = formattedPrefix(this.config.prefixKey);
      this.isInit = true;
    });
  }
  _fetch(fileName, options, base64File) {
    return __async(this, null, function* () {
      var _a;
      if (!this.isInit) {
        yield this.init();
      }
      const path3 = `https://api.github.com/repos/${this.config.user}/${this.config.repo}/contents/${this.config.prefixKey}${fileName}`;
      const data = base64File && {
        message: "Upload by elog",
        branch: this.config.branch || "master",
        content: base64File
      };
      const method = options.method;
      try {
        const result = yield request(path3, {
          data,
          headers: {
            Authorization: `Bearer ${this.config.token}`
          },
          method
        });
        if (result.status === 409) {
          out5.warning("\u56FE\u7247\u4E0A\u4F20\u5931\u8D25", "\u7531\u4E8Egithub\u5E76\u53D1\u95EE\u9898\uFF0C\u56FE\u7247\u4E0A\u4F20\u5931\u8D25");
        } else if (result.status === 200 || result.status === 201) {
          if (this.config.host) {
            return `${this.config.host}/gh/${this.config.user}/${this.config.repo}/${this.config.prefixKey}${fileName}`;
          } else if (method === "GET") {
            return result.data.download_url;
          } else {
            return result.data.content.download_url;
          }
        } else {
          if (base64File) {
            if (((_a = result.data) == null ? void 0 : _a.message) === "Bad credentials") {
              out5.warning(
                "\u8BF7\u6C42\u5931\u8D25",
                "Github Token \u914D\u7F6E\u9519\u8BEF\uFF0C\u914D\u7F6E\u6587\u6863\uFF1Ahttps://elog.1874.cool/notion/gvnxobqogetukays#github"
              );
            } else {
              out5.warning("\u8BF7\u6C42\u5931\u8D25", JSON.stringify(result.data));
            }
          } else {
            out5.debug("NOT FOUND", JSON.stringify(result.data));
          }
        }
      } catch (e) {
        if (base64File) {
          out5.warning("\u8BF7\u6C42\u5931\u8D25", e.message);
          out5.debug(e);
        } else {
          out5.debug(e);
        }
      }
    });
  }
  /**
   * 检查图床是否已经存在图片，存在则返回url,不存在返回空
   * @param fileName
   */
  hasImage(fileName) {
    return __async(this, null, function* () {
      return yield this._fetch(fileName, { method: "GET" });
    });
  }
  /**
   * 上传图片到图床
   * @param imgBuffer
   * @param fileName
   */
  uploadImg(imgBuffer, fileName) {
    return __async(this, null, function* () {
      const base64File = imgBuffer.toString("base64");
      return this._fetch(fileName, { method: "PUT" }, base64File);
    });
  }
};
var github_default = GithubClient;

// src/platform/qiniu.ts
import * as qiniu from "qiniu";
import { out as out6 } from "@elog/shared";
var QiNiuClient = class {
  constructor(config) {
    this.config = config;
    void this.init();
  }
  /**
   * 初始化配置
   */
  init() {
    return __async(this, null, function* () {
      if (this.config.secretExt) {
        this.config = yield getSecretExt(this.config);
      } else {
        this.config = __spreadProps(__spreadValues({}, this.config), {
          secretId: this.config.secretId || process.env.QINIU_SECRET_ID,
          secretKey: this.config.secretKey || process.env.QINIU_SECRET_KEY
        });
      }
      if (!this.config.secretId || !this.config.secretKey) {
        out6.err("\u7F3A\u5C11\u4E03\u725B\u4E91\u5BC6\u94A5\u4FE1\u606F");
        process.exit(-1);
      }
      this.config.prefixKey = formattedPrefix(this.config.prefixKey);
      if (!this.config.host) {
        out6.err("\u4F7F\u7528\u4E03\u725B\u4E91\u65F6\uFF0C\u9700\u8981\u6307\u5B9A\u57DF\u540Dhost");
        process.exit(-1);
      }
      const mac = new qiniu.auth.digest.Mac(this.config.secretId, this.config.secretKey);
      const putPolicy = new qiniu.rs.PutPolicy({ scope: this.config.bucket });
      this.uploadToken = putPolicy.uploadToken(mac);
      const qiniuConfig = new qiniu.conf.Config({
        zone: qiniu.zone[this.config.region]
      });
      this.formUploader = new qiniu.form_up.FormUploader(qiniuConfig);
      this.bucketManager = new qiniu.rs.BucketManager(mac, qiniuConfig);
      this.putExtra = new qiniu.form_up.PutExtra();
      this.isInit = true;
    });
  }
  /**
   * 检查图床是否已经存在图片，存在则返回url,不存在返回空
   *
   * @param {string} fileName 文件名
   * @return {Promise<string>} 图片url
   */
  hasImage(fileName) {
    return __async(this, null, function* () {
      if (!this.isInit) {
        yield this.init();
      }
      return yield new Promise((resolve) => {
        var _a;
        (_a = this.bucketManager) == null ? void 0 : _a.stat(
          this.config.bucket,
          `${this.config.prefixKey}${fileName}`,
          (err, _respBody, respInfo) => {
            if (err) {
              out6.debug(`\u68C0\u67E5\u56FE\u7247\u4FE1\u606F\u65F6\u51FA\u9519: ${err.message}`);
              resolve(void 0);
            } else {
              if (respInfo.statusCode === 200) {
                resolve(`${this.config.host}/${this.config.prefixKey}${fileName}`);
              } else {
                out6.debug("\u68C0\u67E5\u56FE\u7247\u4FE1\u606F\u65F6\u51FA\u9519");
                out6.debug(JSON.stringify(respInfo));
                resolve(void 0);
              }
            }
          }
        );
      });
    });
  }
  /**
   * 上传图片到图床
   * @param imgBuffer
   * @param fileName
   */
  uploadImg(imgBuffer, fileName) {
    return __async(this, null, function* () {
      if (!this.isInit) {
        yield this.init();
      }
      return yield new Promise((resolve) => {
        var _a;
        (_a = this.formUploader) == null ? void 0 : _a.put(
          this.uploadToken,
          `${this.config.prefixKey}${fileName}`,
          imgBuffer,
          this.putExtra,
          (respErr, _respBody, respInfo) => {
            if (respErr) {
              out6.debug(`\u4E0A\u4F20\u56FE\u7247\u5931\u8D25: ${respErr.message}`);
            } else if (respInfo.statusCode === 200) {
              resolve(`${this.config.host}/${this.config.prefixKey}${fileName}`);
            } else {
              out6.debug("\u4E0A\u4F20\u56FE\u7247\u5931\u8D25");
              out6.debug(JSON.stringify(respInfo));
              resolve(void 0);
            }
          }
        );
      });
    });
  }
};
var qiniu_default = QiNiuClient;

// src/platform/local.ts
import * as fs2 from "fs";
import path2 from "path";
import mkdirp from "mkdirp";
import { out as out7 } from "@elog/shared";
var LocalClient = class {
  constructor(config) {
    this.config = config;
    this.getImagePath = this.initImagePath();
  }
  initImagePath() {
    if (this.config.imagePathExt) {
      return getImagePathExt(this.config.imagePathExt);
    } else {
      return this.genImagePath;
    }
  }
  genImagePath(doc, outputDir) {
    const dirPath = outputDir;
    let prefixKey = "";
    if (this.config.pathFollowDoc) {
      const docPath = doc.docPath;
      prefixKey = path2.relative(docPath, dirPath);
    } else {
      prefixKey = this.config.prefixKey || "/";
    }
    return {
      dirPath,
      prefixKey
    };
  }
  /**
   * 检查是否已经存在图片，存在则返回url,不存在返回undefined
   * TODO 为了性能，本地也需要维护一个文件的缓存MAP，这样不会重复进行文件查找和写入
   * TODO 当前阶段可以忽略检查本地文件是否存在，直接覆盖写入即可
   */
  hasImage() {
    return __async(this, null, function* () {
      return void 0;
    });
  }
  /**
   * 上传图片到图床
   * @param imgBuffer
   * @param imageName
   * @param doc
   */
  uploadImg(imgBuffer, imageName, doc) {
    return __async(this, null, function* () {
      try {
        let { dirPath, prefixKey } = this.getImagePath(doc, this.config.outputDir);
        if (!prefixKey.endsWith("/")) {
          prefixKey = prefixKey + "/";
        }
        const fullDirPath = path2.resolve(process.cwd(), dirPath);
        mkdirp.sync(dirPath);
        const filePath = path2.resolve(fullDirPath, imageName);
        fs2.writeFileSync(filePath, imgBuffer);
        return prefixKey + imageName;
      } catch (e) {
        out7.err("\u5199\u5165\u9519\u8BEF", e.message);
        out7.debug(e);
      }
    });
  }
};
var local_default = LocalClient;

// src/platform/client.ts
var ImgBedClient = class {
  constructor(config) {
    this.config = config;
    this.imageClient = this.getImageBedInstance(this.config.platform);
  }
  /**
   * 获取图床对象的实例
   *
   * @param {string} platform 图床类型
   * @return {any} 图床实例
   */
  getImageBedInstance(platform) {
    if (this.config.plugin) {
      return getPlugin(this.config.plugin, this.config);
    }
    switch (platform) {
      case "cos" /* COS */:
        const cosConfig = this.config.cos;
        return new cos_default(cosConfig);
      case "oss" /* OSS */:
        const ossConfig = this.config.oss;
        return new oss_default(ossConfig);
      case "qiniu" /* QINIU */:
        const qiniuConfig = this.config.qiniu;
        return new qiniu_default(qiniuConfig);
      case "upyun" /* UPYUN */:
        const upyunConfig = this.config.upyun;
        return new upyun_default(upyunConfig);
      case "github" /* GITHUB */:
        const githubConfig = this.config.github;
        return new github_default(githubConfig);
      default:
        const defaultConfig = this.config.local;
        return new local_default(defaultConfig);
    }
  }
  /**
   * 检查图床是否已经存在图片，存在则返回url
   * @param fileName
   */
  hasImage(fileName) {
    return __async(this, null, function* () {
      return this.imageClient.hasImage(fileName);
    });
  }
  /**
   * 上传图片到图床
   * @param imgBuffer
   * @param fileName
   * @param doc
   */
  uploadImg(imgBuffer, fileName, doc) {
    return __async(this, null, function* () {
      return this.imageClient.uploadImg(imgBuffer, fileName, doc);
    });
  }
};
var client_default = ImgBedClient;

// src/platform/index.ts
var platform_default = client_default;

// src/core.ts
import {
  generateUniqueId,
  getFileType,
  getPicBufferFromURL,
  getUrl,
  getUrlListFromContent,
  ImageFail,
  out as out8
} from "@elog/shared";
var ImageUploader = class {
  constructor(config) {
    this.config = config;
    this.ctx = new platform_default(config);
  }
  /**
   * 上传
   * @param urlList
   * @param doc
   * @param failBack
   */
  upload(urlList, doc, failBack) {
    return __async(this, null, function* () {
      const toUploadURLs = urlList.map((image) => __async(this, null, function* () {
        return yield new Promise((resolve) => __async(this, null, function* () {
          var _a;
          try {
            const fileName = generateUniqueId(image.url);
            const fileType = yield getFileType(image.url);
            if (!fileType) {
              out8.warning(`${(_a = doc == null ? void 0 : doc.properties) == null ? void 0 : _a.title} \u5B58\u5728\u83B7\u53D6\u56FE\u7247\u7C7B\u578B\u5931\u8D25\uFF0C\u8DF3\u8FC7\uFF1A${image.url}`);
              resolve(void 0);
              return;
            }
            const fullName = `${fileName}.${fileType.type}`;
            let exist = yield this.ctx.hasImage(fullName);
            if (exist) {
              out8.info("\u5FFD\u7565\u4E0A\u4F20", `\u56FE\u7247\u5DF2\u5B58\u5728: ${exist}`);
              resolve({
                fileName: fullName,
                original: image.original,
                url: exist,
                upload: false
              });
            } else {
              const buffer = yield getPicBufferFromURL(image.original);
              if (!buffer) {
                failBack == null ? void 0 : failBack(image);
                resolve(void 0);
                return;
              }
              resolve({
                buffer,
                fileName: fullName,
                original: image.original,
                upload: true
              });
            }
          } catch (err) {
            resolve(void 0);
          }
        }));
      }));
      const toUploadImgs = yield Promise.all(toUploadURLs).then(
        (imgs) => imgs.filter((img) => img !== void 0)
      );
      let output = [];
      for (const img of toUploadImgs) {
        let newUrl = "";
        if (img.upload) {
          newUrl = yield this.ctx.uploadImg(img.buffer, img.fileName, doc);
          if (newUrl) {
            if (this.config.platform === "local" /* LOCAL */) {
            } else {
              out8.info("\u4E0A\u4F20\u6210\u529F", newUrl);
            }
            output.push({ original: img.original, url: newUrl });
          } else {
            out8.warning("\u4E0A\u4F20\u5931\u8D25\uFF1A" + img.fileName + " \u8BF7\u68C0\u67E5\u56FE\u5E8A\u914D\u7F6E");
          }
        } else {
          output.push({ original: img.original, url: img.url });
        }
      }
      if (output.length) {
        output.filter((item) => item.url && item.url !== item.original).map((item) => {
          return {
            original: item.original,
            url: item.url
          };
        });
        return output;
      }
    });
  }
  /**
   * 替换图片
   * @param articleList
   */
  replaceImages(articleList) {
    return __async(this, null, function* () {
      for (let i = 0; i < articleList.length; i++) {
        const articleInfo = articleList[i];
        const urlList = getUrlListFromContent(articleInfo.body);
        if (urlList.length) {
          const urls = yield this.upload(urlList, articleInfo, () => {
            articleInfo.needUpdate = ImageFail;
          });
          if (urls == null ? void 0 : urls.length) {
            urls.forEach((item) => {
              out8.info("\u56FE\u7247\u66FF\u6362", `${item.url}`);
              articleInfo.body = articleInfo.body.replace(item.original, item.url);
            });
          }
        }
      }
      return articleList;
    });
  }
  /**
   * 从图片链接上传到图床/下载到本地，适用于自定义上传图片
   * @param originalUrl
   * @param doc
   */
  uploadImageFromUrl(originalUrl, doc) {
    return __async(this, null, function* () {
      var _a;
      const image = getUrl(originalUrl);
      const urls = yield this.upload([image], doc);
      return (_a = urls == null ? void 0 : urls[0]) == null ? void 0 : _a.url;
    });
  }
  /**
   * 从飞书下载图片
   * @param articleList
   * @param feishuClient
   * @param doc
   */
  replaceImagesFromFeiShu(articleList, feishuClient) {
    return __async(this, null, function* () {
      for (let i = 0; i < articleList.length; i++) {
        const articleInfo = articleList[i];
        const urlList = getUrlListFromContent(articleInfo.body);
        if (urlList.length) {
          const urls = yield this.uploadFromFeiShu(urlList, feishuClient, articleInfo, () => {
            articleInfo.needUpdate = ImageFail;
          });
          if (urls == null ? void 0 : urls.length) {
            urls.forEach((item) => {
              out8.info("\u56FE\u7247\u66FF\u6362", `${item.url}`);
              articleInfo.body = articleInfo.body.replace(item.original, item.url);
            });
          }
        }
      }
      return articleList;
    });
  }
  uploadFromFeiShu(urlList, feishuClient, doc, failBack) {
    return __async(this, null, function* () {
      const toUploadURLs = urlList.map((image) => __async(this, null, function* () {
        return yield new Promise((resolve) => __async(this, null, function* () {
          try {
            const res = yield feishuClient.getResourceItem(image.url);
            const fullName = res.name;
            let exist = yield this.ctx.hasImage(fullName);
            if (exist) {
              out8.info("\u5FFD\u7565\u4E0A\u4F20", `\u56FE\u7247\u5DF2\u5B58\u5728: ${exist}`);
              resolve({
                fileName: fullName,
                original: image.original,
                url: exist,
                upload: false
              });
            } else {
              const buffer = res.buffer;
              if (!buffer) {
                failBack == null ? void 0 : failBack(image);
                resolve(void 0);
                return;
              }
              resolve({
                buffer,
                fileName: fullName,
                original: image.original,
                upload: true
              });
            }
          } catch (err) {
            resolve(void 0);
          }
        }));
      }));
      const toUploadImgs = yield Promise.all(toUploadURLs).then(
        (imgs) => imgs.filter((img) => img !== void 0)
      );
      let output = [];
      for (const img of toUploadImgs) {
        let newUrl = "";
        if (img.upload) {
          newUrl = yield this.ctx.uploadImg(img.buffer, img.fileName, doc);
          if (newUrl) {
            if (this.config.platform === "local" /* LOCAL */) {
            } else {
              out8.info("\u4E0A\u4F20\u6210\u529F", newUrl);
            }
            output.push({ original: img.original, url: newUrl });
          } else {
            out8.warning("\u4E0A\u4F20\u5931\u8D25\uFF1A" + img.fileName + " \u8BF7\u68C0\u67E5\u56FE\u5E8A\u914D\u7F6E");
          }
        } else {
          output.push({ original: img.original, url: img.url });
        }
      }
      if (output.length) {
        output.filter((item) => item.url && item.url !== item.original).map((item) => {
          return {
            original: item.original,
            url: item.url
          };
        });
        return output;
      }
    });
  }
};
var core_default = ImageUploader;

// src/index.ts
var src_default = core_default;
export {
  src_default as default
};
//# sourceMappingURL=index.js.map