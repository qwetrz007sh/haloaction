{"version":3,"sources":["../../src/platform/cos.ts","../../src/platform/utils.ts","../../src/platform/oss.ts","../../src/platform/upyun.ts","../../src/platform/github.ts","../../src/platform/qiniu.ts","../../src/platform/local.ts","../../src/platform/client.ts","../../src/platform/index.ts","../../src/core.ts","../../src/index.ts"],"sourcesContent":["import COS from 'cos-nodejs-sdk-v5'\nimport { CosConfig } from './types'\nimport { out } from '@elog/shared'\nimport { formattedPrefix, getSecretExt } from './utils'\n\n/**\n * 腾讯云COS\n */\nclass CosClient {\n  config: CosConfig\n  imgClient?: COS\n  constructor(config: CosConfig) {\n    this.config = config\n    // 尝试初始化COS实例\n    void this.initCos()\n  }\n\n  /**\n   * 初始化配置和COS实例\n   */\n  async initCos() {\n    // 判断是否开启拓展点\n    if (this.config.secretExt) {\n      // 如果开了就从拓展点读取\n      this.config = await getSecretExt(this.config)\n    } else {\n      // 如果没开拓展点，就从配置文件/环境变量中读取\n      this.config = {\n        ...this.config,\n        SecretId: this.config.secretId || process.env.COS_SECRET_ID!,\n        SecretKey: this.config.secretKey || process.env.COS_SECRET_KEY!,\n      }\n    }\n    if (!this.config.SecretId || !this.config.SecretKey) {\n      out.err('缺少腾讯云COS密钥信息')\n      process.exit(-1)\n    }\n    // 处理prefixKey\n    this.config.prefixKey = formattedPrefix(this.config.prefixKey)\n    this.imgClient = new COS(this.config)\n  }\n\n  /**\n   * 检查图床是否已经存在图片，存在则返回url,不存在返回undefined\n   * @param fileName\n   */\n  async hasImage(fileName: string): Promise<string | undefined> {\n    if (!this.imgClient) {\n      await this.initCos()\n    }\n    try {\n      await this.imgClient!.headObject({\n        Bucket: this.config.bucket, // 存储桶名字（必须）\n        Region: this.config.region, // 存储桶所在地域，必须字段\n        Key: `${this.config.prefixKey}${fileName}`, //  文件名  必须\n      })\n      if (this.config.host) {\n        return `https://${this.config.host}/${this.config.prefixKey}${fileName}`\n      }\n      return `https://${this.config.bucket}.cos.${this.config.region}.myqcloud.com/${this.config.prefixKey}${fileName}`\n    } catch (e: any) {\n      out.debug(`图床检查出错: ${e.message}`)\n    }\n  }\n\n  /**\n   * 上传图片到图床\n   * @param imgBuffer\n   * @param fileName\n   */\n  async uploadImg(imgBuffer: Buffer, fileName: string): Promise<string | undefined> {\n    if (!this.imgClient) {\n      await this.initCos()\n    }\n    try {\n      const res = await this.imgClient!.putObject({\n        Bucket: this.config.bucket, // 存储桶名字（必须）\n        Region: this.config.region, // 存储桶所在地域，必须字段\n        Key: `${this.config.prefixKey}/${fileName}`, //  文件名  必须\n        StorageClass: 'STANDARD', // 上传模式（标准模式）\n        Body: imgBuffer, // 上传文件对象\n      })\n      if (this.config.host) {\n        return `https://${this.config.host}/${this.config.prefixKey}${fileName}`\n      }\n      return `https://${res.Location}`\n    } catch (e: any) {\n      out.warning('跳过上传', `上传图片失败，请检查: ${e.message}`)\n      out.debug(e)\n    }\n  }\n}\n\nexport default CosClient\n","import { out } from '@elog/shared'\nimport path from 'path'\nimport fs from 'fs'\nimport { ImageConfig, ImagePlugin } from './types'\n\ninterface SecretExt {\n  secretExt?: string\n}\n\nexport const getSecretExt = async <T>(config: T & SecretExt) => {\n  out.warning('注意', '正在使用密钥拓展点，请遵循密钥拓展点注入规范')\n  try {\n    // 如果指定了secret拓展点，那么拓展点返回的账号密码信息，将会覆盖elog-config.json中的image信息\n    const secretExtPath = path.resolve(process.cwd(), config.secretExt!)\n    // 拓展点需要暴露getSecret方法\n    const { getSecret } = require(secretExtPath)\n    const ext = await getSecret()\n    config = { ...config, ...ext }\n    return config\n  } catch (e: any) {\n    out.err(e.message)\n    out.err('执行失败', '密钥拓展点执行失败，请检查！')\n    process.exit(1)\n  }\n}\n\nexport const getImagePathExt = (imagePathExt: string) => {\n  out.warning('注意', '正在使用图片路径拓展点，请遵循拓展点注入规范')\n  try {\n    const imagePathExtPath = path.resolve(process.cwd(), imagePathExt)\n    const { getImagePath } = require(imagePathExtPath)\n    return getImagePath\n  } catch (e: any) {\n    out.err(e.message)\n    out.err('执行失败', '图片路径拓展点执行失败，请检查！')\n    process.exit(1)\n  }\n}\n\n/**\n * 生成路径前缀\n * 固定格式 'prefix/'，开头无需/，结尾需要/，如果没传，则默认为空\n * @param prefix\n */\n\nexport const formattedPrefix = (prefix?: string): string => {\n  // 如果没传，则默认为空\n  if (!prefix) return ''\n\n  let _prefix = prefix\n\n  // 如果开头无需/\n  if (_prefix.startsWith('/')) {\n    _prefix = _prefix.slice(1)\n  }\n\n  // 如果结尾需要/\n  if (!_prefix.endsWith('/')) {\n    _prefix = `${_prefix}/`\n  }\n\n  return _prefix\n}\n\nexport const resolvePluginPath = (pluginPath: string) => {\n  const pluginLocalPath = path.resolve(process.cwd(), pluginPath)\n  // 判断路径是否存在\n  if (fs.existsSync(pluginLocalPath)) {\n    // 如果路径存在，说明是具体路径，直接返回\n    return pluginLocalPath\n  } else {\n    // 否则认为是包名，从 node_modules 中引入\n    return pluginPath\n    // 包不存在\n  }\n}\n\nexport const getPlugin = (plugin: ImagePlugin, config: ImageConfig) => {\n  try {\n    if (typeof plugin === 'string') {\n      out.warning('注意', `正在使用图床插件: ${plugin}，请遵循图床插件开发规范`)\n      const pluginLocalPath = resolvePluginPath(plugin)\n      const PluginInstance = require(pluginLocalPath)\n      return new PluginInstance(config)\n    }\n    if (typeof plugin === 'function') {\n      out.warning('注意', `正在使用图床插件: ${plugin.name}，请遵循图床插件开发规范`)\n      const PluginInstance = plugin as any\n      return new PluginInstance(config)\n    }\n    // TODO 补充插件开发文档\n    out.err('图床插件配置有误，请检查')\n    process.exit(1)\n  } catch (e: any) {\n    if (e.message.includes('Cannot find module')) {\n      // TODO 补充插件开发文档\n      out.err('图床插件不存在，请检查')\n    }\n    process.exit(1)\n  }\n}\n","// 阿里云图床\nimport OSS from 'ali-oss'\nimport { OssConfig } from './types'\nimport { out } from '@elog/shared'\nimport { formattedPrefix, getSecretExt } from './utils'\n\nclass OssClient {\n  config: OssConfig\n  imgClient?: OSS\n\n  constructor(config: OssConfig) {\n    this.config = config\n    // 尝试初始化OSS实例\n    void this.init()\n  }\n\n  /**\n   * 初始化配置和OSS实例\n   */\n  async init() {\n    // 处理prefixKey配置\n    if (this.config.prefixKey?.endsWith('/')) {\n      this.config.prefixKey = this.config.prefixKey.slice(0, -1)\n    }\n    // 判断是否开启拓展点\n    if (this.config.secretExt) {\n      // 如果开了就从拓展点读取\n      this.config = await getSecretExt(this.config)\n    } else {\n      // 如果没开拓展点，就从配置文件/环境变量中读取\n      this.config = {\n        ...this.config,\n        accessKeyId: this.config.secretId || process.env.OSS_SECRET_ID!,\n        accessKeySecret: this.config.secretKey || process.env.OSS_SECRET_KEY!,\n      }\n    }\n    if (!this.config.accessKeyId || !this.config.accessKeySecret) {\n      out.err('缺少阿里云OSS密钥信息')\n      process.exit(-1)\n    }\n    // 处理prefixKey\n    this.config.prefixKey = formattedPrefix(this.config.prefixKey)\n    this.imgClient = new OSS(this.config)\n  }\n\n  /**\n   * 检查图床是否已经存在图片，存在则返回url,不存在返回空\n   * @param fileName\n   */\n  async hasImage(fileName: string): Promise<string | undefined> {\n    if (!this.imgClient) {\n      await this.init()\n    }\n    try {\n      await this.imgClient!.head(`${this.config.prefixKey}${fileName}`)\n      if (this.config.host) {\n        return `https://${this.config.host}/${this.config.prefixKey}${fileName}`\n      }\n      return `https://${this.config.bucket}.${this.config.region}.aliyuncs.com/${this.config.prefixKey}${fileName}`\n    } catch (e: any) {\n      out.debug(`图床检查出错: ${e.message}`)\n    }\n  }\n\n  /**\n   * 上传图片到图床\n   * @param imgBuffer\n   * @param fileName\n   */\n  async uploadImg(imgBuffer: Buffer, fileName: string): Promise<string | undefined> {\n    if (!this.imgClient) {\n      await this.init()\n    }\n    try {\n      const res = await this.imgClient!.put(`${this.config.prefixKey}${fileName}`, imgBuffer)\n      if (this.config.host) {\n        return `https://${this.config.host}/${this.config.prefixKey}${fileName}`\n      }\n      return res!.url\n    } catch (e: any) {\n      out.warning('跳过上传', `上传图片失败，请检查: ${e.message}`)\n      out.debug(e)\n    }\n  }\n}\n\nexport default OssClient\n","import { formattedPrefix, getSecretExt } from './utils'\nconst upyun = require('upyun')\nimport { out } from '@elog/shared'\nimport { UPYunConfig } from './types'\n\n/**\n * 又拍云\n */\nclass UPClient {\n  config: UPYunConfig\n  imgClient?: any\n  constructor(config: UPYunConfig) {\n    this.config = config\n    // 尝试初始化实例\n    void this.init()\n  }\n\n  /**\n   * 初始化配置\n   */\n  async init() {\n    // 判断是否开启拓展点\n    if (this.config.secretExt) {\n      // 如果开了就从拓展点读取\n      this.config = await getSecretExt(this.config)\n    } else {\n      // 如果没开拓展点，就从配置文件/环境变量中读取\n      this.config = {\n        ...this.config,\n        user: this.config.user || process.env.UPYUN_SECRET_ID!,\n        password: this.config.password || process.env.UPYUN_SECRET_KEY!,\n      }\n    }\n    if (!this.config.user || !this.config.password || !this.config.bucket) {\n      out.err('缺少又拍云配置信息')\n      process.exit(-1)\n    }\n    // 处理prefixKey\n    this.config.prefixKey = formattedPrefix(this.config.prefixKey)\n    // 域名\n    if (!this.config.host) {\n      out.access(`未指定域名host，将使用测试域名：http://${this.config.bucket}.test.upcdn.net`)\n      this.config.host = `http://${this.config.bucket}.test.upcdn.net`\n    }\n    this.imgClient = new upyun.Client(\n      new upyun.Service(this.config.bucket, this.config.user, this.config.password),\n    )\n  }\n\n  /**\n   * 检查图床是否已经存在图片，存在则返回url,不存在返回空\n   * @param fileName\n   */\n  async hasImage(fileName: string): Promise<string | undefined> {\n    if (!this.imgClient) {\n      await this.init()\n    }\n    try {\n      const res = await this.imgClient.headFile(`${this.config.prefixKey}${fileName}`)\n      if (res) {\n        return `${this.config.host}/${this.config.prefixKey}${fileName}`\n      } else {\n        return undefined\n      }\n    } catch (e: any) {\n      out.debug(`图片不存在: ${e.message}`)\n      return undefined\n    }\n  }\n\n  /**\n   * 上传图片到图床\n   * @param imgBuffer\n   * @param fileName\n   */\n  async uploadImg(imgBuffer: Buffer, fileName: string): Promise<string | undefined> {\n    if (!this.imgClient) {\n      await this.init()\n    }\n    try {\n      const res = await this.imgClient.putFile(`${this.config.prefixKey}${fileName}`, imgBuffer)\n      if (res) {\n        return `${this.config.host}/${this.config.prefixKey}${fileName}`\n      } else {\n        return undefined\n      }\n    } catch (e: any) {\n      out.warning(`上传图片失败，请检查: ${e.message}`)\n      out.debug(e)\n      return undefined\n    }\n  }\n}\n\nexport default UPClient\n","import { GithubConfig } from './types'\nimport { out, request, RequestOptions } from '@elog/shared'\nimport { formattedPrefix, getSecretExt } from './utils'\n\n// Github图床\nclass GithubClient {\n  config: GithubConfig\n  /** 是否初始化结束 */\n  isInit?: boolean\n\n  constructor(config: GithubConfig) {\n    this.config = config\n    // 尝试初始化Github配置\n    void this.init()\n  }\n\n  async init() {\n    if (!this.config.host) {\n      out.access('未指定加速域名，将使用默认域名：https://raw.githubusercontent.com')\n    } else if (this.config.host?.includes('cdn.jsdelivr.net')) {\n      // 如果指定了加速域名\n      this.config.host = 'https://cdn.jsdelivr.net'\n    }\n    // 判断是否开启拓展点\n    if (this.config.secretExt) {\n      // 如果开了就从拓展点读取\n      this.config = await getSecretExt(this.config)\n    } else {\n      // 如果没开拓展点，就从配置文件/环境变量中读取\n      this.config = {\n        ...this.config,\n        token: this.config.token || process.env.GITHUB_TOKEN!,\n      }\n    }\n    if (!this.config.token || !this.config.user || !this.config.repo) {\n      out.err('缺少Github 配置信息')\n      process.exit(-1)\n    }\n    // 处理prefixKey\n    this.config.prefixKey = formattedPrefix(this.config.prefixKey)\n    this.isInit = true\n  }\n\n  async _fetch(\n    fileName: string,\n    options: RequestOptions,\n    base64File?: string,\n  ): Promise<string | undefined> {\n    if (!this.isInit) {\n      await this.init()\n    }\n    const path = `https://api.github.com/repos/${this.config.user}/${this.config.repo}/contents/${this.config.prefixKey}${fileName}`\n    const data = base64File && {\n      message: 'Upload by elog',\n      branch: this.config.branch || 'master',\n      content: base64File,\n    }\n    const method = options.method\n    try {\n      const result = await request<any>(path, {\n        data,\n        headers: {\n          Authorization: `Bearer ${this.config.token}`,\n        },\n        method,\n      })\n      if (result.status === 409) {\n        out.warning('图片上传失败', '由于github并发问题，图片上传失败')\n      } else if (result.status === 200 || result.status === 201) {\n        if (this.config.host) {\n          return `${this.config.host}/gh/${this.config.user}/${this.config.repo}/${this.config.prefixKey}${fileName}`\n        } else if (method === 'GET') {\n          return result.data.download_url as string\n        } else {\n          return result.data.content.download_url as string\n        }\n      } else {\n        if (base64File) {\n          if (result.data?.message === 'Bad credentials') {\n            // token 配置错误\n            out.warning(\n              '请求失败',\n              'Github Token 配置错误，配置文档：https://elog.1874.cool/notion/gvnxobqogetukays#github',\n            )\n          } else {\n            out.warning('请求失败', JSON.stringify(result.data))\n          }\n        } else {\n          out.debug('NOT FOUND', JSON.stringify(result.data))\n        }\n      }\n    } catch (e: any) {\n      if (base64File) {\n        out.warning('请求失败', e.message)\n        out.debug(e)\n      } else {\n        out.debug(e)\n      }\n    }\n  }\n\n  /**\n   * 检查图床是否已经存在图片，存在则返回url,不存在返回空\n   * @param fileName\n   */\n  async hasImage(fileName: string): Promise<string | undefined> {\n    return await this._fetch(fileName, { method: 'GET' })\n  }\n\n  /**\n   * 上传图片到图床\n   * @param imgBuffer\n   * @param fileName\n   */\n  async uploadImg(imgBuffer: Buffer, fileName: string): Promise<string | undefined> {\n    const base64File = imgBuffer.toString('base64')\n    return this._fetch(fileName, { method: 'PUT' }, base64File)\n  }\n}\n\nexport default GithubClient\n","// 七牛云图床\nimport * as qiniu from 'qiniu'\nimport { QiniuConfig } from './types'\nimport { out } from '@elog/shared'\nimport { formattedPrefix, getSecretExt } from './utils'\n\nclass QiNiuClient {\n  config: QiniuConfig\n  /** 是否初始化结束 */\n  isInit?: boolean\n  uploadToken?: string\n  bucketManager?: qiniu.rs.BucketManager\n  formUploader?: qiniu.form_up.FormUploader\n  putExtra?: qiniu.form_up.PutExtra\n\n  constructor(config: QiniuConfig) {\n    this.config = config\n    // 尝试初始化实例\n    void this.init()\n  }\n\n  /**\n   * 初始化配置\n   */\n  async init() {\n    // 判断是否开启拓展点\n    if (this.config.secretExt) {\n      // 如果开了就从拓展点读取\n      this.config = await getSecretExt(this.config)\n    } else {\n      // 如果没开拓展点，就从配置文件/环境变量中读取\n      this.config = {\n        ...this.config,\n        secretId: this.config.secretId || process.env.QINIU_SECRET_ID!,\n        secretKey: this.config.secretKey || process.env.QINIU_SECRET_KEY!,\n      }\n    }\n    if (!this.config.secretId || !this.config.secretKey) {\n      out.err('缺少七牛云密钥信息')\n      process.exit(-1)\n    }\n    // 处理prefixKey\n    this.config.prefixKey = formattedPrefix(this.config.prefixKey)\n    if (!this.config.host) {\n      out.err('使用七牛云时，需要指定域名host')\n      process.exit(-1)\n    }\n    const mac = new qiniu.auth.digest.Mac(this.config.secretId, this.config.secretKey)\n    const putPolicy = new qiniu.rs.PutPolicy({ scope: this.config.bucket }) // 配置\n    this.uploadToken = putPolicy.uploadToken(mac) // 获取上传凭证\n    const qiniuConfig = new qiniu.conf.Config({\n      zone: qiniu.zone[this.config.region as keyof typeof qiniu.zone],\n    })\n\n    // 空间对应的机房\n    this.formUploader = new qiniu.form_up.FormUploader(qiniuConfig)\n    this.bucketManager = new qiniu.rs.BucketManager(mac, qiniuConfig)\n    this.putExtra = new qiniu.form_up.PutExtra()\n    this.isInit = true\n  }\n\n  /**\n   * 检查图床是否已经存在图片，存在则返回url,不存在返回空\n   *\n   * @param {string} fileName 文件名\n   * @return {Promise<string>} 图片url\n   */\n  async hasImage(fileName: string): Promise<string | undefined> {\n    if (!this.isInit) {\n      await this.init()\n    }\n    return await new Promise<string | undefined>((resolve) => {\n      this.bucketManager?.stat(\n        this.config.bucket,\n        `${this.config.prefixKey}${fileName}`,\n        (err, _respBody, respInfo) => {\n          if (err) {\n            out.debug(`检查图片信息时出错: ${err.message}`)\n            resolve(undefined)\n          } else {\n            if (respInfo.statusCode === 200) {\n              resolve(`${this.config.host}/${this.config.prefixKey}${fileName}`)\n            } else {\n              out.debug('检查图片信息时出错')\n              out.debug(JSON.stringify(respInfo))\n              resolve(undefined)\n            }\n          }\n        },\n      )\n    })\n  }\n\n  /**\n   * 上传图片到图床\n   * @param imgBuffer\n   * @param fileName\n   */\n  async uploadImg(imgBuffer: Buffer, fileName: string): Promise<string | undefined> {\n    if (!this.isInit) {\n      await this.init()\n    }\n    return await new Promise<string | undefined>((resolve) => {\n      this.formUploader?.put(\n        this.uploadToken!,\n        `${this.config.prefixKey}${fileName}`,\n        imgBuffer,\n        this.putExtra!,\n        (respErr, _respBody, respInfo) => {\n          if (respErr) {\n            out.debug(`上传图片失败: ${respErr.message}`)\n          } else if (respInfo.statusCode === 200) {\n            resolve(`${this.config.host}/${this.config.prefixKey}${fileName}`)\n          } else {\n            out.debug('上传图片失败')\n            out.debug(JSON.stringify(respInfo))\n            resolve(undefined)\n          }\n        },\n      )\n    })\n  }\n}\n\nexport default QiNiuClient\n","import { GetImagePath, ImgLocalConfig } from './types'\nimport * as fs from 'fs'\nimport path from 'path'\nimport mkdirp from 'mkdirp'\nimport { out } from '@elog/shared'\nimport { DocDetail } from '@elog/types'\nimport { getImagePathExt } from './utils'\n\nclass LocalClient {\n  config: ImgLocalConfig\n  getImagePath: GetImagePath\n  constructor(config: ImgLocalConfig) {\n    this.config = config\n    this.getImagePath = this.initImagePath()\n  }\n\n  initImagePath() {\n    if (this.config.imagePathExt) {\n      return getImagePathExt(this.config.imagePathExt)\n    } else {\n      return this.genImagePath\n    }\n  }\n\n  genImagePath(doc: DocDetail, outputDir: string) {\n    // const dirPath = path.resolve(process.cwd(), this.config.outputDir)\n    const dirPath = outputDir\n    let prefixKey = ''\n    if (this.config.pathFollowDoc) {\n      // 1.拿到当前文档的路径\n      const docPath = doc.docPath as string\n      // 2.拿到图片输出路径\n      // 3.根据文档路径计算图片的相对路径\n      // 假如文档路径为 ./docs/首页/首页下的文档.md\n      // 图片输出路径为 ./docs/images\n      // 图片前缀为../../images\n      prefixKey = path.relative(docPath, dirPath)\n    } else {\n      prefixKey = this.config.prefixKey || '/'\n    }\n    return {\n      dirPath,\n      prefixKey,\n    }\n  }\n\n  /**\n   * 检查是否已经存在图片，存在则返回url,不存在返回undefined\n   * TODO 为了性能，本地也需要维护一个文件的缓存MAP，这样不会重复进行文件查找和写入\n   * TODO 当前阶段可以忽略检查本地文件是否存在，直接覆盖写入即可\n   */\n  async hasImage(): Promise<string | undefined> {\n    return undefined\n  }\n\n  /**\n   * 上传图片到图床\n   * @param imgBuffer\n   * @param imageName\n   * @param doc\n   */\n  async uploadImg(\n    imgBuffer: Buffer,\n    imageName: string,\n    doc: DocDetail,\n  ): Promise<string | undefined> {\n    try {\n      let { dirPath, prefixKey } = this.getImagePath(doc, this.config.outputDir)\n      if (!prefixKey.endsWith('/')) {\n        prefixKey = prefixKey + '/'\n      }\n      const fullDirPath = path.resolve(process.cwd(), dirPath)\n      mkdirp.sync(dirPath)\n      const filePath = path.resolve(fullDirPath, imageName)\n      fs.writeFileSync(filePath, imgBuffer)\n      // 计算root和output的相对路径\n      return prefixKey + imageName\n    } catch (e: any) {\n      out.err('写入错误', e.message)\n      out.debug(e)\n    }\n  }\n}\n\nexport default LocalClient\n","import CosClient from './cos'\nimport OssClient from './oss'\nimport UPClient from './upyun'\nimport GithubClient from './github'\nimport QiniuClient from './qiniu'\nimport LocalClient from './local'\nimport { DocDetail } from '@elog/types'\nimport {\n  CosConfig,\n  GithubConfig,\n  ImageConfig,\n  OssConfig,\n  QiniuConfig,\n  UPYunConfig,\n  ImgLocalConfig,\n} from './types'\nimport { ImagePlatformEnum } from './const'\nimport { getPlugin } from './utils'\n\nclass ImgBedClient {\n  config: ImageConfig\n  imageClient: any\n\n  constructor(config: ImageConfig) {\n    this.config = config\n    this.imageClient = this.getImageBedInstance(this.config.platform)\n  }\n\n  /**\n   * 获取图床对象的实例\n   *\n   * @param {string} platform 图床类型\n   * @return {any} 图床实例\n   */\n  getImageBedInstance(platform: ImagePlatformEnum | string): any {\n    if (this.config.plugin) {\n      return getPlugin(this.config.plugin, this.config)\n    }\n    switch (platform) {\n      case ImagePlatformEnum.COS:\n        const cosConfig = this.config.cos as CosConfig\n        return new CosClient(cosConfig)\n      case ImagePlatformEnum.OSS:\n        const ossConfig = this.config.oss as OssConfig\n        return new OssClient(ossConfig)\n      case ImagePlatformEnum.QINIU:\n        const qiniuConfig = this.config.qiniu as QiniuConfig\n        return new QiniuClient(qiniuConfig)\n      case ImagePlatformEnum.UPYUN:\n        const upyunConfig = this.config.upyun as UPYunConfig\n        return new UPClient(upyunConfig)\n      case ImagePlatformEnum.GITHUB:\n        const githubConfig = this.config.github as GithubConfig\n        return new GithubClient(githubConfig)\n      default:\n        const defaultConfig = this.config.local as ImgLocalConfig\n        return new LocalClient(defaultConfig)\n    }\n  }\n\n  /**\n   * 检查图床是否已经存在图片，存在则返回url\n   * @param fileName\n   */\n  async hasImage(fileName: string): Promise<string | undefined> {\n    return this.imageClient.hasImage(fileName)\n  }\n\n  /**\n   * 上传图片到图床\n   * @param imgBuffer\n   * @param fileName\n   * @param doc\n   */\n  async uploadImg(\n    imgBuffer: Buffer,\n    fileName: string,\n    doc: DocDetail,\n  ): Promise<string | undefined> {\n    return this.imageClient.uploadImg(imgBuffer, fileName, doc)\n  }\n}\n\nexport default ImgBedClient\n","import ImgClient from './client'\n\nexport default ImgClient\n","import ImgClient from './platform'\nimport { ImageConfig } from './platform/types'\nimport {\n  generateUniqueId,\n  getFileType,\n  getPicBufferFromURL,\n  getUrl,\n  getUrlListFromContent,\n  ImageFail,\n  out,\n} from '@elog/shared'\nimport { DocDetail } from '@elog/types'\nimport { ImagePlatformEnum } from './platform/const'\nimport { ImageSource, ImageUrl } from './types'\n\nclass ImageUploader {\n  config: ImageConfig\n  ctx: ImgClient\n\n  constructor(config: ImageConfig) {\n    this.config = config\n    this.ctx = new ImgClient(config)\n  }\n\n  /**\n   * 上传\n   * @param urlList\n   * @param doc\n   * @param failBack\n   */\n  async upload(urlList: ImageUrl[], doc: DocDetail, failBack?: (image: ImageUrl) => void) {\n    const toUploadURLs = urlList.map(async (image) => {\n      return await new Promise<ImageSource | undefined>(async (resolve) => {\n        try {\n          // 生成文件名\n          const fileName = generateUniqueId(image.url)\n          // 生成文件名后缀\n          const fileType = await getFileType(image.url)\n          if (!fileType) {\n            out.warning(`${doc?.properties?.title} 存在获取图片类型失败，跳过：${image.url}`)\n            resolve(undefined)\n            return\n          }\n          // 完整文件名\n          const fullName = `${fileName}.${fileType.type}`\n          // out.info('处理图片', `生成文件名: ${fullName}`)\n          // 检查图床是否存在该文件\n          let exist = await this.ctx.hasImage(fullName)\n          if (exist) {\n            out.info('忽略上传', `图片已存在: ${exist}`)\n            // 图片已存在\n            resolve({\n              fileName: fullName,\n              original: image.original,\n              url: exist,\n              upload: false,\n            })\n          } else {\n            const buffer = await getPicBufferFromURL(image.original)\n            if (!buffer) {\n              failBack?.(image)\n              resolve(undefined)\n              return\n            }\n            // 上传图片\n            resolve({\n              buffer,\n              fileName: fullName,\n              original: image.original,\n              upload: true,\n            })\n          }\n        } catch (err: any) {\n          resolve(undefined)\n        }\n      })\n    })\n    const toUploadImgs = (await Promise.all(toUploadURLs).then((imgs) =>\n      imgs.filter((img) => img !== undefined),\n    )) as ImageSource[]\n    let output: ImageUrl[] = []\n\n    for (const img of toUploadImgs) {\n      let newUrl: string | undefined = ''\n      if (img.upload) {\n        newUrl = await this.ctx.uploadImg(img.buffer!, img.fileName, doc)\n        if (newUrl) {\n          if (this.config.platform === ImagePlatformEnum.LOCAL) {\n            // out.info('生成图片', newUrl)\n          } else {\n            out.info('上传成功', newUrl)\n          }\n          output.push({ original: img.original, url: newUrl })\n        } else {\n          out.warning('上传失败：' + img.fileName + ' 请检查图床配置')\n        }\n      } else {\n        output.push({ original: img.original, url: img.url! })\n      }\n    }\n    if (output.length) {\n      output\n        .filter((item) => item.url && item.url !== item.original)\n        .map((item) => {\n          return {\n            original: item.original,\n            url: item.url,\n          }\n        })\n      return output\n    }\n  }\n\n  /**\n   * 替换图片\n   * @param articleList\n   */\n  async replaceImages(articleList: DocDetail[]) {\n    // 遍历文章列表\n    for (let i = 0; i < articleList.length; i++) {\n      const articleInfo = articleList[i]\n      // 获取图片URL列表\n      const urlList = getUrlListFromContent(articleInfo.body)\n      if (urlList.length) {\n        // 上传图片\n        const urls = await this.upload(urlList, articleInfo, () => {\n          articleInfo.needUpdate = ImageFail\n        })\n        if (urls?.length) {\n          // 替换文章中的图片\n          urls.forEach((item) => {\n            out.info('图片替换', `${item.url}`)\n            articleInfo.body = articleInfo.body.replace(item.original, item.url)\n          })\n        }\n      }\n    }\n    return articleList\n  }\n\n  /**\n   * 从图片链接上传到图床/下载到本地，适用于自定义上传图片\n   * @param originalUrl\n   * @param doc\n   */\n  async uploadImageFromUrl(originalUrl: string, doc: DocDetail) {\n    const image = getUrl(originalUrl)\n    // NOTE 这里复用之前的upload可能导致下载图片到本地时，当开启了图片随文档路径时，这里的路径也会随文档路径变化\n    // NOTE 解决办法：几乎没人在支持 front-matter 的博客文档开启图片随文档路径，真要有的话，可以让插件自己截取掉路径，自行处理\n    const urls = await this.upload([image], doc)\n    return urls?.[0]?.url\n  }\n\n  /**\n   * 从飞书下载图片\n   * @param articleList\n   * @param feishuClient\n   * @param doc\n   */\n\n  async replaceImagesFromFeiShu(articleList: DocDetail[], feishuClient: any) {\n    // 遍历文章列表\n    for (let i = 0; i < articleList.length; i++) {\n      const articleInfo = articleList[i]\n      // 获取图片URL列表\n      const urlList = getUrlListFromContent(articleInfo.body)\n      if (urlList.length) {\n        // 上传图片\n        const urls = await this.uploadFromFeiShu(urlList, feishuClient, articleInfo, () => {\n          articleInfo.needUpdate = ImageFail\n        })\n        if (urls?.length) {\n          // 替换文章中的图片\n          urls.forEach((item) => {\n            out.info('图片替换', `${item.url}`)\n            articleInfo.body = articleInfo.body.replace(item.original, item.url)\n          })\n        }\n      }\n    }\n    return articleList\n  }\n  async uploadFromFeiShu(\n    urlList: ImageUrl[],\n    feishuClient: any,\n    doc: DocDetail,\n    failBack?: (image: ImageUrl) => void,\n  ) {\n    const toUploadURLs = urlList.map(async (image) => {\n      return await new Promise<ImageSource | undefined>(async (resolve) => {\n        try {\n          // 从飞书下载图片\n          const res = await feishuClient.getResourceItem(image.url)\n          // 完整文件名\n          const fullName = res.name\n          // out.info('处理图片', `生成文件名: ${fullName}`)\n          // 检查图床是否存在该文件\n          let exist = await this.ctx.hasImage(fullName)\n          if (exist) {\n            out.info('忽略上传', `图片已存在: ${exist}`)\n            // 图片已存在\n            resolve({\n              fileName: fullName,\n              original: image.original,\n              url: exist,\n              upload: false,\n            })\n          } else {\n            const buffer = res.buffer\n            if (!buffer) {\n              failBack?.(image)\n              resolve(undefined)\n              return\n            }\n            // 上传图片\n            resolve({\n              buffer,\n              fileName: fullName,\n              original: image.original,\n              upload: true,\n            })\n          }\n        } catch (err: any) {\n          resolve(undefined)\n        }\n      })\n    })\n    const toUploadImgs = (await Promise.all(toUploadURLs).then((imgs) =>\n      imgs.filter((img) => img !== undefined),\n    )) as ImageSource[]\n    let output: ImageUrl[] = []\n\n    for (const img of toUploadImgs) {\n      let newUrl: string | undefined = ''\n      if (img.upload) {\n        newUrl = await this.ctx.uploadImg(img.buffer!, img.fileName, doc)\n        if (newUrl) {\n          if (this.config.platform === ImagePlatformEnum.LOCAL) {\n            // out.info('生成图片', newUrl)\n          } else {\n            out.info('上传成功', newUrl)\n          }\n          output.push({ original: img.original, url: newUrl })\n        } else {\n          out.warning('上传失败：' + img.fileName + ' 请检查图床配置')\n        }\n      } else {\n        output.push({ original: img.original, url: img.url! })\n      }\n    }\n    if (output.length) {\n      output\n        .filter((item) => item.url && item.url !== item.original)\n        .map((item) => {\n          return {\n            original: item.original,\n            url: item.url,\n          }\n        })\n      return output\n    }\n  }\n}\n\nexport default ImageUploader\n","import ImageUploader from './core'\n\nexport * from './platform/types'\nexport * from './types'\n\nexport default ImageUploader\n"],"mappings":"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","names":["out","out","out","out","out","out","out","out","path","out","out","fs","path","out","path","out","out","out"]}