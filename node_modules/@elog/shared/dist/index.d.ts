import { RequestOptions, HttpClientResponse } from 'urllib';
export { HttpClientResponse, RequestOptions } from 'urllib';

declare const ImageFail = 1;
declare const DocFail = 2;

declare const out: {
    access(head: string, content?: string): void;
    info(head: string, content?: string): void;
    warning(head: string, content?: string): void;
    err(head: string, content?: string): void;
    debug(head: string, content?: string): void;
};

/**
 * 网络请求封装
 * @param url
 * @param reqOpts
 */
declare const request: <T>(url: string, reqOpts?: RequestOptions) => Promise<HttpClientResponse<T>>;
declare function delay(ms?: number): Promise<void>;

interface ImageUrl {
    url: string;
    original: string;
}
type PackageExt = string | Function;

/**
 * 通过图片url获取文件type, 不含"."
 * @param url
 * @param needError
 */
declare const getFileTypeFromUrl: (url: string, needError?: boolean) => {
    name: string;
    type: string;
} | undefined;
declare const getFileTypeFromBuffer: (buffer: Buffer) => FileType | undefined;
interface FileType {
    type: string;
    name?: string;
}
/**
 * 获取文件类型
 * @param url
 */
declare const getFileType: (url: string) => Promise<FileType | undefined>;
/**
 * 根据文件内容获取唯一文件名
 * @param imgBuffer
 */
declare function getFileName(imgBuffer: Buffer): Promise<string>;
/**
 * 去除图片链接中多余的参数
 * @param originalUrl
 */
declare const cleanParameter: (originalUrl: string) => string;
/**
 * 从 md 文档获取图片链接列表
 * @param content
 */
declare const getUrlListFromContent: (content: string) => ImageUrl[];
/**
 * 从 URL 链接获取干净的 url
 * @param url
 */
declare const getUrl: (url: string) => {
    original: string;
    url: string;
};
/**
 * 根据url生成唯一文件名
 * @param url
 * @param length 长度截取
 */
declare const generateUniqueId: (url: string, length?: number) => string;
/**
 * 获取图片buffer
 */
declare const getPicBufferFromURL: (url: string) => Promise<Buffer | undefined>;

/**
 * 解析包
 * @param pluginPath
 */
declare const resolvePackageExtPath: (pluginPath: string) => string;
/**
 * 从配置路径获取插件/拓展
 * @param packageExt
 */
declare const getPackage: (packageExt: PackageExt) => any;

/**
 * 获取毫秒级时间戳
 * @param time 时间
 */
declare const getTimes: (time: any) => number;
/**
 * 格式化时间
 * @param time 时间
 */
declare const timeFormat: (time: any) => string;
declare const isTime: (time: any) => boolean;

export { DocFail, ImageFail, cleanParameter, delay, generateUniqueId, getFileName, getFileType, getFileTypeFromBuffer, getFileTypeFromUrl, getPackage, getPicBufferFromURL, getTimes, getUrl, getUrlListFromContent, isTime, out, request, resolvePackageExtPath, timeFormat };
