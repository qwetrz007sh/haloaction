{"version":3,"sources":["../../src/out.ts","../../src/const.ts","../../src/request.ts","../../src/index.ts","../../src/utils/image.ts","../../src/utils/qetag.js","../../src/utils/package.ts","../../src/utils/time.ts"],"sourcesContent":["import * as shell from 'shelljs'\nimport chalk, { Chalk } from 'chalk'\nimport { chunk } from 'lodash'\nimport { LogLevel, __columns } from './const'\nimport * as process from 'process'\n\n/**\n * 辅助输出过程日志\n *\n * @export\n * @param {LogLevel} level\n * @param {string} head\n * @param {string} [content]\n */\nexport function println(level: LogLevel, head: string, content?: string) {\n  const color: Record<LogLevel, Chalk> = {\n    [LogLevel.ACCESS]: chalk.blue,\n    [LogLevel.INFO]: chalk.green,\n    [LogLevel.WARNING]: chalk.yellow,\n    [LogLevel.ERROR]: chalk.red,\n    [LogLevel.DEBUG]: chalk.magenta,\n  }\n  if (typeof head === 'object' && !content) {\n    try {\n      head = JSON.stringify(head)\n    } catch (e) {\n      console.log(head)\n      return\n    }\n    shell.echo(color[level](head))\n  }\n  if (!head) {\n    if (!content) {\n      return\n    }\n    head = content\n  }\n\n  const MIN_HEAD_LENGTH = 10\n  const emptyHead = head.replace(/[\\u4e00-\\u9fa5]/g, 'aa')\n\n  const headLength = Math.max(emptyHead.length + 2, MIN_HEAD_LENGTH)\n  const fillLength = Math.max(MIN_HEAD_LENGTH - emptyHead.length, 0)\n\n  if (!content) {\n    shell.echo(color[level](head))\n    return\n  }\n\n  if (content && typeof content !== 'string') {\n    shell.echo(color[level](head))\n    shell.echo(content)\n    return\n  }\n\n  ;(content ?? '')\n    .replace('/\\r\\n/g', '\\n')\n    .split('\\n')\n    .map((c) => chunk(c, __columns - headLength).map((str) => str.join('')))\n    .reduce((r, c) => r.concat(c))\n    .forEach((str, i) => {\n      const _head = i ? ' '.repeat(headLength) : color[level](`${head}${' '.repeat(fillLength)}`)\n      shell.echo(_head + str)\n    })\n}\n\nconst out = {\n  access(head: string, content?: string) {\n    println(LogLevel.ACCESS, head, content)\n  },\n  info(head: string, content?: string) {\n    println(LogLevel.INFO, head, content)\n  },\n  warning(head: string, content?: string) {\n    println(LogLevel.WARNING, head, content)\n  },\n  err(head: string, content?: string) {\n    println(LogLevel.ERROR, head, content)\n  },\n  debug(head: string, content?: string) {\n    process.env.DEBUG && println(LogLevel.DEBUG, head, content)\n  },\n}\n\nexport default out\n","/** 当前命令执行目录 */\nexport const __cwd = process.cwd()\nexport const __columns = process?.stdout?.columns ?? 120\n\nexport enum LogLevel {\n  ACCESS,\n  INFO,\n  WARNING,\n  ERROR,\n  DEBUG,\n}\n\nexport const ImageFail = 0b0001\nexport const DocFail = 0b0010\n","import { HttpClientResponse, request as req, RequestOptions } from 'urllib'\nimport out from './out'\n\n/**\n * 网络请求封装\n * @param url\n * @param reqOpts\n */\nexport const request = async <T>(\n  url: string,\n  reqOpts?: RequestOptions,\n): Promise<HttpClientResponse<T>> => {\n  const opts: RequestOptions = {\n    contentType: 'json',\n    dataType: 'json',\n    headers: {\n      'User-Agent': 'Elog',\n      ...reqOpts?.headers,\n    },\n    gzip: true,\n    // 超时时间 60s\n    timeout: Number(process.env?.REQUEST_TIMEOUT || 60000) || 60000,\n    ...reqOpts,\n  }\n  out.debug(`API请求URL: ${url}`)\n  if (url.includes('api.github.com')) {\n    // Github Base64 输出太多，只输出headers\n    out.debug(`API请求Header参数: ${JSON.stringify(reqOpts?.headers || {})}`)\n  } else {\n    out.debug(`API请求参数: ${JSON.stringify(opts)}`)\n  }\n  return req(url, opts)\n}\n\nexport async function delay(ms = 500) {\n  await new Promise((resolve) => setTimeout(resolve, ms))\n}\n","import out from './out'\nimport { request, delay } from './request'\nimport { HttpClientResponse, RequestOptions } from 'urllib'\n\nexport * from './utils/image'\nexport * from './utils/package'\nexport * from './utils/time'\nexport { out, delay, request, RequestOptions, HttpClientResponse }\n\nexport { ImageFail, DocFail } from './const'\n","import imgSize from 'image-size'\nimport { ImageUrl } from '../types'\n// @ts-ignore\nimport { getEtag } from './qetag.js'\nimport { request } from '../request'\nimport out from '../out'\nimport { createHash } from 'node:crypto'\n\n/**\n * 通过图片url获取文件type, 不含\".\"\n * @param url\n * @param needError\n */\nexport const getFileTypeFromUrl = (url: string, needError = true) => {\n  const reg = /[^/]+(?!.*\\/)/g\n  const imgName = url\n    .match(reg)\n    ?.filter((item) => item)\n    .pop()\n  // 去除#\n  let filename = ''\n  let filetype = ''\n  if (imgName) {\n    const imgL = imgName.split('.')\n    if (imgL.length > 1) {\n      filename = imgName.split('.')[0]\n      filetype = imgName.split('.')[1].split('?')[0].split('#')[0]\n      return {\n        name: filename,\n        type: filetype,\n      }\n    } else {\n      needError && out.warning(`获取文件名失败，跳过: ${url}`)\n    }\n  } else {\n    needError && out.warning(`获取文件名失败，跳过: ${url}`)\n  }\n}\n\nexport const getFileTypeFromBuffer = (buffer: Buffer): FileType | undefined => {\n  const fileType = imgSize(buffer).type\n  if (fileType) {\n    return {\n      type: fileType,\n    }\n  }\n}\n\ninterface FileType {\n  type: string\n  name?: string\n}\n\n/**\n * 获取文件类型\n * @param url\n */\nexport const getFileType = async (url: string) => {\n  let fileType: FileType | undefined = getFileTypeFromUrl(url, false)\n  if (!fileType) {\n    // 尝试从 buffer 中获取\n    const buffer = await getPicBufferFromURL(url)\n    if (buffer) {\n      fileType = getFileTypeFromBuffer(buffer)\n      return fileType\n    }\n  }\n  return fileType\n}\n\n/**\n * 根据文件内容获取唯一文件名\n * @param imgBuffer\n */\nexport async function getFileName(imgBuffer: Buffer): Promise<string> {\n  return new Promise((resolve) => {\n    getEtag(imgBuffer, (hash: string) => {\n      resolve(hash)\n    })\n  })\n}\n\n/**\n * 去除图片链接中多余的参数\n * @param originalUrl\n */\nexport const cleanParameter = (originalUrl: string) => {\n  let newUrl = originalUrl\n  // 去除#号\n  const indexPoundSign = originalUrl.indexOf('#')\n  if (indexPoundSign !== -1) {\n    newUrl = originalUrl.substring(0, indexPoundSign)\n  }\n  // 去除?号\n  const indexQuestionMark = originalUrl.indexOf('?')\n  if (indexQuestionMark !== -1) {\n    newUrl = originalUrl.substring(0, indexQuestionMark)\n  }\n  return newUrl\n}\n\n/**\n * 从 md 文档获取图片链接列表\n * @param content\n */\nexport const getUrlListFromContent = (content: string) => {\n  const markdownURLList = (content.match(/!\\[[^\\]]*\\]\\(([^)]+)\\)/g) || [])\n    .map((item: string) => {\n      const res = item.match(/\\!\\[.*\\]\\((.*?)( \".*\")?\\)/)\n      if (res) {\n        const url = res[1]\n        // 过滤 Base64 图片\n        if (url.startsWith('data:')) return undefined\n        // 去除#?号\n        return {\n          original: url,\n          url: cleanParameter(url),\n        }\n      }\n      return undefined\n    })\n    .filter((item) => item) as ImageUrl[]\n  const imageTagURLList = (content.match(/<img.*?(?:>|\\/>)/gi) || [])\n    .map((item: string) => {\n      const res = item.match(/src=[\\'\\\"]?([^\\'\\\"]*)[\\'\\\"]?/i)\n      if (res) {\n        const url = res[1]\n        // 过滤 Base64 图片\n        if (url.startsWith('data:')) return undefined\n        // 去除#?号\n        return {\n          original: url,\n          url: cleanParameter(url),\n        }\n      }\n      return undefined\n    })\n    .filter((item) => item) as ImageUrl[]\n  return markdownURLList.concat(imageTagURLList)\n}\n\n/**\n * 从 URL 链接获取干净的 url\n * @param url\n */\nexport const getUrl = (url: string) => {\n  return {\n    original: url,\n    url: cleanParameter(url),\n  }\n}\n\n/**\n * 根据url生成唯一文件名\n * @param url\n * @param length 长度截取\n */\nexport const generateUniqueId = (url: string, length?: number) => {\n  const hash = createHash('md5').update(url).digest('hex')\n  if (length) {\n    return hash.substring(0, length)\n  }\n  return hash\n}\n\n/**\n * 获取图片buffer\n */\nexport const getPicBufferFromURL = async (url: string) => {\n  try {\n    let referer = ''\n    if (url.includes('cdn.flowus.cn')) {\n      referer = 'https://flowus.cn/'\n    }\n    const res = await request<Buffer>(url, {\n      dataType: 'arraybuffer',\n      headers: {\n        referer,\n      },\n    })\n    out.info('下载成功', url)\n    return res.data\n  } catch (e: any) {\n    out.warning(`下载失败: ${url}，${e.message}`)\n    out.debug(e)\n  }\n}\n","// 计算文件的eTag，参数为buffer或者readableStream或者文件路径\nexport function getEtag(buffer, callback) {\n  // 判断传入的参数是buffer还是stream还是filepath\n  let mode = 'buffer'\n\n  if (typeof buffer === 'string') {\n    // eslint-disable-next-line no-param-reassign\n    buffer = require('fs').createReadStream(buffer)\n    mode = 'stream'\n  } else if (buffer instanceof require('stream')) {\n    mode = 'stream'\n  }\n\n  // sha1算法\n  const sha1 = function (content) {\n    const crypto = require('crypto')\n    const sha1 = crypto.createHash('sha1')\n    sha1.update(content)\n    return sha1.digest()\n  }\n\n  // 以4M为单位分割\n  const blockSize = 4 * 1024 * 1024\n  const sha1String = []\n  let prefix = 0x16\n  let blockCount = 0\n\n  // eslint-disable-next-line default-case\n  switch (mode) {\n    case 'buffer':\n      // eslint-disable-next-line\n      const bufferSize = buffer.length;\n      blockCount = Math.ceil(bufferSize / blockSize)\n\n      for (let i = 0; i < blockCount; i++) {\n        sha1String.push(sha1(buffer.slice(i * blockSize, (i + 1) * blockSize)))\n      }\n      process.nextTick(function () {\n        callback(calcEtag())\n      })\n      break\n    case 'stream':\n      // eslint-disable-next-line no-case-declarations\n      const stream = buffer\n      stream.on('readable', function () {\n        let chunk\n        // eslint-disable-next-line no-cond-assign\n        while ((chunk = stream.read(blockSize))) {\n          sha1String.push(sha1(chunk))\n          blockCount++\n        }\n      })\n      stream.on('end', function () {\n        callback(calcEtag())\n      })\n      break\n  }\n\n  function calcEtag() {\n    if (!sha1String.length) {\n      return 'Fto5o-5ea0sNMlW_75VgGJCv2AcJ'\n    }\n    let sha1Buffer = Buffer.concat(sha1String, blockCount * 20)\n\n    // 如果大于4M，则对各个块的sha1结果再次sha1\n    if (blockCount > 1) {\n      prefix = 0x96\n      sha1Buffer = sha1(sha1Buffer)\n    }\n\n    sha1Buffer = Buffer.concat([Buffer.from([prefix]), sha1Buffer], sha1Buffer.length + 1)\n\n    return sha1Buffer.toString('base64').replace(/\\//g, '_').replace(/\\+/g, '-')\n  }\n}\n","import path from 'path'\nimport fs from 'fs'\nimport { PackageExt } from '../types'\nimport out from '../out'\n\n/**\n * 解析包\n * @param pluginPath\n */\nexport const resolvePackageExtPath = (pluginPath: string) => {\n  const pluginLocalPath = path.resolve(process.cwd(), pluginPath)\n  // 判断路径是否存在\n  if (fs.existsSync(pluginLocalPath)) {\n    // 如果路径存在，说明是具体路径，直接返回\n    return pluginLocalPath\n  } else {\n    // 否则认为是包名，从 node_modules 中引入\n    return pluginPath\n    // 包不存在\n  }\n}\n\n/**\n * 从配置路径获取插件/拓展\n * @param packageExt\n */\nexport const getPackage = (packageExt: PackageExt) => {\n  try {\n    if (typeof packageExt === 'string') {\n      out.warning('注意', `正在使用插件/拓展点: ${packageExt}，请遵循插件/拓展开发规范`)\n      const packageLocalPath = resolvePackageExtPath(packageExt)\n      return require(packageLocalPath)\n      // return new PluginInstance(config)\n    }\n    if (typeof packageExt === 'function') {\n      out.warning('注意', `正在使用插件/拓展点: ${packageExt.name}，请遵循插件/拓展开发规范`)\n      return packageExt as any\n    }\n    out.err('插件/拓展点配置有误，请检查')\n    process.exit(1)\n  } catch (e: any) {\n    if (e.message.includes('Cannot find module')) {\n      out.err('插件/拓展点配置有误，请检查')\n    }\n    process.exit(1)\n  }\n}\n","import dayjs from 'dayjs'\nimport timezone from 'dayjs/plugin/timezone'\nimport utc from 'dayjs/plugin/utc'\nimport customParseFormat from 'dayjs/plugin/customParseFormat'\n\ndayjs.extend(utc)\ndayjs.extend(timezone)\ndayjs.extend(customParseFormat)\n\n/**\n * 获取毫秒级时间戳\n * @param time 时间\n */\nexport const getTimes = (time: any) => {\n  // 时区，默认 Asia/Shanghai\n  const timezone = process.env.TIME_ZONE || 'Asia/Shanghai'\n  if (typeof time === 'string') {\n    const hasTimezone = /[Zz]|[+-]\\d{2}:\\d{2}$/.test(time)\n    if (hasTimezone) {\n      // 如果有时区信息，按照字符串的时区，将其转成时间戳\n      return dayjs(time).valueOf()\n    } else {\n      // 如果没有时区信息，按照 Asia/Shanghai 时区，将其转成时间戳\n      return dayjs.tz(time, timezone).valueOf()\n    }\n  }\n  return dayjs(time).valueOf()\n}\n\n/**\n * 格式化时间\n * @param time 时间\n */\nexport const timeFormat = (time: any) => {\n  // 时区，默认 Asia/Shanghai\n  const timezone = process.env.TIME_ZONE || 'Asia/Shanghai'\n  // 格式化，默认YYYY-MM-DD HH:mm:ss\n  const format = process.env.TIME_FORMAT || 'YYYY-MM-DD HH:mm:ss'\n\n  return dayjs(time).tz(timezone).format(format)\n}\n\nexport const isTime = (time: any) => {\n  return dayjs(time).isValid()\n}\n"],"mappings":"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","names":["process","_a","HttpClientResponse","RequestOptions","sha1","chunk","_a","timezone"]}