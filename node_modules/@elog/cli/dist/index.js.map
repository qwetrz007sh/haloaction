{"version":3,"sources":["../src/run.ts","../src/scripts/init.ts","../src/utils/gen-config-file.ts","../src/utils/gen-env-file.ts","../src/scripts/sync.ts","../src/utils/utils.ts","../src/const/index.ts","../src/scripts/clean.ts","../src/utils/clean.ts","../src/scripts/upgrade.ts","../src/utils/run.ts","../src/utils/config.ts","../src/index.ts"],"names":["fs","path","out","pkgJson","config","answers"],"mappings":"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","sourcesContent":["import { program } from 'commander'\nimport init from './scripts/init'\nimport sync from './scripts/sync'\nimport clean from './scripts/clean'\nimport { out } from '@elog/shared'\nimport upgrade from './scripts/upgrade'\nimport { getPkgJSON } from './utils/utils'\nconst { pkgJson } = getPkgJSON()\n\nexport async function run() {\n  program\n    .version(pkgJson.version)\n    .command('init')\n    .option('-c --config <string>', 'rename config file,  default is elog.config.js')\n    .option('-e --env <string>', 'rename env file, default is .elog.env')\n    .description('init config')\n    .action((options) => {\n      try {\n        void init(options.config, options.env)\n      } catch (error: any) {\n        out.err('运行失败', error.message)\n        process.exit(1)\n      }\n    })\n\n  program\n    .version(pkgJson.version)\n    .command('sync')\n    .option('-c, --config <string>', 'use config with custom, default is elog.config.js')\n    .option('-a --cache <string>', 'use cache file name, default is elog.cache.json')\n    .option('-e, --env <string>', 'use env with custom')\n    .option('--full-cache', 'cache doc with full info')\n    .option('--disable-cache', 'sync doc without cache')\n    .option('--force', 'sync doc forced')\n    .option('--debug', 'enable debug')\n    .description('sync doc')\n    .action((options) => {\n      try {\n        void sync(\n          options.config,\n          options.cache,\n          options.env,\n          options.fullCache,\n          options.force,\n          options.disableCache,\n        )\n      } catch (error: any) {\n        out.err('运行失败', error.message)\n        process.exit(1)\n      }\n    })\n\n  program\n    .version(pkgJson.version)\n    .command('clean')\n    .option('-c --config <string>', 'assign config file name, default is elog.config.js')\n    .option('-a --cache <string>', 'assign cache file name, default is elog.cache.json')\n    .description('clean cache')\n    .action((options) => {\n      try {\n        void clean(options.config, options.cache)\n      } catch (error: any) {\n        out.err('运行失败', error.message)\n        process.exit(1)\n      }\n    })\n\n  program\n    .version(pkgJson.version)\n    .command('upgrade')\n    .description('upgrade version of @elog/cli self')\n    .action(() => {\n      try {\n        upgrade()\n      } catch (error: any) {\n        out.err('更新失败', error.message)\n        process.exit(1)\n      }\n    })\n\n  program.parse()\n}\n","import { out } from '@elog/shared'\nimport { genConfigFile } from '../utils/gen-config-file'\nimport { genEnvFile } from '../utils/gen-env-file'\n\nconst init = async (configName = 'elog.config.js', envName = '.elog.env') => {\n  genConfigFile(configName)\n  genEnvFile(envName)\n  out.access('初始化', '初始化成功')\n  out.warning('注意', `请将${envName} 文件加入.gitignore，防止密码等信息误提交`)\n  out.info('下一步', `配置${configName}和${envName}`)\n  out.info('请查阅Elog配置文档: https://elog.1874.cool/notion/config-catalog')\n}\n\nexport default init\n","import fs from 'fs'\n\nconst configJsStr =\n  'module.exports = {\\n' +\n  '  write: {\\n' +\n  \"    platform: 'yuque',\\n\" +\n  '    yuque: {\\n' +\n  '      token: process.env.YUQUE_TOKEN,\\n' +\n  '      login: process.env.YUQUE_LOGIN,\\n' +\n  '      repo: process.env.YUQUE_REPO,\\n' +\n  '      onlyPublic: false,\\n' +\n  '      onlyPublished: true,\\n' +\n  '    },\\n' +\n  \"    'yuque-pwd': {\\n\" +\n  '      username: process.env.YUQUE_USERNAME,\\n' +\n  '      password: process.env.YUQUE_PASSWORD,\\n' +\n  '      login: process.env.YUQUE_LOGIN,\\n' +\n  '      repo: process.env.YUQUE_REPO,\\n' +\n  '      onlyPublic: false,\\n' +\n  '      onlyPublished: true,\\n' +\n  '    },\\n' +\n  '    notion: {\\n' +\n  '      token: process.env.NOTION_TOKEN,\\n' +\n  '      databaseId: process.env.NOTION_DATABASE_ID,\\n' +\n  \"      filter: false, // {property: 'status', select: {equals: '已发布'}}\\n\" +\n  '    },\\n' +\n  '    feishu: {\\n' +\n  \"      type: 'space',\\n\" +\n  '      wikiId: process.env.FEISHU_WIKI_ID,\\n' +\n  '      folderToken: process.env.FEISHU_FOLDER_TOKEN,\\n' +\n  '      appId: process.env.FEISHU_APP_ID,\\n' +\n  '      appSecret: process.env.FEISHU_APP_SECRET,\\n' +\n  '    },\\n' +\n  '    flowus: {\\n' +\n  '      tablePageId: process.env.FLOWUS_TABLE_PAGE_ID,\\n' +\n  \"      filter: false, // {property: 'status',value: '已发布'}\\n\" +\n  '    }\\n' +\n  '  },\\n' +\n  '  deploy: {\\n' +\n  \"    platform: 'local',\\n\" +\n  '    local: {\\n' +\n  \"      outputDir: './docs',\\n\" +\n  \"      filename: 'title',\\n\" +\n  \"      format: 'markdown',\\n\" +\n  '    },\\n' +\n  '    halo: {\\n' +\n  '      endpoint: process.env.HALO_ENDPOINT,\\n' +\n  '      token: process.env.HALO_TOKEN,\\n' +\n  '      policyName: process.env.HALO_POLICY_NAME,\\n' +\n  \"      rowType: 'html',\\n\" +\n  '      needUploadImage: true,\\n' +\n  '    },\\n' +\n  '    confluence: {\\n' +\n  '      user: process.env.CONFLUENCE_USER,\\n' +\n  '      password: process.env.WORDPRESS_PASSWORD,\\n' +\n  '      endpoint: process.env.WORDPRESS_ENDPOINT,\\n' +\n  '      spaceKey: process.env.CONFLUENCE_SPACE_KEY,\\n' +\n  '      rootPageId: process.env.CONFLUENCE_ROOT_PAGE_ID, // 可选\\n' +\n  '    },\\n' +\n  '    wordpress: {\\n' +\n  '      username: process.env.WORDPRESS_USERNAME,\\n' +\n  '      password: process.env.WORDPRESS_PASSWORD,\\n' +\n  '      endpoint: process.env.WORDPRESS_ENDPOINT,\\n' +\n  '    }\\n' +\n  '  },\\n' +\n  '  image: {\\n' +\n  '    enable: false,\\n' +\n  \"    platform: 'local',\\n\" +\n  '    local: {\\n' +\n  \"      outputDir: './docs/images',\\n\" +\n  \"      prefixKey: '/images',\\n\" +\n  '      pathFollowDoc: false,\\n' +\n  '    },\\n' +\n  '    oss: {\\n' +\n  '      secretId: process.env.OSS_SECRET_ID,\\n' +\n  '      secretKey: process.env.OSS_SECRET_KEY,\\n' +\n  '      bucket: process.env.OSS_BUCKET,\\n' +\n  '      region: process.env.OSS_REGION,\\n' +\n  '      host: process.env.OSS_HOST,\\n' +\n  \"      prefixKey: '',\\n\" +\n  '    },\\n' +\n  '    cos: {\\n' +\n  '      secretId: process.env.COS_SECRET_ID,\\n' +\n  '      secretKey: process.env.COS_SECRET_KEY,\\n' +\n  '      bucket: process.env.COS_BUCKET,\\n' +\n  '      region: process.env.COS_REGION,\\n' +\n  '      host: process.env.COS_HOST,\\n' +\n  \"      prefixKey: '',\\n\" +\n  '    },\\n' +\n  '    qiniu: {\\n' +\n  '      secretId: process.env.QINIU_SECRET_ID,\\n' +\n  '      secretKey: process.env.QINIU_SECRET_KEY,\\n' +\n  '      bucket: process.env.QINIU_BUCKET,\\n' +\n  '      region: process.env.QINIU_REGION,\\n' +\n  '      host: process.env.QINIU_HOST,\\n' +\n  \"      prefixKey: '',\\n\" +\n  '    },\\n' +\n  '    upyun: {\\n' +\n  '      user: process.env.UPYUN_USER,\\n' +\n  '      password: process.env.UPYUN_PASSWORD,\\n' +\n  '      bucket: process.env.UPYUN_BUCKET,\\n' +\n  '      host: process.env.UPYUN_HOST,\\n' +\n  \"      prefixKey: '',\\n\" +\n  '    },\\n' +\n  '    github: {\\n' +\n  '      user: process.env.GITHUB_USER,\\n' +\n  '      token: process.env.GITHUB_TOKEN,\\n' +\n  '      repo: process.env.GITHUB_REPO,\\n' +\n  \"      prefixKey: '',\\n\" +\n  '    }\\n' +\n  '  }\\n' +\n  '}\\n'\n\nconst configJson = JSON.stringify(\n  {\n    write: {\n      platform: 'yuque',\n      yuque: {\n        token: '',\n        baseUrl: '',\n        login: '',\n        repo: '',\n        onlyPublic: false,\n        onlyPublished: false,\n      },\n      notion: {\n        token: '',\n        databaseId: '',\n        filter: true,\n        sorts: true,\n        catalog: {\n          enable: false,\n          property: 'catalog',\n        },\n      },\n    },\n    deploy: {\n      platform: 'local',\n      local: {\n        outputDir: '',\n        filename: 'title | urlname',\n        format: 'markdown | matter-markdown | wiki | html',\n        catalog: false,\n        formatExt: '', // 可选\n      },\n      confluence: {\n        user: '',\n        password: '',\n        baseUrl: '',\n        spaceKey: '',\n        rootPageId: '', // 可选\n        formatExt: '', // 可选\n      },\n    },\n    image: {\n      enable: true,\n      platform: 'cos',\n      local: {\n        outputDir: '',\n        prefixKey: '',\n      },\n      oss: {\n        secretId: '',\n        secretKey: '',\n        bucket: '',\n        region: '',\n        host: '',\n        prefixKey: '',\n        secretExt: '', // 可选\n      },\n      cos: {\n        secretId: '',\n        secretKey: '',\n        bucket: '',\n        region: '',\n        host: '',\n        prefixKey: '',\n        secretExt: '', // 可选\n      },\n      qiniu: {\n        secretId: '',\n        secretKey: '',\n        bucket: '',\n        region: '',\n        host: '',\n        prefixKey: '',\n        secretExt: '', // 可选\n      },\n      upyun: {\n        user: '',\n        password: '',\n        bucket: '',\n        host: '',\n        prefixKey: '',\n        secretExt: '', // 可选\n      },\n      github: {\n        user: '',\n        token: '',\n        repo: '',\n        branch: '',\n        host: '',\n        prefixKey: '',\n        secretExt: '', // 可选\n      },\n    },\n  },\n  null,\n  2,\n)\n\nexport const genConfigFile = (configName: string) => {\n  let str = configJsStr\n  // 判断configName的后缀\n  if (!configName.endsWith('.js')) {\n    // 生成json文件\n    str = configJson\n  }\n  fs.writeFileSync(`${process.cwd()}/${configName}`, str, {\n    encoding: 'utf-8',\n  })\n}\n","import fs from 'fs'\n\nconst envStr =\n  '# 语雀（Token方式）\\n' +\n  'YUQUE_TOKEN=\\n' +\n  '# 语雀（帐号密码方式）\\n' +\n  'YUQUE_USERNAME=\\n' +\n  'YUQUE_PASSWORD=\\n' +\n  '# 语雀公共参数，使用语雀必填\\n' +\n  'YUQUE_LOGIN=\\n' +\n  'YUQUE_REPO=\\n' +\n  '\\n' +\n  '# Notion\\n' +\n  'NOTION_TOKEN=\\n' +\n  'NOTION_DATABASE_ID=\\n' +\n  '\\n' +\n  '#FlowUs\\n' +\n  'FLOWUS_TABLE_PAGE_ID=\\n' +\n  '\\n' +\n  '#飞书云文档\\n' +\n  'FEISHU_APP_ID=\\n' +\n  'FEISHU_APP_SECRET=\\n' +\n  'FEISHU_FOLDER_TOKEN=\\n' +\n  'FEISHU_WIKI_ID=\\n' +\n  '\\n' +\n  '# Halo\\n' +\n  'HALO_ENDPOINT=\\n' +\n  'HALO_TOKEN=\\n' +\n  'HALO_POLICY_NAME=\\n' +\n  '\\n' +\n  '# Confluence\\n' +\n  'CONFLUENCE_BASE_URL=\\n' +\n  'CONFLUENCE_USER=\\n' +\n  'CONFLUENCE_PASSWORD=\\n' +\n  'CONFLUENCE_SPACE_KEY=\\n' +\n  'CONFLUENCE_ROOT_PAGE_ID=\\n' +\n  '\\n' +\n  '# WordPress\\n' +\n  'WORDPRESS_USERNAME=\\n' +\n  'WORDPRESS_PASSWORD=\\n' +\n  'WORDPRESS_ENDPOINT=\\n' +\n  '\\n' +\n  '# 腾讯云\\n' +\n  'COS_SECRET_ID=\\n' +\n  'COS_SECRET_KEY=\\n' +\n  'COS_BUCKET=\\n' +\n  'COS_REGION=\\n' +\n  'COS_HOST=\\n' +\n  '\\n' +\n  '# 阿里云\\n' +\n  'OSS_SECRET_ID=\\n' +\n  'OSS_SECRET_KEY=\\n' +\n  'OSS_BUCKET=\\n' +\n  'OSS_REGION=\\n' +\n  'OSS_HOST=xxx.oss-cn-xxx.aliyuncs.com\\n' +\n  '\\n' +\n  '# 七牛云\\n' +\n  'QINIU_SECRET_ID=\\n' +\n  'QINIU_SECRET_KEY=\\n' +\n  'QINIU_BUCKET=\\n' +\n  'QINIU_REGION=\\n' +\n  'QINIU_HOST=\\n' +\n  '\\n' +\n  '# 又拍云\\n' +\n  'UPYUN_USER=\\n' +\n  'UPYUN_PASSWORD=\\n' +\n  'UPYUN_BUCKET=\\n' +\n  'UPYUN_HOST=xxx.xx.upaiyun.com\\n' +\n  '\\n' +\n  '# Github\\n' +\n  'GITHUB_USER=\\n' +\n  'GITHUB_TOKEN=\\n' +\n  'GITHUB_REPO=\\n' +\n  '\\n'\n\nexport const genEnvFile = (envName: string) => {\n  fs.writeFileSync(`${process.cwd()}/${envName}`, envStr, {\n    encoding: 'utf-8',\n  })\n}\n","import Elog, { ElogConfig } from '@elog/core'\nimport path from 'path'\nimport * as dotenv from 'dotenv'\nimport { out } from '@elog/shared'\nimport { getConfig } from '../utils/utils'\n\n/**\n * 同步\n * @param customConfigPath\n * @param customCachePath\n * @param envPath\n * @param isFullCache 缓存所有\n * @param isForced 强制同步\n * @param disableCache 禁用缓存，全量更新文档\n */\nconst sync = async (\n  customConfigPath?: string,\n  customCachePath?: string,\n  envPath?: string,\n  isFullCache?: boolean,\n  isForced?: boolean,\n  disableCache?: boolean,\n) => {\n  // 加载环境变量\n  if (envPath) {\n    // 本地模式\n    envPath = path.resolve(process.cwd(), envPath)\n    out.access('环境变量', `已指定读取env文件为：${envPath}`)\n    dotenv.config({ override: true, path: envPath })\n  } else {\n    // 生产模式\n    out.access('环境变量', `未指定env文件，将从系统环境变量中读取`)\n  }\n  // 加载配置文件\n  const { config: userConfig, cacheFilePath } = getConfig(customConfigPath, customCachePath)\n  const elogConfig = {\n    ...userConfig,\n    extension: {\n      cachePath: cacheFilePath,\n      isFullCache: !!isFullCache,\n      isForced: !!isForced,\n      disableCache: !!disableCache,\n      ...userConfig.extension,\n    },\n  } as ElogConfig\n  const elog = new Elog(elogConfig)\n  await elog.deploy()\n}\n\nexport default sync\n","import fs from 'fs'\nimport path from 'path'\nimport { cacheFileNames, configFileNames } from '../const'\nimport { out } from '@elog/shared'\nimport { ElogConfig } from '@elog/core'\n\nexport const getPkgJSON = (): any => {\n  let pkgJson = { version: '1.0.0' }\n  try {\n    const pkgJsonPathCjs = path.resolve(__dirname, '../', 'package.json')\n    pkgJson = JSON.parse(fs.readFileSync(pkgJsonPathCjs, 'utf8'))\n  } catch (e) {\n    const pkgJsonPathMjs = path.resolve(__dirname, '../../', 'package.json')\n    pkgJson = JSON.parse(fs.readFileSync(pkgJsonPathMjs, 'utf8'))\n  }\n  return {\n    pkgJson,\n  }\n}\n\n/**\n * 获取配置文件\n * @param customConfigPath\n * @param customCachePath\n */\nexport const getConfig = (customConfigPath?: string, customCachePath?: string) => {\n  const rootPath = process.cwd()\n  const configFile =\n    customConfigPath || configFileNames.find((name) => fs.existsSync(path.join(rootPath, name)))\n  if (!configFile) {\n    out.err('错误', '找不到Elog配置文件')\n    process.exit(1)\n  }\n  const cacheFilePath =\n    customCachePath ||\n    cacheFileNames.find((name) => fs.existsSync(path.join(rootPath, name))) ||\n    'elog.cache.json'\n\n  const configFilePath = path.join(rootPath, configFile)\n\n  const config: Partial<ElogConfig> = require(configFilePath)\n\n  return {\n    config,\n    cacheFilePath,\n  }\n}\n","// 默认的配置文件名\nexport const configFileNames = ['elog-config.json', 'elog.config.json', 'elog.config.js']\nexport const cacheFileNames = ['elog-cache.json', 'elog.cache.json']\n","import { out } from '@elog/shared'\nimport { cleanCache, cleanImages, cleanPost } from '../utils/clean'\nimport { getConfig } from '../utils/utils'\n\nconst clean = async (customConfigPath: string, customCachePath: string) => {\n  try {\n    // 加载配置文件\n    const { config, cacheFilePath } = getConfig(customConfigPath, customCachePath)\n    const {\n      deploy: { platform: deployPlatform, local: { outputDir: docOutputDir } = {} as any } = {},\n      image: {\n        enable,\n        platform: imagePlatform,\n        local: { outputDir: imageOutputDir } = {} as any,\n      } = {},\n    } = config\n\n    cleanCache(cacheFilePath)\n    if (deployPlatform === 'local' && docOutputDir) {\n      cleanPost(docOutputDir, cacheFilePath)\n    }\n    // 清楚本地图片\n    if (enable && imagePlatform === 'local' && imageOutputDir) {\n      cleanImages(imageOutputDir)\n    }\n  } catch (error: any) {\n    out.err(`清理失败, ${error.message}`)\n  }\n}\n\nexport default clean\n","import path from 'path'\nimport { out } from '@elog/shared'\nimport fsExtra from 'fs-extra'\nimport { DocDetail } from '@elog/types'\nconst __cwd = process.cwd()\n\n/**\n * 清理文章\n */\nexport const cleanPost = (postPath: string, cachePath: string) => {\n  try {\n    const cacheFilePath = path.join(__cwd, cachePath)\n    if (!fsExtra.pathExistsSync(cacheFilePath)) {\n      const dist = path.join(__cwd, postPath)\n      if (!fsExtra.pathExistsSync(dist)) {\n        out.warning('清理文档', `${dist} 路径不存在，无需清理`)\n        return\n      }\n      out.warning('注意', `缓存文件 ${cacheFilePath} 不存在，将清除文档输出文件夹`)\n      fsExtra.remove(dist, (error) => {\n        if (error) {\n          out.err(`清理文档失败: ${error.message}`)\n        } else {\n          out.info('清理文档', dist)\n        }\n      })\n      return\n    }\n    const cacheJson = require(cacheFilePath)\n    const docs = cacheJson.docs as DocDetail[]\n    const dirList: string[] = []\n    docs.forEach((doc) => {\n      const docPath = doc.docPath as string\n      const docDirPath = path.join(__cwd, docPath)\n      if (!dirList.includes(docDirPath)) {\n        fsExtra.remove(docDirPath, (error) => {\n          if (error) {\n            out.warning(`清理文档失败: ${error.message}`)\n          }\n          out.info('清理文档', docDirPath)\n        })\n        dirList.push(docDirPath)\n      }\n    })\n  } catch (error: any) {\n    out.warning(`清理文档失败, ${error.message}`)\n  }\n}\n\n/**\n * 清理文章缓存\n */\nexport const cleanCache = (cachePath: string) => {\n  try {\n    const dist = path.join(__cwd, cachePath)\n    if (!fsExtra.pathExistsSync(dist)) {\n      out.warning('清理缓存', `${dist} 路径不存在，无需清理`)\n      return\n    }\n    fsExtra.remove(dist, (error) => {\n      if (error) {\n        out.warning(`清理缓存失败: ${error.message}`)\n      } else {\n        out.info('清理缓存', dist)\n      }\n    })\n  } catch (error: any) {\n    out.warning(`清理缓存失败', ${error.message}`)\n  }\n}\n\n/**\n * 清理本地图片\n */\nexport const cleanImages = (imgsPath: string) => {\n  try {\n    const dist = path.join(__cwd, imgsPath)\n    if (!fsExtra.pathExistsSync(dist)) {\n      out.warning('清理图片', `${dist} 路径不存在，无需清理`)\n      return\n    }\n    fsExtra.remove(dist, (error) => {\n      if (error) {\n        out.warning(`清理图片失败: ${error.message}`)\n      } else {\n        out.info('清理图片', dist)\n      }\n    })\n  } catch (error: any) {\n    out.warning(`清理图片失败, ${error.message}`)\n  }\n}\n","import latestVersion from 'latest-version'\nimport inquirer from 'inquirer'\nimport { gt } from 'semver'\nimport { out } from '@elog/shared'\nimport { runCmdSync } from '../utils/run'\nimport { getPkgJSON } from '../utils/utils'\nconst { pkgJson } = getPkgJSON()\n\nconst enum PackageManager {\n  NPM = 'npm',\n  PNPM = 'pnpm',\n  YARN = 'yarn',\n}\n\nconst upgrade = async () => {\n  const newVersion = await latestVersion(pkgJson.name)\n  const currentVersion = pkgJson.version\n  out.access('当前版本', currentVersion)\n  out.access('最新版本', newVersion)\n  if (gt(newVersion, currentVersion)) {\n    inquirer\n      .prompt([\n        {\n          type: 'confirm',\n          name: 'confirmed',\n          message: '是否更新',\n          default: true,\n        },\n      ])\n      .then((answers) => {\n        const confirmed = answers.confirmed\n        if (!confirmed) {\n          out.access('取消更新')\n          process.exit(0)\n        } else {\n          inquirer\n            .prompt([\n              {\n                type: 'list',\n                name: 'cli',\n                message: '请选择包管理器',\n                default: 'npm',\n                choices: [\n                  {\n                    name: PackageManager.NPM,\n                    value: PackageManager.NPM,\n                  },\n                  {\n                    name: PackageManager.PNPM,\n                    value: PackageManager.PNPM,\n                  },\n                  {\n                    name: PackageManager.YARN,\n                    value: PackageManager.YARN,\n                  },\n                ],\n              },\n            ])\n            .then((answers) => {\n              const { cli } = answers\n              if (cli === PackageManager.YARN) {\n                runCmdSync(`yarn global add ${pkgJson.name}@${newVersion}`)\n              } else {\n                runCmdSync(`${cli} install ${pkgJson.name}@${newVersion} -g`)\n              }\n            })\n        }\n      })\n  } else {\n    out.access('提示', `当前已是最新版本: ${currentVersion}`)\n    process.exit(0)\n  }\n}\n\nexport default upgrade\n","import { execSync } from 'child_process'\nimport { out } from '@elog/shared'\n/**\n * 同步执行命令\n * @param command\n */\nexport const runCmdSync = (command: string) => {\n  const cwd = process.cwd()\n  out.info('目录', cwd)\n  out.info('执行', command)\n  const output = execSync(command)\n  out.info('输出', output.toString().trim())\n}\n","import { ElogConfig } from '@elog/core'\n\n/**\n * Type helper to make it easier to use vite.config.ts\n * accepts a direct {@link ElogConfig} object, or a function that returns it.\n */\nexport function defineConfig(config: ElogConfig): ElogConfig {\n  return config\n}\n","import { run } from './run'\nimport { defineConfig } from './utils/config'\n\n// cli api\nexport { run, defineConfig }\n// core api\nexport * from '@elog/core'\n"]}