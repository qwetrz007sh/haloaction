var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/client.ts
import { out as out2 } from "@elog/shared";
import { FeiShuClient as FeiShuApi } from "@feishux/api";
import { FeiShuToMarkdown } from "@feishux/doc-to-md";
import asyncPool from "tiny-async-pool";

// src/utils.ts
import { out, timeFormat } from "@elog/shared";
import frontMatter from "front-matter";
var getProps = (page, body) => {
  let properties = {
    // 注入title
    title: page.title,
    // urlname
    urlname: page.doc_id,
    // 创建时间
    date: timeFormat(page.createdAt),
    // 更新时间
    updated: timeFormat(page.updatedAt)
  };
  try {
    const regex = /^---[\s|\S]+?---/i;
    body = body.replace(regex, (a) => a.replace(/(<br \/>|<br>|<br\/>)/gi, "\n"));
    const result = frontMatter(body);
    body = result.body;
    let attributes = result.attributes;
    properties = __spreadValues(__spreadValues({}, properties), attributes);
    return {
      body,
      properties
    };
  } catch (e) {
    out.warning("front-matter\u89E3\u6790\u5931\u8D25\uFF0C\u5C06\u8FD4\u56DE\u9884\u5B9A\u4E49\u5C5E\u6027", e.message);
    out.warning("\u9884\u5B9A\u4E49\u5C5E\u6027\uFF1Ahttps://elog.1874.cool/notion/raqyleng501h23p1#\u9884\u5B9A\u4E49\u5C5E\u6027");
    out.debug(e);
    return {
      body,
      properties
    };
  }
};

// src/client.ts
var FeiShuClient = class {
  constructor(config) {
    this.catalog = [];
    this.config = config;
    this.config.folderToken = config.folderToken;
    this.config.appId = config.appId;
    this.config.appSecret = config.appSecret;
    if (!this.config.appId || !this.config.appSecret) {
      out2.err("\u7F3A\u5C11\u53C2\u6570", "\u7F3A\u5C11\u6587\u4EF6\u5939Token\u6216\u77E5\u8BC6\u5E93 ID");
      process.exit(-1);
    }
    if (config.type === "wiki" && !config.wikiId) {
      out2.err("\u7F3A\u5C11\u53C2\u6570", "\u7F3A\u5C11\u77E5\u8BC6\u5E93ID");
      process.exit(-1);
    } else if ((!config.type || config.type === "space") && !config.folderToken) {
      out2.err("\u7F3A\u5C11\u53C2\u6570", "\u7F3A\u5C11\u6211\u7684\u7A7A\u95F4\u4E2D\u6587\u4EF6\u5939 ID");
      process.exit(-1);
    }
    this.feishu = new FeiShuApi({
      appId: this.config.appId,
      appSecret: this.config.appSecret,
      baseUrl: this.config.baseUrl
    });
    this.f2m = new FeiShuToMarkdown();
  }
  getPageList() {
    return __async(this, null, function* () {
      if (this.config.type === "wiki") {
        return this.getWikiList();
      }
      return this.getSpaceList();
    });
  }
  /**
   * 获取知识库文档
   */
  getWikiList() {
    return __async(this, null, function* () {
      const tree = yield this.feishu.getReposNodesTree(
        this.config.wikiId,
        this.config.folderToken
      );
      const self = this;
      function dfs(tree2, catalog = [], level = 0, parent) {
        tree2.forEach((item) => {
          const newCatalog = [
            ...catalog,
            { title: parent == null ? void 0 : parent.title, doc_id: (parent == null ? void 0 : parent.obj_token) || (parent == null ? void 0 : parent.node_token) }
          ];
          if (item.obj_type == "doc" || item.obj_type == "docx") {
            const doc = {
              doc_id: item.obj_token,
              id: item.obj_token,
              title: item.title,
              createdAt: Number(item.obj_create_time + "000"),
              updated: Number(item.obj_edit_time + "000"),
              updatedAt: Number(item.obj_edit_time + "000"),
              catalog: level > 0 ? newCatalog : [],
              has_child: item.has_child,
              node_token: item.node_token,
              parent_node_token: item.parent_node_token
            };
            if (!item.children || !self.config.disableParentDoc) {
              self.catalog.push(doc);
            }
          }
          if (item.children) {
            dfs(item.children, level > 0 ? newCatalog : [], level + 1, item);
          }
        });
      }
      dfs(tree);
      return this.catalog;
    });
  }
  /**
   * 获取我的空间下指定文件夹文档
   */
  getSpaceList() {
    return __async(this, null, function* () {
      const tree = yield this.feishu.getFolderTree(this.config.folderToken);
      const self = this;
      function dfs(tree2, catalog = [], level = 0, parent) {
        tree2.map((item) => {
          const newCatalog = [...catalog, { title: parent == null ? void 0 : parent.name, doc_id: parent == null ? void 0 : parent.token }];
          if (item.type === "docx") {
            self.catalog.push({
              id: item.token,
              doc_id: item.token,
              title: item.name,
              updated: Number(item.modified_time + "000"),
              createdAt: Number(item.created_time + "000"),
              updatedAt: Number(item.modified_time + "000"),
              // 目录信息
              catalog: level > 0 ? newCatalog : []
            });
          }
          if (item.children) {
            dfs(item.children, level > 0 ? newCatalog : [], level + 1, item);
          }
        });
      }
      dfs(tree);
      return this.catalog;
    });
  }
  download(page) {
    return __async(this, null, function* () {
      let body = "";
      try {
        const pageBlocks = yield this.feishu.getPageBlocks(page.id);
        body = this.f2m.toMarkdownString(pageBlocks);
      } catch (e) {
        out2.warning(`${page.title} \u4E0B\u8F7D\u51FA\u9519: ${e.message}`);
        out2.debug(e);
      }
      const { body: newBody, properties } = getProps(page, body);
      const doc = {
        id: page.id,
        properties
      };
      return __spreadProps(__spreadValues({}, doc), {
        body: newBody,
        body_original: body,
        doc_id: page.id,
        updated: page.updated,
        catalog: page.catalog
      });
    });
  }
  getPageDetailList(cachedPages, ids) {
    return __async(this, null, function* () {
      let articleList = [];
      let pages = cachedPages;
      if (ids == null ? void 0 : ids.length) {
        pages = pages.filter((page) => {
          const exist = ids.indexOf(page.id) > -1;
          if (!exist) {
            const title = page.title;
            out2.info("\u8DF3\u8FC7\u4E0B\u8F7D", title);
          }
          return exist;
        });
      }
      if (!(pages == null ? void 0 : pages.length)) {
        out2.info("\u8DF3\u8FC7", "\u6CA1\u6709\u9700\u8981\u4E0B\u8F7D\u7684\u6587\u7AE0");
        return articleList;
      }
      out2.info("\u5F85\u4E0B\u8F7D\u6570", String(pages.length));
      out2.access("\u5F00\u59CB\u4E0B\u8F7D\u6587\u6863...");
      pages = pages.map((item, index) => __spreadProps(__spreadValues({}, item), { _index: index + 1 }));
      const promise = (page) => __async(this, null, function* () {
        out2.info(`\u4E0B\u8F7D\u6587\u6863 ${page._index}/${pages.length}   `, page.title);
        let article = yield this.download(page);
        articleList.push(article);
      });
      yield asyncPool(this.config.limit || 3, pages, promise);
      out2.info("\u5DF2\u4E0B\u8F7D\u6570", String(articleList.length));
      return articleList;
    });
  }
};
var client_default = FeiShuClient;

// src/core.ts
import { out as out3 } from "@elog/shared";
var FeiShu = class {
  constructor(config) {
    this.pages = [];
    this.config = config;
    this.ctx = new client_default(config);
  }
  /**
   * 获取文章列表（不含详情）
   */
  getDocList() {
    return __async(this, null, function* () {
      out3.info("\u6B63\u5728\u83B7\u53D6\u6587\u6863\u5217\u8868\uFF0C\u8BF7\u7A0D\u7B49...");
      const pages = yield this.ctx.getPageList();
      this.pages = pages;
      out3.info("\u6587\u6863\u603B\u6570", String(this.pages.length));
      return pages.map((page) => {
        return {
          // 暂时只需要返回这些属性
          id: page.id,
          doc_id: page.id,
          updated: page.updated
        };
      });
    });
  }
  /**
   * 获取文章详情列表
   * @param ids 需要下载的doc_id列表
   */
  getDocDetailList(ids) {
    return __async(this, null, function* () {
      return yield this.ctx.getPageDetailList(this.pages, ids);
    });
  }
};
var core_default = FeiShu;

// src/index.ts
var src_default = core_default;
export {
  src_default as default
};
//# sourceMappingURL=index.js.map