"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/token/client.ts
var _tinyasyncpool = require('tiny-async-pool'); var _tinyasyncpool2 = _interopRequireDefault(_tinyasyncpool);
var _shared = require('@elog/shared');

// src/utils.ts
var _frontmatter = require('front-matter'); var _frontmatter2 = _interopRequireDefault(_frontmatter);
var _unified = require('unified'); var _unified2 = _interopRequireDefault(_unified);
var _rehypeparse = require('rehype-parse'); var _rehypeparse2 = _interopRequireDefault(_rehypeparse);
var _rehypestringify = require('rehype-stringify'); var _rehypestringify2 = _interopRequireDefault(_rehypestringify);


// src/const.ts
var YuQuePwdPublicKey = `-----BEGIN PUBLIC KEY-----
  MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCfwyOyncSrUTmkaUPsXT6UUdXx
  TQ6a0wgPShvebfwq8XeNj575bUlXxVa/ExIn4nOUwx6iR7vJ2fvz5Ls750D051S7
  q70sevcmc8SsBNoaMQtyF/gETPBSsyWv3ccBJFrzZ5hxFdlVUfg6tXARtEI8rbIH
  su6TBkVjk+n1Pw/ihQIDAQAB
  -----END PUBLIC KEY-----`;
var IllegalityDocFormat = ["lakeboard", "lakesheet", "laketable"];

// src/utils.ts
var _jsencryptnode = require('jsencrypt-node'); var _jsencryptnode2 = _interopRequireDefault(_jsencryptnode);
var getProps = (page, isPwd) => {
  var _a, _b, _c;
  let { body } = page;
  let properties = {
    // 注入title
    title: page.title,
    // urlname
    urlname: page.slug,
    // 创建时间
    date: _shared.timeFormat.call(void 0, page.created_at),
    // 更新时间
    updated: _shared.timeFormat.call(void 0, page.updated_at)
  };
  if ((_b = (_a = page.book) == null ? void 0 : _a.user) == null ? void 0 : _b.name) {
    properties.author = page.book.user.name;
  }
  if (page.cover) {
    properties.cover = page.cover;
  }
  if ((_c = page.tags) == null ? void 0 : _c.length) {
    properties.tags = page.tags.map((item) => item.title);
  }
  if (page == null ? void 0 : page.description) {
    properties.description = page == null ? void 0 : page.description;
  }
  try {
    if (!isPwd) {
      const regex = /^---[\s|\S]+?---/i;
      body = body.replace(regex, (a) => a.replace(/(<br \/>|<br>|<br\/>)/gi, "\n"));
    }
    const result = _frontmatter2.default.call(void 0, body);
    body = result.body;
    let attributes = result.attributes;
    properties = __spreadValues(__spreadValues({}, properties), attributes);
    return {
      body,
      properties
    };
  } catch (e) {
    _shared.out.warning("front-matter\u89E3\u6790\u5931\u8D25\uFF0C\u5C06\u8FD4\u56DE\u9884\u5B9A\u4E49\u5C5E\u6027", e.message);
    _shared.out.warning("\u9884\u5B9A\u4E49\u5C5E\u6027\uFF1Ahttps://elog.1874.cool/notion/raqyleng501h23p1#\u9884\u5B9A\u4E49\u5C5E\u6027");
    _shared.out.debug(e);
    return {
      body,
      properties
    };
  }
};
function processMarkdownRaw(raw) {
  const nul = /\x00/g;
  const nul1 = /\u0000/g;
  const emptyAnchor = /<a name=\".*?\"><\/a>/g;
  const hiddenContent = /<div style="display:none">[\s\S]*?<\/div>/gi;
  raw = raw.replace(nul, "").replace(nul1, "").replace(hiddenContent, "").replace(emptyAnchor, "");
  return raw;
}
function processWordWrap(doc) {
  let { body: raw } = doc;
  const multiBr = /(<br>[\s\n]){2}/gi;
  const multiBrEnd = /(<br \/>[\n]?){2}/gi;
  const brBug = /<br \/>/g;
  raw = raw.replace(multiBr, "<br>").replace(multiBrEnd, "<br />\n").replace(brBug, "\n");
  return raw;
}
function noProcess(doc) {
  let { body: raw } = doc;
  return raw;
}
var cssStyle = [
  {
    type: "element",
    tagName: "link",
    properties: {
      rel: ["stylesheet"],
      href: "http://editor.yuque.com/ne-editor/lake-content-v1.css"
    },
    children: []
  },
  {
    type: "text",
    value: "\n    "
  }
];
var findHead = (node) => {
  if (node.type === "element" && node.tagName === "head") {
    node.children.push(...cssStyle);
  }
  if (node.children) {
    for (let i = 0; i < node.children.length; i++) {
      const child = node.children[i];
      findHead(child);
    }
  }
};
var processHtml = (content) => {
  const processValue = _unified2.default.call(void 0, ).use(_rehypeparse2.default).use(() => (tree) => {
    findHead(tree);
  }).use(_rehypestringify2.default).processSync(content);
  return processValue.contents;
};
var processHtmlRaw = (html) => {
  try {
    return processHtml(html);
  } catch (e) {
    _shared.out.warning("HTML\u89E3\u6790\u5931\u8D25\uFF0C\u5C06\u8FD4\u56DE\u539F\u59CBHTML");
    return html;
  }
};
var encrypt = (password) => {
  const encryptor = new (0, _jsencryptnode2.default)();
  encryptor.setPublicKey(YuQuePwdPublicKey);
  const time = Date.now();
  const symbol = time + ":" + password;
  return encryptor.encrypt(symbol);
};

// src/token/format-ext.ts

var _path = require('path'); var _path2 = _interopRequireDefault(_path);
var FormatExt = class {
  constructor(config) {
    this.formatExt = true;
    this.formatExt = config;
    this.ctx = this.initFormatExt();
  }
  /**
   * 初始化适配器
   * @private
   */
  initFormatExt() {
    if (typeof this.formatExt === "boolean") {
      if (this.formatExt) {
        return processWordWrap;
      } else {
        return noProcess;
      }
    } else if (typeof this.formatExt === "string") {
      _shared.out.warning("\u6CE8\u610F", "\u6B63\u5728\u52A0\u8F7D\u6587\u6863\u5904\u7406\u62D3\u5C55\u70B9\uFF0C\u8BF7\u9075\u5FAA\u6587\u6863\u5904\u7406\u62D3\u5C55\u70B9\u6CE8\u5165\u89C4\u8303");
      try {
        const formatExtPath = _path2.default.resolve(process.cwd(), this.formatExt);
        const { format } = __require(formatExtPath);
        return format;
      } catch (e) {
        _shared.out.err("\u6587\u6863\u5904\u7406\u62D3\u5C55\u70B9\u52A0\u8F7D\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\uFF01", e.message);
        _shared.out.debug(e);
        process.exit(-1);
      }
    } else if (typeof this.formatExt === "function") {
      return this.formatExt;
    } else {
      _shared.out.warning("\u6587\u6863\u5904\u7406\u62D3\u5C55\u70B9\u914D\u7F6E\u9519\u8BEF\uFF0C\u5C06\u4F7F\u7528\u9ED8\u8BA4\u903B\u8F91");
      return processWordWrap;
    }
  }
  /**
   * 获取文档处理器
   */
  getFormatExt() {
    return this.ctx;
  }
};

// src/token/client.ts
var DEFAULT_API_URL = "https://www.yuque.com/api/v2";
var YuqueClient = class {
  constructor(config) {
    this.catalog = [];
    this.config = config;
    this.config.token = config.token || process.env.YUQUE_TOKEN;
    if (!this.config.token || !this.config.repo || !this.config.login) {
      _shared.out.err("\u7F3A\u5C11\u53C2\u6570", "\u7F3A\u5C11\u8BED\u96C0\u914D\u7F6E\u4FE1\u606F");
      _shared.out.info("\u8BF7\u67E5\u9605Elog\u914D\u7F6E\u6587\u6863: https://elog.1874.cool/notion/write-platform");
      process.exit(-1);
    }
    this.namespace = `${config.login}/${config.repo}`;
    if (config.formatExt) {
      const formatExt = new FormatExt(config.formatExt);
      this.formatExtCtx = formatExt.getFormatExt();
    } else {
      this.formatExtCtx = processWordWrap;
    }
  }
  /**
   * send api request to yuque
   * @param api
   * @param reqOpts
   * @param custom
   */
  request(api, reqOpts, custom) {
    return __async(this, null, function* () {
      const { token } = this.config;
      let baseUrl = this.config.baseUrl || DEFAULT_API_URL;
      if (baseUrl.endsWith("/")) {
        baseUrl = baseUrl.slice(0, -1);
      }
      const url = `${baseUrl}/${api}`;
      const opts = __spreadValues({
        headers: {
          "X-Auth-Token": token
        }
      }, reqOpts);
      if (custom) {
        const res2 = yield _shared.request.call(void 0, url, opts);
        return res2.data;
      }
      const res = yield _shared.request.call(void 0, url, opts);
      if (res.status !== 200) {
        _shared.out.err(res);
      }
      return res.data.data;
    });
  }
  /**
   * 获取目录
   */
  getToc() {
    return __async(this, null, function* () {
      return this.request(`repos/${this.namespace}/toc`, {
        method: "GET"
      });
    });
  }
  /**
   * 获取文章列表(不带详情)
   */
  getDocList() {
    return __async(this, null, function* () {
      this.catalog = yield this.getToc();
      const list = [];
      const self = this;
      const getList = (offset = 0) => __async(this, null, function* () {
        const pageSize = 100;
        const res = yield self.request(
          `repos/${this.namespace}/docs`,
          {
            method: "GET",
            data: { offset, limit: pageSize }
          },
          true
        );
        list.push(...res.data);
        if (res.meta.total > offset + pageSize) {
          yield getList(offset + pageSize);
        }
      });
      yield getList();
      return list;
    });
  }
  /**
   * 获取文章详情
   */
  getDocDetail(slug) {
    return __async(this, null, function* () {
      const yuqueDoc = yield this.request(`repos/${this.namespace}/docs/${slug}`, {
        method: "GET",
        data: { raw: 1 }
      });
      const docInfo = yuqueDoc;
      docInfo.doc_id = yuqueDoc.slug;
      const find = this.catalog.find((item) => item.slug === yuqueDoc.slug);
      if (find) {
        let catalogPath = [];
        let parentId = find.parent_uuid;
        for (let i = 0; i < find.depth - 1; i++) {
          const current = this.catalog.find((item) => item.uuid === parentId);
          parentId = current.parent_uuid;
          const catalog = {
            title: current.title,
            doc_id: yuqueDoc.slug
          };
          catalogPath.push(catalog);
        }
        docInfo.catalog = catalogPath.reverse();
      }
      docInfo.body_html = processHtmlRaw(docInfo.body_html);
      return docInfo;
    });
  }
  /**
   * 获取文章详情列表
   * @param cachedDocs
   * @param ids
   */
  getDocDetailList(cachedDocs, ids) {
    return __async(this, null, function* () {
      let articleList = [];
      let docs = cachedDocs;
      if (ids.length) {
        docs = docs.filter((doc) => {
          const exist = ids.indexOf(doc.slug) > -1;
          if (!exist) {
            _shared.out.info("\u8DF3\u8FC7\u4E0B\u8F7D", doc.title);
          }
          return exist;
        });
      }
      if (!(docs == null ? void 0 : docs.length)) {
        _shared.out.access("\u8DF3\u8FC7", "\u6CA1\u6709\u9700\u8981\u4E0B\u8F7D\u7684\u6587\u7AE0");
        return articleList;
      }
      _shared.out.info("\u5F85\u4E0B\u8F7D\u6570", String(docs.length));
      _shared.out.access("\u5F00\u59CB\u4E0B\u8F7D\u6587\u6863...");
      docs = docs.map((item, index) => __spreadProps(__spreadValues({}, item), { _index: index + 1 }));
      const promise = (doc) => __async(this, null, function* () {
        _shared.out.info(`\u4E0B\u8F7D\u6587\u6863 ${doc._index}/${docs.length}   `, doc.title);
        let article = yield this.getDocDetail(doc.slug);
        if (!doc.format && IllegalityDocFormat.some((item) => item === article.format)) {
          _shared.out.warning("\u6CE8\u610F", `\u3010${article.title}\u3011\u4E3A\u4E0D\u652F\u6301\u7684\u6587\u6863\u683C\u5F0F`);
        }
        article.body_original = article.body;
        const { body, properties } = getProps(article);
        let newBody = processMarkdownRaw(body);
        newBody = this.formatExtCtx(__spreadProps(__spreadValues({}, article), { body: newBody }));
        article.properties = properties;
        article.body = newBody;
        article.updated = new Date(article.updated_at).getTime();
        articleList.push(article);
      });
      yield _tinyasyncpool2.default.call(void 0, this.config.limit || 3, docs, promise);
      _shared.out.info("\u5DF2\u4E0B\u8F7D\u6570", String(articleList.length));
      return articleList;
    });
  }
};
var client_default = YuqueClient;

// src/token/core.ts

var YuqueWithToken = class {
  constructor(options) {
    this.pages = [];
    this.config = options;
    this.ctx = new client_default(this.config);
  }
  /**
   * list docs of a repo
   * @return {Promise<DocDetail[]>} return docs
   */
  getDocList() {
    return __async(this, null, function* () {
      _shared.out.info("\u6B63\u5728\u83B7\u53D6\u6587\u6863\u5217\u8868\uFF0C\u8BF7\u7A0D\u7B49...");
      let pages = yield this.ctx.getDocList();
      pages = pages.filter((page) => {
        if (!page.format)
          return true;
        if (IllegalityDocFormat.some((item) => item === page.format)) {
          _shared.out.warning("\u6CE8\u610F", `\u3010${page.title}\u3011\u4E3A\u4E0D\u652F\u6301\u7684\u6587\u6863\u683C\u5F0F`);
          return false;
        }
        return true;
      }).filter((page) => {
        return this.config.onlyPublic ? !!page.public : true;
      }).filter((page) => {
        return this.config.onlyPublished ? !!page.status : true;
      });
      this.pages = pages;
      _shared.out.info("\u6587\u6863\u603B\u6570", String(this.pages.length));
      return pages.map((page) => {
        const timestamp = new Date(page.updated_at).getTime();
        return {
          // 暂时只需要返回这些属性
          id: String(page.id),
          doc_id: page.slug,
          updated: timestamp
        };
      });
    });
  }
  /**
   * 获取文章详情列表
   * @param ids 需要下载的doc_id列表
   */
  getDocDetailList(ids) {
    return __async(this, null, function* () {
      return yield this.ctx.getDocDetailList(this.pages, ids);
    });
  }
};
var core_default = YuqueWithToken;

// src/pwd/client.ts


var _jsdom = require('jsdom');
var DEFAULT_HOST = "https://www.yuque.com";
var YuqueClient2 = class {
  constructor(config) {
    this.bookId = "";
    this.docList = [];
    this.catalog = [];
    this.config = config;
    this.config.username = config.username || process.env.YUQUE_USERNAME;
    this.config.password = config.password || process.env.YUQUE_PASSWORD;
    if (!this.config.username || !this.config.password || !this.config.login || !this.config.repo) {
      _shared.out.err("\u7F3A\u5C11\u53C2\u6570", "\u7F3A\u5C11\u8BED\u96C0\u914D\u7F6E\u4FE1\u606F");
      process.exit(-1);
    }
    this.namespace = `${this.config.login}/${this.config.repo}`;
    this.baseUrl = this.config.host || DEFAULT_HOST;
    if (this.baseUrl.endsWith("/")) {
      this.baseUrl = this.baseUrl.slice(0, -1);
    }
  }
  /**
   * 登陆
   */
  login() {
    return __async(this, null, function* () {
      const loginInfo = {
        login: this.config.username,
        password: encrypt(this.config.password),
        loginType: "password"
      };
      const res = yield _shared.request.call(void 0, 
        `${this.baseUrl}/api/mobile_app/accounts/login?language=zh-cn`,
        {
          method: "post",
          data: loginInfo,
          headers: {
            Referer: this.baseUrl + "/login?goto=https%3A%2F%2Fwww.yuque.com%2Fdashboard",
            origin: this.baseUrl,
            "user-agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 16_6_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/20G81 YuqueMobileApp/1.0.2 (AppBuild/650 Device/Phone Locale/zh-cn Theme/light YuqueType/public)"
          }
        }
      );
      if (res.status !== 200) {
        _shared.out.err("\u8BED\u96C0\u767B\u9646\u5931\u8D25");
        _shared.out.err(res);
        process.exit(-1);
      }
      if (res.headers["set-cookie"]) {
        this.cookie = {
          time: Date.now(),
          data: res.headers["set-cookie"]
        };
      }
      _shared.out.info("\u8BED\u96C0\u767B\u9646\u6210\u529F");
    });
  }
  /**
   * send api request to yuque
   * @param api
   * @param reqOpts
   * @param custom
   */
  request(api, reqOpts, custom) {
    return __async(this, null, function* () {
      var _a, _b;
      const url = `${this.baseUrl}/${api}`;
      const opts = __spreadValues({
        headers: {
          cookie: (_a = this.cookie) == null ? void 0 : _a.data
        }
      }, reqOpts);
      if (!((_b = opts.headers) == null ? void 0 : _b.cookie)) {
        _shared.out.err("\u672A\u767B\u5F55\u8BED\u96C0!");
        process.exit(-1);
      }
      if (custom) {
        const res2 = yield _shared.request.call(void 0, url, opts);
        return res2.data;
      }
      const res = yield _shared.request.call(void 0, url, opts);
      if (res.status !== 200) {
        _shared.out.err(res);
      }
      return res.data.data;
    });
  }
  /**
   * 获取目录
   */
  getToc() {
    return __async(this, null, function* () {
      var _a;
      try {
        const res = yield this.request(this.namespace, { method: "get", dataType: "text" }, true);
        const dom = new (0, _jsdom.JSDOM)(`${res}`, { runScripts: "dangerously" });
        const { book } = ((_a = dom == null ? void 0 : dom.window) == null ? void 0 : _a.appData) || {};
        dom.window.close();
        if (!book) {
          _shared.out.warning("\u722C\u53D6\u8BED\u96C0\u76EE\u5F55\u5931\u8D25\uFF0C\u8BF7\u7A0D\u540E\u91CD\u8BD5");
          process.exit(-1);
        }
        this.bookId = book.id;
        return (book == null ? void 0 : book.toc) || [];
      } catch (e) {
        _shared.out.warning("\u722C\u53D6\u8BED\u96C0\u76EE\u5F55\u5931\u8D25\uFF0C\u8BF7\u7A0D\u540E\u91CD\u8BD5", e.message);
        process.exit(-1);
      }
    });
  }
  /**
   * 获取文章列表(不带详情)
   */
  getDocList() {
    return __async(this, null, function* () {
      this.catalog = yield this.getToc();
      const docList = yield this.request(`api/docs`, {
        method: "GET",
        data: { book_id: this.bookId }
      });
      this.docList = docList;
      return docList;
    });
  }
  /**
   * 获取文章详情
   */
  getDocDetail(slug) {
    return __async(this, null, function* () {
      const yuqueDocString = yield this.request(
        `${this.namespace}/${slug}/markdown`,
        {
          method: "GET",
          data: {
            attachment: true,
            latexcode: false,
            anchor: false,
            linebreak: this.config.linebreak
          },
          dataType: "text"
        },
        true
      );
      const doc = this.docList.find((item) => item.slug === slug);
      const docInfo = __spreadValues({
        body: yuqueDocString,
        doc_id: slug,
        catalog: []
      }, doc);
      const find = this.catalog.find((item) => item.url === slug);
      if (find) {
        let catalogPath = [];
        let parentId = find.parent_uuid;
        for (let i = 0; i < find.level; i++) {
          const current = this.catalog.find((item) => item.uuid === parentId);
          parentId = current.parent_uuid;
          const catalog = {
            title: current.title,
            doc_id: slug
          };
          catalogPath.push(catalog);
        }
        docInfo.catalog = catalogPath.reverse();
      }
      return docInfo;
    });
  }
  /**
   * 获取文章详情列表
   * @param cachedDocs
   * @param ids
   */
  getDocDetailList(cachedDocs, ids) {
    return __async(this, null, function* () {
      let articleList = [];
      let docs = cachedDocs;
      if (ids.length) {
        docs = docs.filter((doc) => {
          const exist = ids.indexOf(doc.slug) > -1;
          if (!exist) {
            _shared.out.info("\u8DF3\u8FC7\u4E0B\u8F7D", doc.title);
          }
          return exist;
        });
      }
      if (!(docs == null ? void 0 : docs.length)) {
        _shared.out.access("\u8DF3\u8FC7", "\u6CA1\u6709\u9700\u8981\u4E0B\u8F7D\u7684\u6587\u7AE0");
        return articleList;
      }
      _shared.out.info("\u5F85\u4E0B\u8F7D\u6570", String(docs.length));
      _shared.out.access("\u5F00\u59CB\u4E0B\u8F7D\u6587\u6863...");
      docs = docs.map((item, index) => __spreadProps(__spreadValues({}, item), { _index: index + 1 }));
      const promise = (doc) => __async(this, null, function* () {
        _shared.out.info(`\u4E0B\u8F7D\u6587\u6863 ${doc._index}/${docs.length}   `, doc.title);
        let article = yield this.getDocDetail(doc.slug);
        if (!doc.format && IllegalityDocFormat.some((item) => item === article.format)) {
          _shared.out.warning("\u6CE8\u610F", `\u3010${article.title}\u3011\u4E3A\u4E0D\u652F\u6301\u7684\u6587\u6863\u683C\u5F0F`);
        }
        const { body, properties } = getProps(article, true);
        article.properties = properties;
        article.body = body;
        article.body_original = body;
        article.updated = new Date(article.updated_at).getTime();
        articleList.push(article);
      });
      yield _tinyasyncpool2.default.call(void 0, this.config.limit || 3, docs, promise);
      _shared.out.info("\u5DF2\u4E0B\u8F7D\u6570", String(articleList.length));
      return articleList;
    });
  }
};
var client_default2 = YuqueClient2;

// src/pwd/core.ts

var YuqueWithPwd = class {
  constructor(options) {
    this.pages = [];
    this.config = options;
    this.ctx = new client_default2(this.config);
  }
  /**
   * 登陆语雀
   */
  login() {
    return __async(this, null, function* () {
      yield this.ctx.login();
    });
  }
  /**
   * list docs of a repo
   * @return {Promise<DocDetail[]>} return docs
   */
  getDocList() {
    return __async(this, null, function* () {
      _shared.out.info("\u6B63\u5728\u83B7\u53D6\u6587\u6863\u5217\u8868\uFF0C\u8BF7\u7A0D\u7B49...");
      let pages = yield this.ctx.getDocList();
      pages = pages.filter((page) => {
        if (!page.format)
          return true;
        if (IllegalityDocFormat.some((item) => item === page.format)) {
          _shared.out.warning("\u6CE8\u610F", `\u3010${page.title}\u3011\u4E3A\u4E0D\u652F\u6301\u7684\u6587\u6863\u683C\u5F0F`);
          return false;
        }
        return true;
      }).filter((page) => {
        return this.config.onlyPublic ? !!page.public : true;
      }).filter((page) => {
        return this.config.onlyPublished ? !!page.status : true;
      });
      this.pages = pages;
      _shared.out.info("\u6587\u6863\u603B\u6570", String(this.pages.length));
      return pages.map((page) => {
        const timestamp = new Date(page.updated_at).getTime();
        return {
          // 暂时只需要返回这些属性
          id: String(page.id),
          doc_id: page.slug,
          updated: timestamp
        };
      });
    });
  }
  /**
   * 获取文章详情列表
   * @param ids 需要下载的doc_id列表
   */
  getDocDetailList(ids) {
    return __async(this, null, function* () {
      return yield this.ctx.getDocDetailList(this.pages, ids);
    });
  }
};
var core_default2 = YuqueWithPwd;



exports.YuqueWithPwd = core_default2; exports.YuqueWithToken = core_default;
//# sourceMappingURL=index.js.map