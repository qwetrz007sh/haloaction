'use strict';

var markdownTable = require('markdown-table');

const inlineCode = (text) => {
    return `\`${text}\``;
};
const bold = (text) => {
    return `**${text}**`;
};
const italic = (text) => {
    return `_${text}_`;
};
const strikethrough = (text) => {
    return `~~${text}~~`;
};
const underline = (text) => {
    return `<u>${text}</u>`;
};
const link = (text, href) => {
    return `[${text}](${href})`;
};
const codeBlock = (text, language) => {
    if (language === 'plain text')
        language = 'text';
    return `\`\`\`${language}
${text}
\`\`\``;
};
const equation = (text) => {
    return `$$\n${text}$$\n`;
};
const heading = (text, level = 1) => {
    const pound = '#'.repeat(level);
    return `${pound} ${text}`;
};
const quote = (text) => {
    // the replace is done to handle multiple lines
    return `> ${text.replace(/\n/g, '  \n> ')}`;
};
const bullet = (text, count) => {
    let renderText = text.trim();
    return count ? `${count}. ${renderText}` : `- ${renderText}`;
};
const todo = (text, checked) => {
    return checked ? `- [x] ${text}` : `- [ ] ${text}`;
};
const image = (alt, href) => {
    return `![${alt}](${href})`;
};
const addTabSpace = (text, n = 0) => {
    const tab = '	';
    for (let i = 0; i < n; i++) {
        if (text.includes('\n')) {
            const multiLineText = text.split(/(?:^|\n)/).join(`\n${tab}`);
            text = tab + multiLineText;
        }
        else
            text = tab + text;
    }
    return text;
};
const divider = () => {
    return '---';
};
const table = (cells) => {
    return markdownTable(cells);
};

exports.addTabSpace = addTabSpace;
exports.bold = bold;
exports.bullet = bullet;
exports.codeBlock = codeBlock;
exports.divider = divider;
exports.equation = equation;
exports.heading = heading;
exports.image = image;
exports.inlineCode = inlineCode;
exports.italic = italic;
exports.link = link;
exports.quote = quote;
exports.strikethrough = strikethrough;
exports.table = table;
exports.todo = todo;
exports.underline = underline;
//# sourceMappingURL=md.js.map
