'use strict';

var md = require('./md.js');
var shared = require('@feishux/shared');
var emoji = require('./emoji.js');

const _unsupported = (type) => {
    return ({ pageTitle }) => {
        shared.out.debug(`【${pageTitle}】存在暂不支持的块类型: ${shared.IBlockTypeText[type]}`);
        return '';
    };
};
const getBaseTextValue = (baseData, pageTitle) => {
    var _a;
    let str = '';
    (_a = baseData.elements) === null || _a === void 0 ? void 0 : _a.forEach((item) => {
        if (item.text_run) {
            const textRun = item.text_run;
            const textStyle = textRun.text_element_style;
            let content = textRun.content;
            if (textStyle.link) {
                // url 解码
                content = md.link(content, decodeURIComponent(textStyle.link.url));
                str += content;
                // 跳出本次循环
                return;
            }
            // 文字
            if (textStyle.bold) {
                // 加粗
                content = md.bold(content);
            }
            if (textStyle.underline) {
                // 下划线
                content = md.underline(content);
            }
            if (textStyle.italic) {
                // 斜体
                content = md.italic(content);
            }
            if (textStyle.strikethrough) {
                // 删除线
                content = md.strikethrough(content);
            }
            if (textStyle.inline_code) {
                // 行内代码
                content = md.inlineCode(content);
            }
            str += content;
        }
        else if (item.equation) {
            // let content = textRun.content
            // 行内公式
            str += md.equation(item.equation.content);
        }
        else if (item.reminder) {
            // 日期提醒
            shared.out.debug(`【${pageTitle}】存在暂不支持的块类型: 日期提醒`);
        }
        else {
            shared.out.debug(`【${pageTitle}】存在暂不支持的块类型，已忽略`);
        }
    });
    return str;
};
/**
 * 文字
 * @param block
 * @param pageTitle
 */
const getTextValue = ({ block, pageTitle }) => {
    return getBaseTextValue(block.text, pageTitle);
};
/**
 * 待办事项
 * @param block
 * @param pageTitle
 */
const getTodoValue = ({ block, pageTitle }) => {
    const todoStr = getBaseTextValue(block.todo, pageTitle);
    return md.todo(todoStr, block.todo.style.done);
};
/**
 * 无序列表
 * @param block
 * @param blocks
 * @param pageTitle
 */
const getBulletValue = ({ block, blocks, pageTitle }) => {
    let childrenStr = '\n';
    const childrenIds = block.children;
    childrenIds === null || childrenIds === void 0 ? void 0 : childrenIds.forEach((id) => {
        const childBlock = blocks.find((item) => item.block_id === id);
        childrenStr += md.addTabSpace(transform[childBlock.block_type]({ block: childBlock, blocks, pageTitle }), 1);
    });
    const bulletStr = getBaseTextValue(block.bullet, pageTitle);
    return md.bullet(bulletStr) + childrenStr;
};
/**
 * 有序列表
 * @param block
 * @param blocks
 * @param pageTitle
 */
const getOrderedValue = ({ block, blocks, pageTitle }) => {
    let childrenStr = '\n';
    const childrenIds = block.children;
    childrenIds === null || childrenIds === void 0 ? void 0 : childrenIds.forEach((id) => {
        const childBlock = blocks.find((item) => item.block_id === id);
        childrenStr += md.addTabSpace(transform[childBlock.block_type]({ block: childBlock, blocks, pageTitle }), 1);
    });
    const orderedStr = getBaseTextValue(block.ordered, pageTitle);
    return md.bullet(orderedStr, 1) + childrenStr;
};
/**
 * 标题
 * @param level
 */
const getTitleValue = (level) => {
    return ({ block, pageTitle }) => {
        const key = `heading${level}`;
        // @ts-ignore
        const headingText = getBaseTextValue(block[key], pageTitle);
        return md.heading(headingText, level);
    };
};
/**
 * 分割线
 */
const getDividingValue = () => {
    return md.divider();
};
/**
 * 引用
 * @param block
 * @param blocks
 * @param pageTitle
 */
const getQuoteValue = ({ block, blocks, pageTitle }) => {
    var _a;
    if (block.block_type === 15 /* IBlockType.quote */) {
        const quoteStr = getBaseTextValue(block.quote, pageTitle);
        return md.quote(quoteStr);
    }
    else {
        const str = (_a = block.children) === null || _a === void 0 ? void 0 : _a.map((id, index) => {
            var _a;
            const childBlock = blocks.find((item) => item.block_id === id);
            const quoteText = getBaseTextValue(childBlock.text, pageTitle);
            if (index === 0 && block.block_type === 19 /* IBlockType.callout */ && ((_a = block.callout) === null || _a === void 0 ? void 0 : _a.emoji_id)) {
                const emoji$1 = emoji.getEmojiChar(block.callout.emoji_id);
                return emoji$1 + ' ' + quoteText;
            }
            return quoteText;
        }).join('\n');
        return md.quote(str);
    }
};
/**
 * 媒体
 * @param block
 */
const getMediaValue = ({ block }) => {
    return md.image('image', block.image.token);
};
/**
 * 代码块
 * @param block
 */
const getCodeValue = ({ block }) => {
    const code = block.code;
    // @ts-ignore
    const language = shared.codeLanguageMap[code.style.language];
    const text = code.elements
        .map((item) => {
        return item.text_run.content;
    })
        .join('');
    return md.codeBlock(text, language);
};
/**
 * 表格
 * @param block
 * @param blocks
 * @param pageTitle
 */
const getTableValue = ({ block, blocks, pageTitle }) => {
    const tableProp = block.table;
    const tableCells = tableProp.cells;
    // const rowSize = tableProp.property.row_size
    const columnSize = tableProp.property.column_size;
    // 二维行数组
    const cells = [];
    let cellString = [];
    tableCells.forEach((cellId, index) => {
        var _a;
        const cellBlock = blocks.find((item) => item.block_id === cellId);
        let text = '';
        (_a = cellBlock.children) === null || _a === void 0 ? void 0 : _a.forEach((id) => {
            const childBlock = blocks.find((item) => item.block_id === id);
            text += getTextValue({ block: childBlock, blocks, pageTitle });
        });
        cellString.push(text);
        if ((index + 1) % columnSize === 0) {
            // 生成二维行数组
            cells.push(cellString);
            cellString = [];
        }
    });
    // 转Table
    return '\n' + md.table(cells) + '\n';
};
const getChildren = ({ block, blocks, pageTitle }) => {
    const children = block.children;
    if (children === null || children === void 0 ? void 0 : children.length) {
        return children
            .map((id) => {
            const childBlock = blocks.find((item) => item.block_id === id);
            return transform[childBlock.block_type]({ block: childBlock, blocks, pageTitle });
        })
            .join('\n');
    }
    return '';
};
const transform = {
    [1 /* IBlockType.page */]: _unsupported(1 /* IBlockType.page */),
    [2 /* IBlockType.text */]: getTextValue,
    // [IBlockType.Toggle]: getToggleValue,
    [3 /* IBlockType.heading1 */]: getTitleValue(1),
    [4 /* IBlockType.heading2 */]: getTitleValue(2),
    [5 /* IBlockType.heading3 */]: getTitleValue(3),
    [6 /* IBlockType.heading4 */]: getTitleValue(4),
    [7 /* IBlockType.heading5 */]: getTitleValue(5),
    [8 /* IBlockType.heading6 */]: getTitleValue(6),
    [9 /* IBlockType.heading7 */]: getTitleValue(7),
    [10 /* IBlockType.heading8 */]: getTitleValue(8),
    [11 /* IBlockType.heading9 */]: getTitleValue(9),
    [12 /* IBlockType.bullet */]: getBulletValue,
    [13 /* IBlockType.ordered */]: getOrderedValue,
    [14 /* IBlockType.code */]: getCodeValue,
    [15 /* IBlockType.quote */]: getQuoteValue,
    [34 /* IBlockType.quote_container */]: getQuoteValue,
    [17 /* IBlockType.todo */]: getTodoValue,
    [18 /* IBlockType.bitable */]: _unsupported(18 /* IBlockType.bitable */),
    [19 /* IBlockType.callout */]: getQuoteValue,
    [20 /* IBlockType.chat_card */]: _unsupported(20 /* IBlockType.chat_card */),
    [21 /* IBlockType.diagram */]: _unsupported(21 /* IBlockType.diagram */),
    [22 /* IBlockType.divider */]: getDividingValue,
    [23 /* IBlockType.file */]: _unsupported(23 /* IBlockType.file */),
    [24 /* IBlockType.grid */]: _unsupported(24 /* IBlockType.grid */),
    [25 /* IBlockType.grid_column */]: _unsupported(25 /* IBlockType.grid_column */),
    [26 /* IBlockType.iframe */]: _unsupported(26 /* IBlockType.iframe */),
    [27 /* IBlockType.image */]: getMediaValue,
    [28 /* IBlockType.isv */]: _unsupported(28 /* IBlockType.isv */),
    [29 /* IBlockType.mindnote */]: _unsupported(29 /* IBlockType.mindnote */),
    [30 /* IBlockType.sheet */]: _unsupported(30 /* IBlockType.sheet */),
    [31 /* IBlockType.table */]: getTableValue,
    [32 /* IBlockType.table_cell */]: _unsupported(32 /* IBlockType.table_cell */),
    [33 /* IBlockType.view */]: getChildren,
    [35 /* IBlockType.task */]: _unsupported(35 /* IBlockType.task */),
    [36 /* IBlockType.okr */]: _unsupported(36 /* IBlockType.okr */),
    [37 /* IBlockType.okr_objective */]: _unsupported(36 /* IBlockType.okr */),
    [38 /* IBlockType.okr_key_result */]: _unsupported(36 /* IBlockType.okr */),
    [39 /* IBlockType.okr_progress */]: _unsupported(36 /* IBlockType.okr */),
    [40 /* IBlockType.add_ons */]: _unsupported(40 /* IBlockType.add_ons */),
    [41 /* IBlockType.jira_issue */]: _unsupported(41 /* IBlockType.jira_issue */),
    [42 /* IBlockType.wiki_catalog */]: _unsupported(42 /* IBlockType.wiki_catalog */),
};

exports._unsupported = _unsupported;
exports.getBulletValue = getBulletValue;
exports.getChildren = getChildren;
exports.getCodeValue = getCodeValue;
exports.getDividingValue = getDividingValue;
exports.getMediaValue = getMediaValue;
exports.getOrderedValue = getOrderedValue;
exports.getQuoteValue = getQuoteValue;
exports.getTableValue = getTableValue;
exports.getTextValue = getTextValue;
exports.getTitleValue = getTitleValue;
exports.getTodoValue = getTodoValue;
exports.transform = transform;
//# sourceMappingURL=feishu.js.map
