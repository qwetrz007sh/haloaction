'use strict';

var tslib_es6 = require('./node_modules/.pnpm/@rollup_plugin-typescript@11.1.4_npfczztdgjrztevivmmoaxbi54/node_modules/tslib/tslib.es6.js');
var shared = require('@feishux/shared');

/**
 * FeiShu API
 */
class FeiShuClient {
    constructor(config) {
        this.init = () => tslib_es6.__awaiter(this, void 0, void 0, function* () {
            if (!this.initPromise) {
                this.initPromise = this.getAccessToken();
            }
            return yield this.initPromise;
        });
        this.config = config;
        this.config.baseUrl = (config === null || config === void 0 ? void 0 : config.baseUrl) || 'https://open.feishu.cn/open-apis';
        if (!this.config.appId || !this.config.appSecret) {
            shared.out.err('缺少参数', '缺少飞书 应用ID 或 应用密钥');
            process.exit(-1);
        }
        this.initPromise = this.init();
    }
    getAccessToken() {
        return tslib_es6.__awaiter(this, void 0, void 0, function* () {
            // https://open.feishu.cn/document/server-docs/authentication-management/access-token/tenant_access_token_internal
            const url = `${this.config.baseUrl}/auth/v3/tenant_access_token/internal`;
            const res = yield shared.request(url, {
                data: {
                    app_id: this.config.appId,
                    app_secret: this.config.appSecret,
                },
                method: 'post',
            });
            // @ts-ignore
            this.tenantAccessToken = res.data.tenant_access_token;
        });
    }
    _fetch(endpoint, reqOpts) {
        return tslib_es6.__awaiter(this, void 0, void 0, function* () {
            const url = `${this.config.baseUrl}/${endpoint}`;
            const res = yield shared.request(url, Object.assign(Object.assign({}, reqOpts), { headers: {
                    Authorization: `Bearer ${this.tenantAccessToken}`,
                } }));
            return res.data.data;
        });
    }
    /**
     * 获取页面所有Block
     * @param pageId
     */
    getPageBlocks(pageId) {
        return tslib_es6.__awaiter(this, void 0, void 0, function* () {
            yield this.initPromise;
            // https://open.feishu.cn/document/server-docs/docs/docs/docx-v1/document/list
            const getData = (pageId, page_token, result = []) => tslib_es6.__awaiter(this, void 0, void 0, function* () {
                const res = yield this._fetch(`docx/v1/documents/${pageId}/blocks`, {
                    method: 'GET',
                    data: {
                        page_token,
                        page_size: 200,
                    },
                });
                result.push(...res.items);
                if (res.has_more) {
                    yield getData(pageId, res.page_token, result);
                }
                return result;
            });
            return getData(pageId);
        });
    }
    /**
     * 获取素材
     * @private
     */
    getResourceItem(file_token) {
        return tslib_es6.__awaiter(this, void 0, void 0, function* () {
            yield this.initPromise;
            // https://open.feishu.cn/document/server-docs/docs/drive-v1/media/download
            const url = `${this.config.baseUrl}/drive/v1/medias/${file_token}/download`;
            const res = yield shared.request(url, {
                dataType: 'buffer',
                headers: {
                    Authorization: `Bearer ${this.tenantAccessToken}`,
                },
            });
            const type = res.headers['content-type'].split('/')[1];
            return {
                buffer: res.data,
                type,
                name: file_token + '.' + type,
            };
        });
    }
    /**
     * 获取文件夹下的文档树（Tree 结构）
     * @param folder_token
     */
    getFolderTree(folder_token) {
        return tslib_es6.__awaiter(this, void 0, void 0, function* () {
            yield this.initPromise;
            const getData = (folder_token, page_token, result = []) => tslib_es6.__awaiter(this, void 0, void 0, function* () {
                // https://open.feishu.cn/document/server-docs/docs/drive-v1/folder/list
                const res = yield this._fetch('drive/v1/files', {
                    method: 'get',
                    data: {
                        page_token,
                        page_size: 200,
                        folder_token,
                    },
                });
                result.push(...res.files);
                if (res.has_more) {
                    yield getData(folder_token, res.page_token, result);
                }
                for (const item of result) {
                    if (item.type === 'folder') {
                        // 重新getData获取文件夹下的文档
                        item.children = yield getData(item.token);
                    }
                }
                return result;
            });
            return getData(folder_token);
        });
    }
    /**
     * 获取文件夹下的文档列表
     * @param folder_token
     */
    getFolderList(folder_token) {
        return tslib_es6.__awaiter(this, void 0, void 0, function* () {
            yield this.initPromise;
            const getData = (page_token, result = []) => tslib_es6.__awaiter(this, void 0, void 0, function* () {
                // https://open.feishu.cn/document/server-docs/docs/drive-v1/folder/list
                const res = yield this._fetch('drive/v1/files', {
                    method: 'get',
                    data: {
                        page_token,
                        page_size: 200,
                        folder_token,
                    },
                });
                result.push(...res.files);
                if (res.has_more) {
                    yield getData(res.page_token, result);
                }
                return result;
            });
            return getData();
        });
    }
    /**
     * 获取知识库下的子节点列表
     * @param spaceId 空间 ID
     * @param parent_node_token 父级 Node 节点
     */
    getReposNodes(spaceId, parent_node_token) {
        return tslib_es6.__awaiter(this, void 0, void 0, function* () {
            yield this.initPromise;
            const getData = (page_token, result = []) => tslib_es6.__awaiter(this, void 0, void 0, function* () {
                const res = yield this._fetch(`wiki/v2/spaces/${spaceId}/nodes`, {
                    method: 'GET',
                    data: {
                        parent_node_token,
                        page_token,
                        page_size: 50,
                    },
                });
                result.push(...res.items);
                if (res.has_more) {
                    yield getData(res.page_token, result);
                }
                return result;
            });
            return getData();
        });
    }
    /**
     * 获取知识库下的子节点列表(Tree 结构)
     * @param spaceId
     * @param parent_node_token
     */
    getReposNodesTree(spaceId, parent_node_token) {
        return tslib_es6.__awaiter(this, void 0, void 0, function* () {
            yield this.initPromise;
            const getData = (nodeToken, page_token, result = []) => tslib_es6.__awaiter(this, void 0, void 0, function* () {
                const res = yield this._fetch(`wiki/v2/spaces/${spaceId}/nodes`, {
                    method: 'GET',
                    data: {
                        parent_node_token: nodeToken,
                        page_token,
                        page_size: 50,
                    },
                });
                result.push(...res.items);
                if (res.has_more) {
                    yield getData(parent_node_token, res.page_token, result);
                }
                for (const item of result) {
                    if (item.has_child) {
                        // 重新getData获取文件夹下的文档
                        item.children = yield getData(item.node_token);
                    }
                }
                return result;
            });
            return getData();
        });
    }
}

exports.FeiShuClient = FeiShuClient;
//# sourceMappingURL=api.js.map
