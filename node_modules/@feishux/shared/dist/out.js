'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var shell = require('shelljs');
var chalk = require('chalk');
var lodash = require('lodash');
var out$1 = require('./const/out.js');
var process = require('node:process');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var shell__namespace = /*#__PURE__*/_interopNamespaceDefault(shell);
var process__namespace = /*#__PURE__*/_interopNamespaceDefault(process);

/**
 * 辅助输出过程日志
 *
 * @export
 * @param {LogLevel} level
 * @param {string} head
 * @param {string} [content]
 */
function println(level, head, content) {
    const color = {
        [out$1.LogLevel.ACCESS]: chalk.blue,
        [out$1.LogLevel.INFO]: chalk.green,
        [out$1.LogLevel.WARNING]: chalk.yellow,
        [out$1.LogLevel.ERROR]: chalk.red,
        [out$1.LogLevel.DEBUG]: chalk.magenta,
    };
    if (typeof head === 'object' && !content) {
        try {
            head = JSON.stringify(head);
        }
        catch (e) {
            console.log(head);
            return;
        }
        shell__namespace.echo(color[level](head));
    }
    if (!head) {
        if (!content) {
            return;
        }
        head = content;
    }
    const MIN_HEAD_LENGTH = 10;
    const emptyHead = head.replace(/[\u4e00-\u9fa5]/g, 'aa');
    const headLength = Math.max(emptyHead.length + 2, MIN_HEAD_LENGTH);
    const fillLength = Math.max(MIN_HEAD_LENGTH - emptyHead.length, 0);
    if (!content) {
        shell__namespace.echo(color[level](head));
        return;
    }
    if (content && typeof content !== 'string') {
        shell__namespace.echo(color[level](head));
        shell__namespace.echo(content);
        return;
    }
    (content !== null && content !== void 0 ? content : '')
        .replace('/\r\n/g', '\n')
        .split('\n')
        .map((c) => lodash.chunk(c, out$1.__columns - headLength).map((str) => str.join('')))
        .reduce((r, c) => r.concat(c))
        .forEach((str, i) => {
        const _head = i ? ' '.repeat(headLength) : color[level](`${head}${' '.repeat(fillLength)}`);
        shell__namespace.echo(_head + str);
    });
}
const out = {
    access(head, content) {
        println(out$1.LogLevel.ACCESS, head, content);
    },
    info(head, content) {
        println(out$1.LogLevel.INFO, head, content);
    },
    warning(head, content) {
        println(out$1.LogLevel.WARNING, head, content);
    },
    err(head, content) {
        println(out$1.LogLevel.ERROR, head, content);
    },
    debug(head, content) {
        process__namespace.env.DEBUG && println(out$1.LogLevel.DEBUG, head, content);
    },
};

exports.default = out;
exports.println = println;
//# sourceMappingURL=out.js.map
