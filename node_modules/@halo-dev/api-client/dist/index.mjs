import globalAxios from 'axios';

const BASE_PATH = "http://localhost:8090".replace(/\/+$/, "");
class BaseAPI {
  constructor(configuration, basePath = BASE_PATH, axios = globalAxios) {
    this.basePath = basePath;
    this.axios = axios;
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
}
class RequiredError extends Error {
  constructor(field, msg) {
    super(msg);
    this.field = field;
    this.name = "RequiredError";
  }
}

const DUMMY_BASE_URL = "https://example.com";
const assertParamExists = function(functionName, paramName, paramValue) {
  if (paramValue === null || paramValue === void 0) {
    throw new RequiredError(
      paramName,
      `Required parameter ${paramName} was null or undefined when calling ${functionName}.`
    );
  }
};
const setBasicAuthToObject = function(object, configuration) {
  if (configuration && (configuration.username || configuration.password)) {
    object["auth"] = {
      username: configuration.username,
      password: configuration.password
    };
  }
};
const setBearerAuthToObject = async function(object, configuration) {
  if (configuration && configuration.accessToken) {
    const accessToken = typeof configuration.accessToken === "function" ? await configuration.accessToken() : await configuration.accessToken;
    object["Authorization"] = "Bearer " + accessToken;
  }
};
function setFlattenedQueryParams(urlSearchParams, parameter, key = "") {
  if (parameter == null)
    return;
  if (typeof parameter === "object") {
    if (Array.isArray(parameter)) {
      parameter.forEach(
        (item) => setFlattenedQueryParams(urlSearchParams, item, key)
      );
    } else {
      Object.keys(parameter).forEach(
        (currentKey) => setFlattenedQueryParams(
          urlSearchParams,
          parameter[currentKey],
          `${key}${key !== "" ? "." : ""}${currentKey}`
        )
      );
    }
  } else {
    if (urlSearchParams.has(key)) {
      urlSearchParams.append(key, parameter);
    } else {
      urlSearchParams.set(key, parameter);
    }
  }
}
const setSearchParams = function(url, ...objects) {
  const searchParams = new URLSearchParams(url.search);
  setFlattenedQueryParams(searchParams, objects);
  url.search = searchParams.toString();
};
const serializeDataIfNeeded = function(value, requestOptions, configuration) {
  const nonString = typeof value !== "string";
  const needsSerialization = nonString && configuration && configuration.isJsonMime ? configuration.isJsonMime(requestOptions.headers["Content-Type"]) : nonString;
  return needsSerialization ? JSON.stringify(value !== void 0 ? value : {}) : value || "";
};
const toPathString = function(url) {
  return url.pathname + url.search + url.hash;
};
const createRequestFunction = function(axiosArgs, globalAxios, BASE_PATH, configuration) {
  return (axios = globalAxios, basePath = BASE_PATH) => {
    const axiosRequestArgs = {
      ...axiosArgs.options,
      url: (configuration?.basePath || basePath) + axiosArgs.url
    };
    return axios.request(axiosRequestArgs);
  };
};

const ApiConsoleHaloRunV1alpha1AttachmentApiAxiosParamCreator = function(configuration) {
  return {
    searchAttachments: async (displayName, fieldSelector, group, labelSelector, page, policy, size, sort, ungrouped, uploadedBy, options = {}) => {
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/attachments`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (displayName !== void 0) {
        localVarQueryParameter["displayName"] = displayName;
      }
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (group !== void 0) {
        localVarQueryParameter["group"] = group;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (policy !== void 0) {
        localVarQueryParameter["policy"] = policy;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      if (ungrouped !== void 0) {
        localVarQueryParameter["ungrouped"] = ungrouped;
      }
      if (uploadedBy !== void 0) {
        localVarQueryParameter["uploadedBy"] = uploadedBy;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    uploadAttachment: async (file, policyName, groupName, options = {}) => {
      assertParamExists("uploadAttachment", "file", file);
      assertParamExists("uploadAttachment", "policyName", policyName);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/attachments/upload`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      const localVarFormParams = new (configuration && configuration.formDataCtor || FormData)();
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (file !== void 0) {
        localVarFormParams.append("file", file);
      }
      if (groupName !== void 0) {
        localVarFormParams.append("groupName", groupName);
      }
      if (policyName !== void 0) {
        localVarFormParams.append("policyName", policyName);
      }
      localVarHeaderParameter["Content-Type"] = "multipart/form-data";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = localVarFormParams;
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ApiConsoleHaloRunV1alpha1AttachmentApiFp = function(configuration) {
  const localVarAxiosParamCreator = ApiConsoleHaloRunV1alpha1AttachmentApiAxiosParamCreator(configuration);
  return {
    async searchAttachments(displayName, fieldSelector, group, labelSelector, page, policy, size, sort, ungrouped, uploadedBy, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.searchAttachments(
        displayName,
        fieldSelector,
        group,
        labelSelector,
        page,
        policy,
        size,
        sort,
        ungrouped,
        uploadedBy,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async uploadAttachment(file, policyName, groupName, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.uploadAttachment(
        file,
        policyName,
        groupName,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ApiConsoleHaloRunV1alpha1AttachmentApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ApiConsoleHaloRunV1alpha1AttachmentApiFp(configuration);
  return {
    searchAttachments(requestParameters = {}, options) {
      return localVarFp.searchAttachments(
        requestParameters.displayName,
        requestParameters.fieldSelector,
        requestParameters.group,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.policy,
        requestParameters.size,
        requestParameters.sort,
        requestParameters.ungrouped,
        requestParameters.uploadedBy,
        options
      ).then((request) => request(axios, basePath));
    },
    uploadAttachment(requestParameters, options) {
      return localVarFp.uploadAttachment(
        requestParameters.file,
        requestParameters.policyName,
        requestParameters.groupName,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class ApiConsoleHaloRunV1alpha1AttachmentApi extends BaseAPI {
  searchAttachments(requestParameters = {}, options) {
    return ApiConsoleHaloRunV1alpha1AttachmentApiFp(this.configuration).searchAttachments(
      requestParameters.displayName,
      requestParameters.fieldSelector,
      requestParameters.group,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.policy,
      requestParameters.size,
      requestParameters.sort,
      requestParameters.ungrouped,
      requestParameters.uploadedBy,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  uploadAttachment(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1AttachmentApiFp(this.configuration).uploadAttachment(
      requestParameters.file,
      requestParameters.policyName,
      requestParameters.groupName,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const ApiConsoleHaloRunV1alpha1AuthProviderApiAxiosParamCreator = function(configuration) {
  return {
    disableAuthProvider: async (name, options = {}) => {
      assertParamExists("disableAuthProvider", "name", name);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/auth-providers/{name}/disable`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    enableAuthProvider: async (name, options = {}) => {
      assertParamExists("enableAuthProvider", "name", name);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/auth-providers/{name}/enable`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listAuthProviders: async (options = {}) => {
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/auth-providers`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ApiConsoleHaloRunV1alpha1AuthProviderApiFp = function(configuration) {
  const localVarAxiosParamCreator = ApiConsoleHaloRunV1alpha1AuthProviderApiAxiosParamCreator(configuration);
  return {
    async disableAuthProvider(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.disableAuthProvider(name, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async enableAuthProvider(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.enableAuthProvider(name, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listAuthProviders(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listAuthProviders(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ApiConsoleHaloRunV1alpha1AuthProviderApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ApiConsoleHaloRunV1alpha1AuthProviderApiFp(configuration);
  return {
    disableAuthProvider(requestParameters, options) {
      return localVarFp.disableAuthProvider(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    enableAuthProvider(requestParameters, options) {
      return localVarFp.enableAuthProvider(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    listAuthProviders(options) {
      return localVarFp.listAuthProviders(options).then((request) => request(axios, basePath));
    }
  };
};
class ApiConsoleHaloRunV1alpha1AuthProviderApi extends BaseAPI {
  disableAuthProvider(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1AuthProviderApiFp(this.configuration).disableAuthProvider(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  enableAuthProvider(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1AuthProviderApiFp(this.configuration).enableAuthProvider(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  listAuthProviders(options) {
    return ApiConsoleHaloRunV1alpha1AuthProviderApiFp(this.configuration).listAuthProviders(options).then((request) => request(this.axios, this.basePath));
  }
}

const ApiConsoleHaloRunV1alpha1CommentApiAxiosParamCreator = function(configuration) {
  return {
    createComment: async (commentRequest, options = {}) => {
      assertParamExists("createComment", "commentRequest", commentRequest);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/comments`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        commentRequest,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    createReply: async (name, replyRequest, options = {}) => {
      assertParamExists("createReply", "name", name);
      assertParamExists("createReply", "replyRequest", replyRequest);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/comments/{name}/reply`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        replyRequest,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listComments: async (allowNotification, approved, fieldSelector, hidden, keyword, labelSelector, ownerKind, ownerName, page, size, sort, subjectKind, subjectName, top, options = {}) => {
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/comments`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (allowNotification !== void 0) {
        localVarQueryParameter["allowNotification"] = allowNotification;
      }
      if (approved !== void 0) {
        localVarQueryParameter["approved"] = approved;
      }
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (hidden !== void 0) {
        localVarQueryParameter["hidden"] = hidden;
      }
      if (keyword !== void 0) {
        localVarQueryParameter["keyword"] = keyword;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (ownerKind !== void 0) {
        localVarQueryParameter["ownerKind"] = ownerKind;
      }
      if (ownerName !== void 0) {
        localVarQueryParameter["ownerName"] = ownerName;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      if (subjectKind !== void 0) {
        localVarQueryParameter["subjectKind"] = subjectKind;
      }
      if (subjectName !== void 0) {
        localVarQueryParameter["subjectName"] = subjectName;
      }
      if (top !== void 0) {
        localVarQueryParameter["top"] = top;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ApiConsoleHaloRunV1alpha1CommentApiFp = function(configuration) {
  const localVarAxiosParamCreator = ApiConsoleHaloRunV1alpha1CommentApiAxiosParamCreator(configuration);
  return {
    async createComment(commentRequest, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createComment(
        commentRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async createReply(name, replyRequest, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createReply(
        name,
        replyRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listComments(allowNotification, approved, fieldSelector, hidden, keyword, labelSelector, ownerKind, ownerName, page, size, sort, subjectKind, subjectName, top, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listComments(
        allowNotification,
        approved,
        fieldSelector,
        hidden,
        keyword,
        labelSelector,
        ownerKind,
        ownerName,
        page,
        size,
        sort,
        subjectKind,
        subjectName,
        top,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ApiConsoleHaloRunV1alpha1CommentApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ApiConsoleHaloRunV1alpha1CommentApiFp(configuration);
  return {
    createComment(requestParameters, options) {
      return localVarFp.createComment(requestParameters.commentRequest, options).then((request) => request(axios, basePath));
    },
    createReply(requestParameters, options) {
      return localVarFp.createReply(
        requestParameters.name,
        requestParameters.replyRequest,
        options
      ).then((request) => request(axios, basePath));
    },
    listComments(requestParameters = {}, options) {
      return localVarFp.listComments(
        requestParameters.allowNotification,
        requestParameters.approved,
        requestParameters.fieldSelector,
        requestParameters.hidden,
        requestParameters.keyword,
        requestParameters.labelSelector,
        requestParameters.ownerKind,
        requestParameters.ownerName,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        requestParameters.subjectKind,
        requestParameters.subjectName,
        requestParameters.top,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class ApiConsoleHaloRunV1alpha1CommentApi extends BaseAPI {
  createComment(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1CommentApiFp(this.configuration).createComment(requestParameters.commentRequest, options).then((request) => request(this.axios, this.basePath));
  }
  createReply(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1CommentApiFp(this.configuration).createReply(
      requestParameters.name,
      requestParameters.replyRequest,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  listComments(requestParameters = {}, options) {
    return ApiConsoleHaloRunV1alpha1CommentApiFp(this.configuration).listComments(
      requestParameters.allowNotification,
      requestParameters.approved,
      requestParameters.fieldSelector,
      requestParameters.hidden,
      requestParameters.keyword,
      requestParameters.labelSelector,
      requestParameters.ownerKind,
      requestParameters.ownerName,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      requestParameters.subjectKind,
      requestParameters.subjectName,
      requestParameters.top,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const ApiConsoleHaloRunV1alpha1IndicesApiAxiosParamCreator = function(configuration) {
  return {
    buildPostIndices: async (options = {}) => {
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/indices/post`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ApiConsoleHaloRunV1alpha1IndicesApiFp = function(configuration) {
  const localVarAxiosParamCreator = ApiConsoleHaloRunV1alpha1IndicesApiAxiosParamCreator(configuration);
  return {
    async buildPostIndices(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.buildPostIndices(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ApiConsoleHaloRunV1alpha1IndicesApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ApiConsoleHaloRunV1alpha1IndicesApiFp(configuration);
  return {
    buildPostIndices(options) {
      return localVarFp.buildPostIndices(options).then((request) => request(axios, basePath));
    }
  };
};
class ApiConsoleHaloRunV1alpha1IndicesApi extends BaseAPI {
  buildPostIndices(options) {
    return ApiConsoleHaloRunV1alpha1IndicesApiFp(this.configuration).buildPostIndices(options).then((request) => request(this.axios, this.basePath));
  }
}

const ApiConsoleHaloRunV1alpha1NotifierApiAxiosParamCreator = function(configuration) {
  return {
    fetchSenderConfig: async (name, options = {}) => {
      assertParamExists("fetchSenderConfig", "name", name);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/notifiers/{name}/sender-config`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    saveSenderConfig: async (name, body, options = {}) => {
      assertParamExists("saveSenderConfig", "name", name);
      assertParamExists("saveSenderConfig", "body", body);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/notifiers/{name}/sender-config`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ApiConsoleHaloRunV1alpha1NotifierApiFp = function(configuration) {
  const localVarAxiosParamCreator = ApiConsoleHaloRunV1alpha1NotifierApiAxiosParamCreator(configuration);
  return {
    async fetchSenderConfig(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchSenderConfig(name, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async saveSenderConfig(name, body, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.saveSenderConfig(name, body, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ApiConsoleHaloRunV1alpha1NotifierApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ApiConsoleHaloRunV1alpha1NotifierApiFp(configuration);
  return {
    fetchSenderConfig(requestParameters, options) {
      return localVarFp.fetchSenderConfig(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    saveSenderConfig(requestParameters, options) {
      return localVarFp.saveSenderConfig(
        requestParameters.name,
        requestParameters.body,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class ApiConsoleHaloRunV1alpha1NotifierApi extends BaseAPI {
  fetchSenderConfig(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1NotifierApiFp(this.configuration).fetchSenderConfig(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  saveSenderConfig(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1NotifierApiFp(this.configuration).saveSenderConfig(requestParameters.name, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
  }
}

const ApiConsoleHaloRunV1alpha1PluginApiAxiosParamCreator = function(configuration) {
  return {
    fetchCssBundle: async (options = {}) => {
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/plugins/-/bundle.css`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    fetchJsBundle: async (options = {}) => {
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/plugins/-/bundle.js`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    fetchPluginConfig: async (name, options = {}) => {
      assertParamExists("fetchPluginConfig", "name", name);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/plugins/{name}/config`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    fetchPluginSetting: async (name, options = {}) => {
      assertParamExists("fetchPluginSetting", "name", name);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/plugins/{name}/setting`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    installPlugin: async (file, presetName, source, options = {}) => {
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/plugins/install`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      const localVarFormParams = new (configuration && configuration.formDataCtor || FormData)();
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (file !== void 0) {
        localVarFormParams.append("file", file);
      }
      if (presetName !== void 0) {
        localVarFormParams.append("presetName", presetName);
      }
      if (source !== void 0) {
        localVarFormParams.append("source", source);
      }
      localVarHeaderParameter["Content-Type"] = "multipart/form-data";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = localVarFormParams;
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    installPluginFromUri: async (installFromUriRequest, options = {}) => {
      assertParamExists(
        "installPluginFromUri",
        "installFromUriRequest",
        installFromUriRequest
      );
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/plugins/-/install-from-uri`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        installFromUriRequest,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listPluginPresets: async (options = {}) => {
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/plugin-presets`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listPlugins: async (enabled, fieldSelector, keyword, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/plugins`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (enabled !== void 0) {
        localVarQueryParameter["enabled"] = enabled;
      }
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (keyword !== void 0) {
        localVarQueryParameter["keyword"] = keyword;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    reloadPlugin: async (name, options = {}) => {
      assertParamExists("reloadPlugin", "name", name);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/plugins/{name}/reload`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    resetPluginConfig: async (name, options = {}) => {
      assertParamExists("resetPluginConfig", "name", name);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/plugins/{name}/reset-config`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatePluginConfig: async (name, configMap, options = {}) => {
      assertParamExists("updatePluginConfig", "name", name);
      assertParamExists("updatePluginConfig", "configMap", configMap);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/plugins/{name}/config`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        configMap,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    upgradePlugin: async (name, file, presetName, source, options = {}) => {
      assertParamExists("upgradePlugin", "name", name);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/plugins/{name}/upgrade`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      const localVarFormParams = new (configuration && configuration.formDataCtor || FormData)();
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (file !== void 0) {
        localVarFormParams.append("file", file);
      }
      if (presetName !== void 0) {
        localVarFormParams.append("presetName", presetName);
      }
      if (source !== void 0) {
        localVarFormParams.append("source", source);
      }
      localVarHeaderParameter["Content-Type"] = "multipart/form-data";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = localVarFormParams;
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    upgradePluginFromUri: async (name, upgradeFromUriRequest, options = {}) => {
      assertParamExists("upgradePluginFromUri", "name", name);
      assertParamExists(
        "upgradePluginFromUri",
        "upgradeFromUriRequest",
        upgradeFromUriRequest
      );
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/plugins/{name}/upgrade-from-uri`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        upgradeFromUriRequest,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ApiConsoleHaloRunV1alpha1PluginApiFp = function(configuration) {
  const localVarAxiosParamCreator = ApiConsoleHaloRunV1alpha1PluginApiAxiosParamCreator(configuration);
  return {
    async fetchCssBundle(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCssBundle(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async fetchJsBundle(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchJsBundle(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async fetchPluginConfig(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchPluginConfig(name, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async fetchPluginSetting(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchPluginSetting(name, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async installPlugin(file, presetName, source, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.installPlugin(
        file,
        presetName,
        source,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async installPluginFromUri(installFromUriRequest, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.installPluginFromUri(
        installFromUriRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listPluginPresets(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listPluginPresets(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listPlugins(enabled, fieldSelector, keyword, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listPlugins(
        enabled,
        fieldSelector,
        keyword,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async reloadPlugin(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.reloadPlugin(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async resetPluginConfig(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.resetPluginConfig(name, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatePluginConfig(name, configMap, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatePluginConfig(
        name,
        configMap,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async upgradePlugin(name, file, presetName, source, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.upgradePlugin(
        name,
        file,
        presetName,
        source,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async upgradePluginFromUri(name, upgradeFromUriRequest, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.upgradePluginFromUri(
        name,
        upgradeFromUriRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ApiConsoleHaloRunV1alpha1PluginApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ApiConsoleHaloRunV1alpha1PluginApiFp(configuration);
  return {
    fetchCssBundle(options) {
      return localVarFp.fetchCssBundle(options).then((request) => request(axios, basePath));
    },
    fetchJsBundle(options) {
      return localVarFp.fetchJsBundle(options).then((request) => request(axios, basePath));
    },
    fetchPluginConfig(requestParameters, options) {
      return localVarFp.fetchPluginConfig(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    fetchPluginSetting(requestParameters, options) {
      return localVarFp.fetchPluginSetting(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    installPlugin(requestParameters = {}, options) {
      return localVarFp.installPlugin(
        requestParameters.file,
        requestParameters.presetName,
        requestParameters.source,
        options
      ).then((request) => request(axios, basePath));
    },
    installPluginFromUri(requestParameters, options) {
      return localVarFp.installPluginFromUri(requestParameters.installFromUriRequest, options).then((request) => request(axios, basePath));
    },
    listPluginPresets(options) {
      return localVarFp.listPluginPresets(options).then((request) => request(axios, basePath));
    },
    listPlugins(requestParameters = {}, options) {
      return localVarFp.listPlugins(
        requestParameters.enabled,
        requestParameters.fieldSelector,
        requestParameters.keyword,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    reloadPlugin(requestParameters, options) {
      return localVarFp.reloadPlugin(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    resetPluginConfig(requestParameters, options) {
      return localVarFp.resetPluginConfig(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    updatePluginConfig(requestParameters, options) {
      return localVarFp.updatePluginConfig(
        requestParameters.name,
        requestParameters.configMap,
        options
      ).then((request) => request(axios, basePath));
    },
    upgradePlugin(requestParameters, options) {
      return localVarFp.upgradePlugin(
        requestParameters.name,
        requestParameters.file,
        requestParameters.presetName,
        requestParameters.source,
        options
      ).then((request) => request(axios, basePath));
    },
    upgradePluginFromUri(requestParameters, options) {
      return localVarFp.upgradePluginFromUri(
        requestParameters.name,
        requestParameters.upgradeFromUriRequest,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class ApiConsoleHaloRunV1alpha1PluginApi extends BaseAPI {
  fetchCssBundle(options) {
    return ApiConsoleHaloRunV1alpha1PluginApiFp(this.configuration).fetchCssBundle(options).then((request) => request(this.axios, this.basePath));
  }
  fetchJsBundle(options) {
    return ApiConsoleHaloRunV1alpha1PluginApiFp(this.configuration).fetchJsBundle(options).then((request) => request(this.axios, this.basePath));
  }
  fetchPluginConfig(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1PluginApiFp(this.configuration).fetchPluginConfig(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  fetchPluginSetting(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1PluginApiFp(this.configuration).fetchPluginSetting(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  installPlugin(requestParameters = {}, options) {
    return ApiConsoleHaloRunV1alpha1PluginApiFp(this.configuration).installPlugin(
      requestParameters.file,
      requestParameters.presetName,
      requestParameters.source,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  installPluginFromUri(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1PluginApiFp(this.configuration).installPluginFromUri(requestParameters.installFromUriRequest, options).then((request) => request(this.axios, this.basePath));
  }
  listPluginPresets(options) {
    return ApiConsoleHaloRunV1alpha1PluginApiFp(this.configuration).listPluginPresets(options).then((request) => request(this.axios, this.basePath));
  }
  listPlugins(requestParameters = {}, options) {
    return ApiConsoleHaloRunV1alpha1PluginApiFp(this.configuration).listPlugins(
      requestParameters.enabled,
      requestParameters.fieldSelector,
      requestParameters.keyword,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  reloadPlugin(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1PluginApiFp(this.configuration).reloadPlugin(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  resetPluginConfig(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1PluginApiFp(this.configuration).resetPluginConfig(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  updatePluginConfig(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1PluginApiFp(this.configuration).updatePluginConfig(
      requestParameters.name,
      requestParameters.configMap,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  upgradePlugin(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1PluginApiFp(this.configuration).upgradePlugin(
      requestParameters.name,
      requestParameters.file,
      requestParameters.presetName,
      requestParameters.source,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  upgradePluginFromUri(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1PluginApiFp(this.configuration).upgradePluginFromUri(
      requestParameters.name,
      requestParameters.upgradeFromUriRequest,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const ApiConsoleHaloRunV1alpha1PostApiAxiosParamCreator = function(configuration) {
  return {
    draftPost: async (postRequest, options = {}) => {
      assertParamExists("draftPost", "postRequest", postRequest);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/posts`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postRequest,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    fetchPostHeadContent: async (name, options = {}) => {
      assertParamExists("fetchPostHeadContent", "name", name);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/posts/{name}/head-content`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    fetchPostReleaseContent: async (name, options = {}) => {
      assertParamExists("fetchPostReleaseContent", "name", name);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/posts/{name}/release-content`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listPosts: async (category, contributor, fieldSelector, keyword, labelSelector, page, publishPhase, size, sort, tag, visible, options = {}) => {
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/posts`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (category) {
        localVarQueryParameter["category"] = Array.from(category);
      }
      if (contributor) {
        localVarQueryParameter["contributor"] = Array.from(contributor);
      }
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (keyword !== void 0) {
        localVarQueryParameter["keyword"] = keyword;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (publishPhase !== void 0) {
        localVarQueryParameter["publishPhase"] = publishPhase;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      if (tag) {
        localVarQueryParameter["tag"] = Array.from(tag);
      }
      if (visible !== void 0) {
        localVarQueryParameter["visible"] = visible;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    publishPost: async (name, headSnapshot, options = {}) => {
      assertParamExists("publishPost", "name", name);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/posts/{name}/publish`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (headSnapshot !== void 0) {
        localVarQueryParameter["headSnapshot"] = headSnapshot;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    recyclePost: async (name, options = {}) => {
      assertParamExists("recyclePost", "name", name);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/posts/{name}/recycle`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    unpublishPost: async (name, options = {}) => {
      assertParamExists("unpublishPost", "name", name);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/posts/{name}/unpublish`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updateDraftPost: async (name, postRequest, options = {}) => {
      assertParamExists("updateDraftPost", "name", name);
      assertParamExists("updateDraftPost", "postRequest", postRequest);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/posts/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postRequest,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatePostContent: async (name, content, options = {}) => {
      assertParamExists("updatePostContent", "name", name);
      assertParamExists("updatePostContent", "content", content);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/posts/{name}/content`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        content,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ApiConsoleHaloRunV1alpha1PostApiFp = function(configuration) {
  const localVarAxiosParamCreator = ApiConsoleHaloRunV1alpha1PostApiAxiosParamCreator(configuration);
  return {
    async draftPost(postRequest, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.draftPost(
        postRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async fetchPostHeadContent(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchPostHeadContent(name, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async fetchPostReleaseContent(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchPostReleaseContent(name, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listPosts(category, contributor, fieldSelector, keyword, labelSelector, page, publishPhase, size, sort, tag, visible, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listPosts(
        category,
        contributor,
        fieldSelector,
        keyword,
        labelSelector,
        page,
        publishPhase,
        size,
        sort,
        tag,
        visible,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async publishPost(name, headSnapshot, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.publishPost(
        name,
        headSnapshot,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async recyclePost(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.recyclePost(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async unpublishPost(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.unpublishPost(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updateDraftPost(name, postRequest, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateDraftPost(
        name,
        postRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatePostContent(name, content, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatePostContent(
        name,
        content,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ApiConsoleHaloRunV1alpha1PostApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ApiConsoleHaloRunV1alpha1PostApiFp(configuration);
  return {
    draftPost(requestParameters, options) {
      return localVarFp.draftPost(requestParameters.postRequest, options).then((request) => request(axios, basePath));
    },
    fetchPostHeadContent(requestParameters, options) {
      return localVarFp.fetchPostHeadContent(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    fetchPostReleaseContent(requestParameters, options) {
      return localVarFp.fetchPostReleaseContent(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    listPosts(requestParameters = {}, options) {
      return localVarFp.listPosts(
        requestParameters.category,
        requestParameters.contributor,
        requestParameters.fieldSelector,
        requestParameters.keyword,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.publishPhase,
        requestParameters.size,
        requestParameters.sort,
        requestParameters.tag,
        requestParameters.visible,
        options
      ).then((request) => request(axios, basePath));
    },
    publishPost(requestParameters, options) {
      return localVarFp.publishPost(
        requestParameters.name,
        requestParameters.headSnapshot,
        options
      ).then((request) => request(axios, basePath));
    },
    recyclePost(requestParameters, options) {
      return localVarFp.recyclePost(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    unpublishPost(requestParameters, options) {
      return localVarFp.unpublishPost(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    updateDraftPost(requestParameters, options) {
      return localVarFp.updateDraftPost(
        requestParameters.name,
        requestParameters.postRequest,
        options
      ).then((request) => request(axios, basePath));
    },
    updatePostContent(requestParameters, options) {
      return localVarFp.updatePostContent(
        requestParameters.name,
        requestParameters.content,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class ApiConsoleHaloRunV1alpha1PostApi extends BaseAPI {
  draftPost(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1PostApiFp(this.configuration).draftPost(requestParameters.postRequest, options).then((request) => request(this.axios, this.basePath));
  }
  fetchPostHeadContent(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1PostApiFp(this.configuration).fetchPostHeadContent(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  fetchPostReleaseContent(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1PostApiFp(this.configuration).fetchPostReleaseContent(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  listPosts(requestParameters = {}, options) {
    return ApiConsoleHaloRunV1alpha1PostApiFp(this.configuration).listPosts(
      requestParameters.category,
      requestParameters.contributor,
      requestParameters.fieldSelector,
      requestParameters.keyword,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.publishPhase,
      requestParameters.size,
      requestParameters.sort,
      requestParameters.tag,
      requestParameters.visible,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  publishPost(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1PostApiFp(this.configuration).publishPost(
      requestParameters.name,
      requestParameters.headSnapshot,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  recyclePost(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1PostApiFp(this.configuration).recyclePost(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  unpublishPost(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1PostApiFp(this.configuration).unpublishPost(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  updateDraftPost(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1PostApiFp(this.configuration).updateDraftPost(
      requestParameters.name,
      requestParameters.postRequest,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatePostContent(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1PostApiFp(this.configuration).updatePostContent(
      requestParameters.name,
      requestParameters.content,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const ApiConsoleHaloRunV1alpha1ReplyApiAxiosParamCreator = function(configuration) {
  return {
    listReplies: async (commentName, fieldSelector, labelSelector, page, size, options = {}) => {
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/replies`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (commentName !== void 0) {
        localVarQueryParameter["commentName"] = commentName;
      }
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ApiConsoleHaloRunV1alpha1ReplyApiFp = function(configuration) {
  const localVarAxiosParamCreator = ApiConsoleHaloRunV1alpha1ReplyApiAxiosParamCreator(configuration);
  return {
    async listReplies(commentName, fieldSelector, labelSelector, page, size, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listReplies(
        commentName,
        fieldSelector,
        labelSelector,
        page,
        size,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ApiConsoleHaloRunV1alpha1ReplyApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ApiConsoleHaloRunV1alpha1ReplyApiFp(configuration);
  return {
    listReplies(requestParameters = {}, options) {
      return localVarFp.listReplies(
        requestParameters.commentName,
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class ApiConsoleHaloRunV1alpha1ReplyApi extends BaseAPI {
  listReplies(requestParameters = {}, options) {
    return ApiConsoleHaloRunV1alpha1ReplyApiFp(this.configuration).listReplies(
      requestParameters.commentName,
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const ApiConsoleHaloRunV1alpha1SinglePageApiAxiosParamCreator = function(configuration) {
  return {
    draftSinglePage: async (singlePageRequest, options = {}) => {
      assertParamExists(
        "draftSinglePage",
        "singlePageRequest",
        singlePageRequest
      );
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/singlepages`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        singlePageRequest,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    fetchSinglePageHeadContent: async (name, options = {}) => {
      assertParamExists("fetchSinglePageHeadContent", "name", name);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/singlepages/{name}/head-content`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    fetchSinglePageReleaseContent: async (name, options = {}) => {
      assertParamExists("fetchSinglePageReleaseContent", "name", name);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/singlepages/{name}/release-content`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listSinglePages: async (contributor, fieldSelector, keyword, labelSelector, page, publishPhase, size, sort, visible, options = {}) => {
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/singlepages`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (contributor) {
        localVarQueryParameter["contributor"] = Array.from(contributor);
      }
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (keyword !== void 0) {
        localVarQueryParameter["keyword"] = keyword;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (publishPhase !== void 0) {
        localVarQueryParameter["publishPhase"] = publishPhase;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      if (visible !== void 0) {
        localVarQueryParameter["visible"] = visible;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    publishSinglePage: async (name, options = {}) => {
      assertParamExists("publishSinglePage", "name", name);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/singlepages/{name}/publish`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updateDraftSinglePage: async (name, singlePageRequest, options = {}) => {
      assertParamExists("updateDraftSinglePage", "name", name);
      assertParamExists(
        "updateDraftSinglePage",
        "singlePageRequest",
        singlePageRequest
      );
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/singlepages/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        singlePageRequest,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updateSinglePageContent: async (name, content, options = {}) => {
      assertParamExists("updateSinglePageContent", "name", name);
      assertParamExists("updateSinglePageContent", "content", content);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/singlepages/{name}/content`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        content,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ApiConsoleHaloRunV1alpha1SinglePageApiFp = function(configuration) {
  const localVarAxiosParamCreator = ApiConsoleHaloRunV1alpha1SinglePageApiAxiosParamCreator(configuration);
  return {
    async draftSinglePage(singlePageRequest, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.draftSinglePage(
        singlePageRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async fetchSinglePageHeadContent(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchSinglePageHeadContent(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async fetchSinglePageReleaseContent(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchSinglePageReleaseContent(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listSinglePages(contributor, fieldSelector, keyword, labelSelector, page, publishPhase, size, sort, visible, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listSinglePages(
        contributor,
        fieldSelector,
        keyword,
        labelSelector,
        page,
        publishPhase,
        size,
        sort,
        visible,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async publishSinglePage(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.publishSinglePage(name, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updateDraftSinglePage(name, singlePageRequest, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateDraftSinglePage(
        name,
        singlePageRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updateSinglePageContent(name, content, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateSinglePageContent(
        name,
        content,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ApiConsoleHaloRunV1alpha1SinglePageApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ApiConsoleHaloRunV1alpha1SinglePageApiFp(configuration);
  return {
    draftSinglePage(requestParameters, options) {
      return localVarFp.draftSinglePage(requestParameters.singlePageRequest, options).then((request) => request(axios, basePath));
    },
    fetchSinglePageHeadContent(requestParameters, options) {
      return localVarFp.fetchSinglePageHeadContent(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    fetchSinglePageReleaseContent(requestParameters, options) {
      return localVarFp.fetchSinglePageReleaseContent(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    listSinglePages(requestParameters = {}, options) {
      return localVarFp.listSinglePages(
        requestParameters.contributor,
        requestParameters.fieldSelector,
        requestParameters.keyword,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.publishPhase,
        requestParameters.size,
        requestParameters.sort,
        requestParameters.visible,
        options
      ).then((request) => request(axios, basePath));
    },
    publishSinglePage(requestParameters, options) {
      return localVarFp.publishSinglePage(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    updateDraftSinglePage(requestParameters, options) {
      return localVarFp.updateDraftSinglePage(
        requestParameters.name,
        requestParameters.singlePageRequest,
        options
      ).then((request) => request(axios, basePath));
    },
    updateSinglePageContent(requestParameters, options) {
      return localVarFp.updateSinglePageContent(
        requestParameters.name,
        requestParameters.content,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class ApiConsoleHaloRunV1alpha1SinglePageApi extends BaseAPI {
  draftSinglePage(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1SinglePageApiFp(this.configuration).draftSinglePage(requestParameters.singlePageRequest, options).then((request) => request(this.axios, this.basePath));
  }
  fetchSinglePageHeadContent(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1SinglePageApiFp(this.configuration).fetchSinglePageHeadContent(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  fetchSinglePageReleaseContent(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1SinglePageApiFp(this.configuration).fetchSinglePageReleaseContent(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  listSinglePages(requestParameters = {}, options) {
    return ApiConsoleHaloRunV1alpha1SinglePageApiFp(this.configuration).listSinglePages(
      requestParameters.contributor,
      requestParameters.fieldSelector,
      requestParameters.keyword,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.publishPhase,
      requestParameters.size,
      requestParameters.sort,
      requestParameters.visible,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  publishSinglePage(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1SinglePageApiFp(this.configuration).publishSinglePage(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  updateDraftSinglePage(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1SinglePageApiFp(this.configuration).updateDraftSinglePage(
      requestParameters.name,
      requestParameters.singlePageRequest,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updateSinglePageContent(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1SinglePageApiFp(this.configuration).updateSinglePageContent(
      requestParameters.name,
      requestParameters.content,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const ApiConsoleHaloRunV1alpha1StatsApiAxiosParamCreator = function(configuration) {
  return {
    getStats: async (options = {}) => {
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/stats`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ApiConsoleHaloRunV1alpha1StatsApiFp = function(configuration) {
  const localVarAxiosParamCreator = ApiConsoleHaloRunV1alpha1StatsApiAxiosParamCreator(configuration);
  return {
    async getStats(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getStats(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ApiConsoleHaloRunV1alpha1StatsApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ApiConsoleHaloRunV1alpha1StatsApiFp(configuration);
  return {
    getStats(options) {
      return localVarFp.getStats(options).then((request) => request(axios, basePath));
    }
  };
};
class ApiConsoleHaloRunV1alpha1StatsApi extends BaseAPI {
  getStats(options) {
    return ApiConsoleHaloRunV1alpha1StatsApiFp(this.configuration).getStats(options).then((request) => request(this.axios, this.basePath));
  }
}

const ApiConsoleHaloRunV1alpha1SystemApiAxiosParamCreator = function(configuration) {
  return {
    initialize: async (systemInitializationRequest, options = {}) => {
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/system/initialize`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        systemInitializationRequest,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ApiConsoleHaloRunV1alpha1SystemApiFp = function(configuration) {
  const localVarAxiosParamCreator = ApiConsoleHaloRunV1alpha1SystemApiAxiosParamCreator(configuration);
  return {
    async initialize(systemInitializationRequest, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.initialize(
        systemInitializationRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ApiConsoleHaloRunV1alpha1SystemApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ApiConsoleHaloRunV1alpha1SystemApiFp(configuration);
  return {
    initialize(requestParameters = {}, options) {
      return localVarFp.initialize(requestParameters.systemInitializationRequest, options).then((request) => request(axios, basePath));
    }
  };
};
class ApiConsoleHaloRunV1alpha1SystemApi extends BaseAPI {
  initialize(requestParameters = {}, options) {
    return ApiConsoleHaloRunV1alpha1SystemApiFp(this.configuration).initialize(requestParameters.systemInitializationRequest, options).then((request) => request(this.axios, this.basePath));
  }
}

const ApiConsoleHaloRunV1alpha1ThemeApiAxiosParamCreator = function(configuration) {
  return {
    activateTheme: async (name, options = {}) => {
      assertParamExists("activateTheme", "name", name);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/themes/{name}/activation`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    fetchActivatedTheme: async (options = {}) => {
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/themes/-/activation`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    fetchThemeConfig: async (name, options = {}) => {
      assertParamExists("fetchThemeConfig", "name", name);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/themes/{name}/config`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    fetchThemeSetting: async (name, options = {}) => {
      assertParamExists("fetchThemeSetting", "name", name);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/themes/{name}/setting`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    installTheme: async (options = {}) => {
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/themes/install`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    installThemeFromUri: async (installFromUriRequest, options = {}) => {
      assertParamExists(
        "installThemeFromUri",
        "installFromUriRequest",
        installFromUriRequest
      );
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/themes/-/install-from-uri`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        installFromUriRequest,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listThemes: async (uninstalled, fieldSelector, labelSelector, page, size, options = {}) => {
      assertParamExists("listThemes", "uninstalled", uninstalled);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/themes`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (uninstalled !== void 0) {
        localVarQueryParameter["uninstalled"] = uninstalled;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    reload: async (name, options = {}) => {
      assertParamExists("reload", "name", name);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/themes/{name}/reload`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    resetThemeConfig: async (name, options = {}) => {
      assertParamExists("resetThemeConfig", "name", name);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/themes/{name}/reset-config`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updateThemeConfig: async (name, configMap, options = {}) => {
      assertParamExists("updateThemeConfig", "name", name);
      assertParamExists("updateThemeConfig", "configMap", configMap);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/themes/{name}/config`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        configMap,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    upgradeTheme: async (name, file, options = {}) => {
      assertParamExists("upgradeTheme", "name", name);
      assertParamExists("upgradeTheme", "file", file);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/themes/{name}/upgrade`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      const localVarFormParams = new (configuration && configuration.formDataCtor || FormData)();
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (file !== void 0) {
        localVarFormParams.append("file", file);
      }
      localVarHeaderParameter["Content-Type"] = "multipart/form-data";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = localVarFormParams;
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    upgradeThemeFromUri: async (name, upgradeFromUriRequest, options = {}) => {
      assertParamExists("upgradeThemeFromUri", "name", name);
      assertParamExists(
        "upgradeThemeFromUri",
        "upgradeFromUriRequest",
        upgradeFromUriRequest
      );
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/themes/{name}/upgrade-from-uri`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        upgradeFromUriRequest,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ApiConsoleHaloRunV1alpha1ThemeApiFp = function(configuration) {
  const localVarAxiosParamCreator = ApiConsoleHaloRunV1alpha1ThemeApiAxiosParamCreator(configuration);
  return {
    async activateTheme(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.activateTheme(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async fetchActivatedTheme(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchActivatedTheme(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async fetchThemeConfig(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchThemeConfig(name, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async fetchThemeSetting(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchThemeSetting(name, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async installTheme(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.installTheme(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async installThemeFromUri(installFromUriRequest, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.installThemeFromUri(
        installFromUriRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listThemes(uninstalled, fieldSelector, labelSelector, page, size, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listThemes(
        uninstalled,
        fieldSelector,
        labelSelector,
        page,
        size,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async reload(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.reload(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async resetThemeConfig(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.resetThemeConfig(name, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updateThemeConfig(name, configMap, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateThemeConfig(
        name,
        configMap,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async upgradeTheme(name, file, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.upgradeTheme(
        name,
        file,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async upgradeThemeFromUri(name, upgradeFromUriRequest, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.upgradeThemeFromUri(
        name,
        upgradeFromUriRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ApiConsoleHaloRunV1alpha1ThemeApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ApiConsoleHaloRunV1alpha1ThemeApiFp(configuration);
  return {
    activateTheme(requestParameters, options) {
      return localVarFp.activateTheme(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    fetchActivatedTheme(options) {
      return localVarFp.fetchActivatedTheme(options).then((request) => request(axios, basePath));
    },
    fetchThemeConfig(requestParameters, options) {
      return localVarFp.fetchThemeConfig(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    fetchThemeSetting(requestParameters, options) {
      return localVarFp.fetchThemeSetting(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    installTheme(options) {
      return localVarFp.installTheme(options).then((request) => request(axios, basePath));
    },
    installThemeFromUri(requestParameters, options) {
      return localVarFp.installThemeFromUri(requestParameters.installFromUriRequest, options).then((request) => request(axios, basePath));
    },
    listThemes(requestParameters, options) {
      return localVarFp.listThemes(
        requestParameters.uninstalled,
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        options
      ).then((request) => request(axios, basePath));
    },
    reload(requestParameters, options) {
      return localVarFp.reload(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    resetThemeConfig(requestParameters, options) {
      return localVarFp.resetThemeConfig(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    updateThemeConfig(requestParameters, options) {
      return localVarFp.updateThemeConfig(
        requestParameters.name,
        requestParameters.configMap,
        options
      ).then((request) => request(axios, basePath));
    },
    upgradeTheme(requestParameters, options) {
      return localVarFp.upgradeTheme(requestParameters.name, requestParameters.file, options).then((request) => request(axios, basePath));
    },
    upgradeThemeFromUri(requestParameters, options) {
      return localVarFp.upgradeThemeFromUri(
        requestParameters.name,
        requestParameters.upgradeFromUriRequest,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class ApiConsoleHaloRunV1alpha1ThemeApi extends BaseAPI {
  activateTheme(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1ThemeApiFp(this.configuration).activateTheme(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  fetchActivatedTheme(options) {
    return ApiConsoleHaloRunV1alpha1ThemeApiFp(this.configuration).fetchActivatedTheme(options).then((request) => request(this.axios, this.basePath));
  }
  fetchThemeConfig(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1ThemeApiFp(this.configuration).fetchThemeConfig(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  fetchThemeSetting(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1ThemeApiFp(this.configuration).fetchThemeSetting(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  installTheme(options) {
    return ApiConsoleHaloRunV1alpha1ThemeApiFp(this.configuration).installTheme(options).then((request) => request(this.axios, this.basePath));
  }
  installThemeFromUri(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1ThemeApiFp(this.configuration).installThemeFromUri(requestParameters.installFromUriRequest, options).then((request) => request(this.axios, this.basePath));
  }
  listThemes(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1ThemeApiFp(this.configuration).listThemes(
      requestParameters.uninstalled,
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  reload(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1ThemeApiFp(this.configuration).reload(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  resetThemeConfig(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1ThemeApiFp(this.configuration).resetThemeConfig(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  updateThemeConfig(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1ThemeApiFp(this.configuration).updateThemeConfig(
      requestParameters.name,
      requestParameters.configMap,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  upgradeTheme(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1ThemeApiFp(this.configuration).upgradeTheme(requestParameters.name, requestParameters.file, options).then((request) => request(this.axios, this.basePath));
  }
  upgradeThemeFromUri(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1ThemeApiFp(this.configuration).upgradeThemeFromUri(
      requestParameters.name,
      requestParameters.upgradeFromUriRequest,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const ApiConsoleHaloRunV1alpha1UserApiAxiosParamCreator = function(configuration) {
  return {
    changePassword: async (name, changePasswordRequest, options = {}) => {
      assertParamExists("changePassword", "name", name);
      assertParamExists(
        "changePassword",
        "changePasswordRequest",
        changePasswordRequest
      );
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/users/{name}/password`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        changePasswordRequest,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    createUser: async (createUserRequest, options = {}) => {
      assertParamExists("createUser", "createUserRequest", createUserRequest);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/users`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createUserRequest,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deleteUserAvatar: async (name, options = {}) => {
      assertParamExists("deleteUserAvatar", "name", name);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/users/{name}/avatar`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getCurrentUserDetail: async (options = {}) => {
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/users/-`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getPermissions: async (name, options = {}) => {
      assertParamExists("getPermissions", "name", name);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/users/{name}/permissions`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getUserDetail: async (name, options = {}) => {
      assertParamExists("getUserDetail", "name", name);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/users/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    grantPermission: async (name, grantRequest, options = {}) => {
      assertParamExists("grantPermission", "name", name);
      assertParamExists("grantPermission", "grantRequest", grantRequest);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/users/{name}/permissions`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        grantRequest,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listUsers: async (fieldSelector, keyword, labelSelector, page, role, size, sort, options = {}) => {
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/users`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (keyword !== void 0) {
        localVarQueryParameter["keyword"] = keyword;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (role !== void 0) {
        localVarQueryParameter["role"] = role;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updateCurrentUser: async (user, options = {}) => {
      assertParamExists("updateCurrentUser", "user", user);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/users/-`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        user,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    uploadUserAvatar: async (name, file, options = {}) => {
      assertParamExists("uploadUserAvatar", "name", name);
      assertParamExists("uploadUserAvatar", "file", file);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/users/{name}/avatar`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      const localVarFormParams = new (configuration && configuration.formDataCtor || FormData)();
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (file !== void 0) {
        localVarFormParams.append("file", file);
      }
      localVarHeaderParameter["Content-Type"] = "multipart/form-data";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = localVarFormParams;
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ApiConsoleHaloRunV1alpha1UserApiFp = function(configuration) {
  const localVarAxiosParamCreator = ApiConsoleHaloRunV1alpha1UserApiAxiosParamCreator(configuration);
  return {
    async changePassword(name, changePasswordRequest, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.changePassword(
        name,
        changePasswordRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async createUser(createUserRequest, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(
        createUserRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deleteUserAvatar(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserAvatar(name, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getCurrentUserDetail(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUserDetail(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getPermissions(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPermissions(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getUserDetail(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserDetail(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async grantPermission(name, grantRequest, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.grantPermission(
        name,
        grantRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listUsers(fieldSelector, keyword, labelSelector, page, role, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers(
        fieldSelector,
        keyword,
        labelSelector,
        page,
        role,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updateCurrentUser(user, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateCurrentUser(user, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async uploadUserAvatar(name, file, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.uploadUserAvatar(name, file, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ApiConsoleHaloRunV1alpha1UserApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ApiConsoleHaloRunV1alpha1UserApiFp(configuration);
  return {
    changePassword(requestParameters, options) {
      return localVarFp.changePassword(
        requestParameters.name,
        requestParameters.changePasswordRequest,
        options
      ).then((request) => request(axios, basePath));
    },
    createUser(requestParameters, options) {
      return localVarFp.createUser(requestParameters.createUserRequest, options).then((request) => request(axios, basePath));
    },
    deleteUserAvatar(requestParameters, options) {
      return localVarFp.deleteUserAvatar(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    getCurrentUserDetail(options) {
      return localVarFp.getCurrentUserDetail(options).then((request) => request(axios, basePath));
    },
    getPermissions(requestParameters, options) {
      return localVarFp.getPermissions(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    getUserDetail(requestParameters, options) {
      return localVarFp.getUserDetail(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    grantPermission(requestParameters, options) {
      return localVarFp.grantPermission(
        requestParameters.name,
        requestParameters.grantRequest,
        options
      ).then((request) => request(axios, basePath));
    },
    listUsers(requestParameters = {}, options) {
      return localVarFp.listUsers(
        requestParameters.fieldSelector,
        requestParameters.keyword,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.role,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updateCurrentUser(requestParameters, options) {
      return localVarFp.updateCurrentUser(requestParameters.user, options).then((request) => request(axios, basePath));
    },
    uploadUserAvatar(requestParameters, options) {
      return localVarFp.uploadUserAvatar(
        requestParameters.name,
        requestParameters.file,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class ApiConsoleHaloRunV1alpha1UserApi extends BaseAPI {
  changePassword(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1UserApiFp(this.configuration).changePassword(
      requestParameters.name,
      requestParameters.changePasswordRequest,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  createUser(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1UserApiFp(this.configuration).createUser(requestParameters.createUserRequest, options).then((request) => request(this.axios, this.basePath));
  }
  deleteUserAvatar(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1UserApiFp(this.configuration).deleteUserAvatar(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  getCurrentUserDetail(options) {
    return ApiConsoleHaloRunV1alpha1UserApiFp(this.configuration).getCurrentUserDetail(options).then((request) => request(this.axios, this.basePath));
  }
  getPermissions(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1UserApiFp(this.configuration).getPermissions(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  getUserDetail(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1UserApiFp(this.configuration).getUserDetail(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  grantPermission(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1UserApiFp(this.configuration).grantPermission(
      requestParameters.name,
      requestParameters.grantRequest,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  listUsers(requestParameters = {}, options) {
    return ApiConsoleHaloRunV1alpha1UserApiFp(this.configuration).listUsers(
      requestParameters.fieldSelector,
      requestParameters.keyword,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.role,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updateCurrentUser(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1UserApiFp(this.configuration).updateCurrentUser(requestParameters.user, options).then((request) => request(this.axios, this.basePath));
  }
  uploadUserAvatar(requestParameters, options) {
    return ApiConsoleHaloRunV1alpha1UserApiFp(this.configuration).uploadUserAvatar(requestParameters.name, requestParameters.file, options).then((request) => request(this.axios, this.basePath));
  }
}

const ApiConsoleMigrationHaloRunV1alpha1MigrationApiAxiosParamCreator = function(configuration) {
  return {
    downloadBackups: async (name, filename, options = {}) => {
      assertParamExists("downloadBackups", "name", name);
      assertParamExists("downloadBackups", "filename", filename);
      const localVarPath = `/apis/api.console.migration.halo.run/v1alpha1/backups/{name}/files/{filename}`.replace(`{${"name"}}`, encodeURIComponent(String(name))).replace(`{${"filename"}}`, encodeURIComponent(String(filename)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    restoreBackup: async (backupName, downloadUrl, file, options = {}) => {
      const localVarPath = `/apis/api.console.migration.halo.run/v1alpha1/restorations`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      const localVarFormParams = new (configuration && configuration.formDataCtor || FormData)();
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (backupName !== void 0) {
        localVarFormParams.append("backupName", backupName);
      }
      if (downloadUrl !== void 0) {
        localVarFormParams.append("downloadUrl", downloadUrl);
      }
      if (file !== void 0) {
        localVarFormParams.append("file", file);
      }
      localVarHeaderParameter["Content-Type"] = "multipart/form-data";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = localVarFormParams;
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ApiConsoleMigrationHaloRunV1alpha1MigrationApiFp = function(configuration) {
  const localVarAxiosParamCreator = ApiConsoleMigrationHaloRunV1alpha1MigrationApiAxiosParamCreator(
    configuration
  );
  return {
    async downloadBackups(name, filename, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.downloadBackups(
        name,
        filename,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async restoreBackup(backupName, downloadUrl, file, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.restoreBackup(
        backupName,
        downloadUrl,
        file,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ApiConsoleMigrationHaloRunV1alpha1MigrationApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ApiConsoleMigrationHaloRunV1alpha1MigrationApiFp(configuration);
  return {
    downloadBackups(requestParameters, options) {
      return localVarFp.downloadBackups(
        requestParameters.name,
        requestParameters.filename,
        options
      ).then((request) => request(axios, basePath));
    },
    restoreBackup(requestParameters = {}, options) {
      return localVarFp.restoreBackup(
        requestParameters.backupName,
        requestParameters.downloadUrl,
        requestParameters.file,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class ApiConsoleMigrationHaloRunV1alpha1MigrationApi extends BaseAPI {
  downloadBackups(requestParameters, options) {
    return ApiConsoleMigrationHaloRunV1alpha1MigrationApiFp(this.configuration).downloadBackups(
      requestParameters.name,
      requestParameters.filename,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  restoreBackup(requestParameters = {}, options) {
    return ApiConsoleMigrationHaloRunV1alpha1MigrationApiFp(this.configuration).restoreBackup(
      requestParameters.backupName,
      requestParameters.downloadUrl,
      requestParameters.file,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const ApiContentHaloRunV1alpha1CategoryApiAxiosParamCreator = function(configuration) {
  return {
    queryCategories: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/api.content.halo.run/v1alpha1/categories`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    queryCategoryByName: async (name, options = {}) => {
      assertParamExists("queryCategoryByName", "name", name);
      const localVarPath = `/apis/api.content.halo.run/v1alpha1/categories/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    queryPostsByCategoryName: async (name, fieldSelector, labelSelector, page, size, sort, options = {}) => {
      assertParamExists("queryPostsByCategoryName", "name", name);
      const localVarPath = `/apis/api.content.halo.run/v1alpha1/categories/{name}/posts`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ApiContentHaloRunV1alpha1CategoryApiFp = function(configuration) {
  const localVarAxiosParamCreator = ApiContentHaloRunV1alpha1CategoryApiAxiosParamCreator(configuration);
  return {
    async queryCategories(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryCategories(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async queryCategoryByName(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryCategoryByName(name, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async queryPostsByCategoryName(name, fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryPostsByCategoryName(
        name,
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ApiContentHaloRunV1alpha1CategoryApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ApiContentHaloRunV1alpha1CategoryApiFp(configuration);
  return {
    queryCategories(requestParameters = {}, options) {
      return localVarFp.queryCategories(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    queryCategoryByName(requestParameters, options) {
      return localVarFp.queryCategoryByName(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    queryPostsByCategoryName(requestParameters, options) {
      return localVarFp.queryPostsByCategoryName(
        requestParameters.name,
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class ApiContentHaloRunV1alpha1CategoryApi extends BaseAPI {
  queryCategories(requestParameters = {}, options) {
    return ApiContentHaloRunV1alpha1CategoryApiFp(this.configuration).queryCategories(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  queryCategoryByName(requestParameters, options) {
    return ApiContentHaloRunV1alpha1CategoryApiFp(this.configuration).queryCategoryByName(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  queryPostsByCategoryName(requestParameters, options) {
    return ApiContentHaloRunV1alpha1CategoryApiFp(this.configuration).queryPostsByCategoryName(
      requestParameters.name,
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const ApiContentHaloRunV1alpha1PostApiAxiosParamCreator = function(configuration) {
  return {
    queryPostByName: async (name, options = {}) => {
      assertParamExists("queryPostByName", "name", name);
      const localVarPath = `/apis/api.content.halo.run/v1alpha1/posts/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    queryPostNavigationByName: async (name, options = {}) => {
      assertParamExists("queryPostNavigationByName", "name", name);
      const localVarPath = `/apis/api.content.halo.run/v1alpha1/posts/{name}/navigation`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    queryPosts: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/api.content.halo.run/v1alpha1/posts`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ApiContentHaloRunV1alpha1PostApiFp = function(configuration) {
  const localVarAxiosParamCreator = ApiContentHaloRunV1alpha1PostApiAxiosParamCreator(configuration);
  return {
    async queryPostByName(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryPostByName(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async queryPostNavigationByName(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryPostNavigationByName(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async queryPosts(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryPosts(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ApiContentHaloRunV1alpha1PostApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ApiContentHaloRunV1alpha1PostApiFp(configuration);
  return {
    queryPostByName(requestParameters, options) {
      return localVarFp.queryPostByName(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    queryPostNavigationByName(requestParameters, options) {
      return localVarFp.queryPostNavigationByName(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    queryPosts(requestParameters = {}, options) {
      return localVarFp.queryPosts(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class ApiContentHaloRunV1alpha1PostApi extends BaseAPI {
  queryPostByName(requestParameters, options) {
    return ApiContentHaloRunV1alpha1PostApiFp(this.configuration).queryPostByName(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  queryPostNavigationByName(requestParameters, options) {
    return ApiContentHaloRunV1alpha1PostApiFp(this.configuration).queryPostNavigationByName(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  queryPosts(requestParameters = {}, options) {
    return ApiContentHaloRunV1alpha1PostApiFp(this.configuration).queryPosts(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const ApiContentHaloRunV1alpha1SinglePageApiAxiosParamCreator = function(configuration) {
  return {
    querySinglePageByName: async (name, options = {}) => {
      assertParamExists("querySinglePageByName", "name", name);
      const localVarPath = `/apis/api.content.halo.run/v1alpha1/singlepages/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    querySinglePages: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/api.content.halo.run/v1alpha1/singlepages`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ApiContentHaloRunV1alpha1SinglePageApiFp = function(configuration) {
  const localVarAxiosParamCreator = ApiContentHaloRunV1alpha1SinglePageApiAxiosParamCreator(configuration);
  return {
    async querySinglePageByName(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.querySinglePageByName(name, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async querySinglePages(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.querySinglePages(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ApiContentHaloRunV1alpha1SinglePageApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ApiContentHaloRunV1alpha1SinglePageApiFp(configuration);
  return {
    querySinglePageByName(requestParameters, options) {
      return localVarFp.querySinglePageByName(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    querySinglePages(requestParameters = {}, options) {
      return localVarFp.querySinglePages(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class ApiContentHaloRunV1alpha1SinglePageApi extends BaseAPI {
  querySinglePageByName(requestParameters, options) {
    return ApiContentHaloRunV1alpha1SinglePageApiFp(this.configuration).querySinglePageByName(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  querySinglePages(requestParameters = {}, options) {
    return ApiContentHaloRunV1alpha1SinglePageApiFp(this.configuration).querySinglePages(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const ApiContentHaloRunV1alpha1TagApiAxiosParamCreator = function(configuration) {
  return {
    queryPostsByTagName: async (name, fieldSelector, labelSelector, page, size, sort, options = {}) => {
      assertParamExists("queryPostsByTagName", "name", name);
      const localVarPath = `/apis/api.content.halo.run/v1alpha1/tags/{name}/posts`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    queryTagByName: async (name, options = {}) => {
      assertParamExists("queryTagByName", "name", name);
      const localVarPath = `/apis/api.content.halo.run/v1alpha1/tags/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    queryTags: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/api.content.halo.run/v1alpha1/tags`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ApiContentHaloRunV1alpha1TagApiFp = function(configuration) {
  const localVarAxiosParamCreator = ApiContentHaloRunV1alpha1TagApiAxiosParamCreator(configuration);
  return {
    async queryPostsByTagName(name, fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryPostsByTagName(
        name,
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async queryTagByName(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryTagByName(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async queryTags(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryTags(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ApiContentHaloRunV1alpha1TagApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ApiContentHaloRunV1alpha1TagApiFp(configuration);
  return {
    queryPostsByTagName(requestParameters, options) {
      return localVarFp.queryPostsByTagName(
        requestParameters.name,
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    queryTagByName(requestParameters, options) {
      return localVarFp.queryTagByName(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    queryTags(requestParameters = {}, options) {
      return localVarFp.queryTags(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class ApiContentHaloRunV1alpha1TagApi extends BaseAPI {
  queryPostsByTagName(requestParameters, options) {
    return ApiContentHaloRunV1alpha1TagApiFp(this.configuration).queryPostsByTagName(
      requestParameters.name,
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  queryTagByName(requestParameters, options) {
    return ApiContentHaloRunV1alpha1TagApiFp(this.configuration).queryTagByName(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  queryTags(requestParameters = {}, options) {
    return ApiContentHaloRunV1alpha1TagApiFp(this.configuration).queryTags(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const ApiHaloRunV1alpha1CommentApiAxiosParamCreator = function(configuration) {
  return {
    createComment1: async (commentRequest, options = {}) => {
      assertParamExists("createComment1", "commentRequest", commentRequest);
      const localVarPath = `/apis/api.halo.run/v1alpha1/comments`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        commentRequest,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    createReply1: async (name, replyRequest, options = {}) => {
      assertParamExists("createReply1", "name", name);
      assertParamExists("createReply1", "replyRequest", replyRequest);
      const localVarPath = `/apis/api.halo.run/v1alpha1/comments/{name}/reply`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        replyRequest,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getComment: async (name, options = {}) => {
      assertParamExists("getComment", "name", name);
      const localVarPath = `/apis/api.halo.run/v1alpha1/comments/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listCommentReplies: async (name, page, size, options = {}) => {
      assertParamExists("listCommentReplies", "name", name);
      const localVarPath = `/apis/api.halo.run/v1alpha1/comments/{name}/reply`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listComments1: async (kind, name, version, group, page, size, sort, options = {}) => {
      assertParamExists("listComments1", "kind", kind);
      assertParamExists("listComments1", "name", name);
      assertParamExists("listComments1", "version", version);
      const localVarPath = `/apis/api.halo.run/v1alpha1/comments`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (group !== void 0) {
        localVarQueryParameter["group"] = group;
      }
      if (kind !== void 0) {
        localVarQueryParameter["kind"] = kind;
      }
      if (name !== void 0) {
        localVarQueryParameter["name"] = name;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      if (version !== void 0) {
        localVarQueryParameter["version"] = version;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ApiHaloRunV1alpha1CommentApiFp = function(configuration) {
  const localVarAxiosParamCreator = ApiHaloRunV1alpha1CommentApiAxiosParamCreator(configuration);
  return {
    async createComment1(commentRequest, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createComment1(
        commentRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async createReply1(name, replyRequest, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createReply1(
        name,
        replyRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getComment(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getComment(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listCommentReplies(name, page, size, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listCommentReplies(
        name,
        page,
        size,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listComments1(kind, name, version, group, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listComments1(
        kind,
        name,
        version,
        group,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ApiHaloRunV1alpha1CommentApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ApiHaloRunV1alpha1CommentApiFp(configuration);
  return {
    createComment1(requestParameters, options) {
      return localVarFp.createComment1(requestParameters.commentRequest, options).then((request) => request(axios, basePath));
    },
    createReply1(requestParameters, options) {
      return localVarFp.createReply1(
        requestParameters.name,
        requestParameters.replyRequest,
        options
      ).then((request) => request(axios, basePath));
    },
    getComment(requestParameters, options) {
      return localVarFp.getComment(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    listCommentReplies(requestParameters, options) {
      return localVarFp.listCommentReplies(
        requestParameters.name,
        requestParameters.page,
        requestParameters.size,
        options
      ).then((request) => request(axios, basePath));
    },
    listComments1(requestParameters, options) {
      return localVarFp.listComments1(
        requestParameters.kind,
        requestParameters.name,
        requestParameters.version,
        requestParameters.group,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class ApiHaloRunV1alpha1CommentApi extends BaseAPI {
  createComment1(requestParameters, options) {
    return ApiHaloRunV1alpha1CommentApiFp(this.configuration).createComment1(requestParameters.commentRequest, options).then((request) => request(this.axios, this.basePath));
  }
  createReply1(requestParameters, options) {
    return ApiHaloRunV1alpha1CommentApiFp(this.configuration).createReply1(
      requestParameters.name,
      requestParameters.replyRequest,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  getComment(requestParameters, options) {
    return ApiHaloRunV1alpha1CommentApiFp(this.configuration).getComment(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  listCommentReplies(requestParameters, options) {
    return ApiHaloRunV1alpha1CommentApiFp(this.configuration).listCommentReplies(
      requestParameters.name,
      requestParameters.page,
      requestParameters.size,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  listComments1(requestParameters, options) {
    return ApiHaloRunV1alpha1CommentApiFp(this.configuration).listComments1(
      requestParameters.kind,
      requestParameters.name,
      requestParameters.version,
      requestParameters.group,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const ApiHaloRunV1alpha1MenuApiAxiosParamCreator = function(configuration) {
  return {
    queryMenuByName: async (name, options = {}) => {
      assertParamExists("queryMenuByName", "name", name);
      const localVarPath = `/apis/api.halo.run/v1alpha1/menus/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    queryPrimaryMenu: async (options = {}) => {
      const localVarPath = `/apis/api.halo.run/v1alpha1/menus/-`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ApiHaloRunV1alpha1MenuApiFp = function(configuration) {
  const localVarAxiosParamCreator = ApiHaloRunV1alpha1MenuApiAxiosParamCreator(configuration);
  return {
    async queryMenuByName(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryMenuByName(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async queryPrimaryMenu(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryPrimaryMenu(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ApiHaloRunV1alpha1MenuApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ApiHaloRunV1alpha1MenuApiFp(configuration);
  return {
    queryMenuByName(requestParameters, options) {
      return localVarFp.queryMenuByName(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    queryPrimaryMenu(options) {
      return localVarFp.queryPrimaryMenu(options).then((request) => request(axios, basePath));
    }
  };
};
class ApiHaloRunV1alpha1MenuApi extends BaseAPI {
  queryMenuByName(requestParameters, options) {
    return ApiHaloRunV1alpha1MenuApiFp(this.configuration).queryMenuByName(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  queryPrimaryMenu(options) {
    return ApiHaloRunV1alpha1MenuApiFp(this.configuration).queryPrimaryMenu(options).then((request) => request(this.axios, this.basePath));
  }
}

const ApiHaloRunV1alpha1PostApiAxiosParamCreator = function(configuration) {
  return {
    searchPost: async (keyword, highlightPostTag, highlightPreTag, limit, options = {}) => {
      assertParamExists("searchPost", "keyword", keyword);
      const localVarPath = `/apis/api.halo.run/v1alpha1/indices/post`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (highlightPostTag !== void 0) {
        localVarQueryParameter["highlightPostTag"] = highlightPostTag;
      }
      if (highlightPreTag !== void 0) {
        localVarQueryParameter["highlightPreTag"] = highlightPreTag;
      }
      if (keyword !== void 0) {
        localVarQueryParameter["keyword"] = keyword;
      }
      if (limit !== void 0) {
        localVarQueryParameter["limit"] = limit;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ApiHaloRunV1alpha1PostApiFp = function(configuration) {
  const localVarAxiosParamCreator = ApiHaloRunV1alpha1PostApiAxiosParamCreator(configuration);
  return {
    async searchPost(keyword, highlightPostTag, highlightPreTag, limit, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.searchPost(
        keyword,
        highlightPostTag,
        highlightPreTag,
        limit,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ApiHaloRunV1alpha1PostApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ApiHaloRunV1alpha1PostApiFp(configuration);
  return {
    searchPost(requestParameters, options) {
      return localVarFp.searchPost(
        requestParameters.keyword,
        requestParameters.highlightPostTag,
        requestParameters.highlightPreTag,
        requestParameters.limit,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class ApiHaloRunV1alpha1PostApi extends BaseAPI {
  searchPost(requestParameters, options) {
    return ApiHaloRunV1alpha1PostApiFp(this.configuration).searchPost(
      requestParameters.keyword,
      requestParameters.highlightPostTag,
      requestParameters.highlightPreTag,
      requestParameters.limit,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const ApiHaloRunV1alpha1StatsApiAxiosParamCreator = function(configuration) {
  return {
    queryStats: async (options = {}) => {
      const localVarPath = `/apis/api.halo.run/v1alpha1/stats/-`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ApiHaloRunV1alpha1StatsApiFp = function(configuration) {
  const localVarAxiosParamCreator = ApiHaloRunV1alpha1StatsApiAxiosParamCreator(configuration);
  return {
    async queryStats(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryStats(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ApiHaloRunV1alpha1StatsApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ApiHaloRunV1alpha1StatsApiFp(configuration);
  return {
    queryStats(options) {
      return localVarFp.queryStats(options).then((request) => request(axios, basePath));
    }
  };
};
class ApiHaloRunV1alpha1StatsApi extends BaseAPI {
  queryStats(options) {
    return ApiHaloRunV1alpha1StatsApiFp(this.configuration).queryStats(options).then((request) => request(this.axios, this.basePath));
  }
}

const ApiHaloRunV1alpha1TrackerApiAxiosParamCreator = function(configuration) {
  return {
    count: async (counterRequest, options = {}) => {
      assertParamExists("count", "counterRequest", counterRequest);
      const localVarPath = `/apis/api.halo.run/v1alpha1/trackers/counter`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        counterRequest,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    downvote: async (voteRequest, options = {}) => {
      assertParamExists("downvote", "voteRequest", voteRequest);
      const localVarPath = `/apis/api.halo.run/v1alpha1/trackers/downvote`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        voteRequest,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    upvote: async (voteRequest, options = {}) => {
      assertParamExists("upvote", "voteRequest", voteRequest);
      const localVarPath = `/apis/api.halo.run/v1alpha1/trackers/upvote`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        voteRequest,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ApiHaloRunV1alpha1TrackerApiFp = function(configuration) {
  const localVarAxiosParamCreator = ApiHaloRunV1alpha1TrackerApiAxiosParamCreator(configuration);
  return {
    async count(counterRequest, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.count(
        counterRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async downvote(voteRequest, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.downvote(
        voteRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async upvote(voteRequest, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.upvote(
        voteRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ApiHaloRunV1alpha1TrackerApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ApiHaloRunV1alpha1TrackerApiFp(configuration);
  return {
    count(requestParameters, options) {
      return localVarFp.count(requestParameters.counterRequest, options).then((request) => request(axios, basePath));
    },
    downvote(requestParameters, options) {
      return localVarFp.downvote(requestParameters.voteRequest, options).then((request) => request(axios, basePath));
    },
    upvote(requestParameters, options) {
      return localVarFp.upvote(requestParameters.voteRequest, options).then((request) => request(axios, basePath));
    }
  };
};
class ApiHaloRunV1alpha1TrackerApi extends BaseAPI {
  count(requestParameters, options) {
    return ApiHaloRunV1alpha1TrackerApiFp(this.configuration).count(requestParameters.counterRequest, options).then((request) => request(this.axios, this.basePath));
  }
  downvote(requestParameters, options) {
    return ApiHaloRunV1alpha1TrackerApiFp(this.configuration).downvote(requestParameters.voteRequest, options).then((request) => request(this.axios, this.basePath));
  }
  upvote(requestParameters, options) {
    return ApiHaloRunV1alpha1TrackerApiFp(this.configuration).upvote(requestParameters.voteRequest, options).then((request) => request(this.axios, this.basePath));
  }
}

const ApiHaloRunV1alpha1UserApiAxiosParamCreator = function(configuration) {
  return {
    signUp: async (signUpRequest, options = {}) => {
      assertParamExists("signUp", "signUpRequest", signUpRequest);
      const localVarPath = `/apis/api.halo.run/v1alpha1/users/-/signup`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        signUpRequest,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ApiHaloRunV1alpha1UserApiFp = function(configuration) {
  const localVarAxiosParamCreator = ApiHaloRunV1alpha1UserApiAxiosParamCreator(configuration);
  return {
    async signUp(signUpRequest, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.signUp(
        signUpRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ApiHaloRunV1alpha1UserApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ApiHaloRunV1alpha1UserApiFp(configuration);
  return {
    signUp(requestParameters, options) {
      return localVarFp.signUp(requestParameters.signUpRequest, options).then((request) => request(axios, basePath));
    }
  };
};
class ApiHaloRunV1alpha1UserApi extends BaseAPI {
  signUp(requestParameters, options) {
    return ApiHaloRunV1alpha1UserApiFp(this.configuration).signUp(requestParameters.signUpRequest, options).then((request) => request(this.axios, this.basePath));
  }
}

const ApiNotificationHaloRunV1alpha1NotificationApiAxiosParamCreator = function(configuration) {
  return {
    listUserNotificationPreferences: async (username, options = {}) => {
      assertParamExists(
        "listUserNotificationPreferences",
        "username",
        username
      );
      const localVarPath = `/apis/api.notification.halo.run/v1alpha1/userspaces/{username}/notification-preferences`.replace(
        `{${"username"}}`,
        encodeURIComponent(String(username))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listUserNotifications: async (username, fieldSelector, keyword, labelSelector, page, reason, size, sort, unRead, options = {}) => {
      assertParamExists("listUserNotifications", "username", username);
      const localVarPath = `/apis/api.notification.halo.run/v1alpha1/userspaces/{username}/notifications`.replace(
        `{${"username"}}`,
        encodeURIComponent(String(username))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (keyword !== void 0) {
        localVarQueryParameter["keyword"] = keyword;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (reason !== void 0) {
        localVarQueryParameter["reason"] = reason;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      if (unRead !== void 0) {
        localVarQueryParameter["unRead"] = unRead;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    markNotificationAsRead: async (username, name, options = {}) => {
      assertParamExists("markNotificationAsRead", "username", username);
      assertParamExists("markNotificationAsRead", "name", name);
      const localVarPath = `/apis/api.notification.halo.run/v1alpha1/userspaces/{username}/notifications/{name}/mark-as-read`.replace(`{${"username"}}`, encodeURIComponent(String(username))).replace(`{${"name"}}`, encodeURIComponent(String(name)));
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    markNotificationsAsRead: async (username, markSpecifiedRequest, options = {}) => {
      assertParamExists("markNotificationsAsRead", "username", username);
      assertParamExists(
        "markNotificationsAsRead",
        "markSpecifiedRequest",
        markSpecifiedRequest
      );
      const localVarPath = `/apis/api.notification.halo.run/v1alpha1/userspaces/{username}/notifications/-/mark-specified-as-read`.replace(
        `{${"username"}}`,
        encodeURIComponent(String(username))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        markSpecifiedRequest,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    saveUserNotificationPreferences: async (username, reasonTypeNotifierCollectionRequest, options = {}) => {
      assertParamExists(
        "saveUserNotificationPreferences",
        "username",
        username
      );
      const localVarPath = `/apis/api.notification.halo.run/v1alpha1/userspaces/{username}/notification-preferences`.replace(
        `{${"username"}}`,
        encodeURIComponent(String(username))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        reasonTypeNotifierCollectionRequest,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ApiNotificationHaloRunV1alpha1NotificationApiFp = function(configuration) {
  const localVarAxiosParamCreator = ApiNotificationHaloRunV1alpha1NotificationApiAxiosParamCreator(
    configuration
  );
  return {
    async listUserNotificationPreferences(username, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listUserNotificationPreferences(
        username,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listUserNotifications(username, fieldSelector, keyword, labelSelector, page, reason, size, sort, unRead, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listUserNotifications(
        username,
        fieldSelector,
        keyword,
        labelSelector,
        page,
        reason,
        size,
        sort,
        unRead,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async markNotificationAsRead(username, name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.markNotificationAsRead(
        username,
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async markNotificationsAsRead(username, markSpecifiedRequest, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.markNotificationsAsRead(
        username,
        markSpecifiedRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async saveUserNotificationPreferences(username, reasonTypeNotifierCollectionRequest, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.saveUserNotificationPreferences(
        username,
        reasonTypeNotifierCollectionRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ApiNotificationHaloRunV1alpha1NotificationApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ApiNotificationHaloRunV1alpha1NotificationApiFp(configuration);
  return {
    listUserNotificationPreferences(requestParameters, options) {
      return localVarFp.listUserNotificationPreferences(requestParameters.username, options).then((request) => request(axios, basePath));
    },
    listUserNotifications(requestParameters, options) {
      return localVarFp.listUserNotifications(
        requestParameters.username,
        requestParameters.fieldSelector,
        requestParameters.keyword,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.reason,
        requestParameters.size,
        requestParameters.sort,
        requestParameters.unRead,
        options
      ).then((request) => request(axios, basePath));
    },
    markNotificationAsRead(requestParameters, options) {
      return localVarFp.markNotificationAsRead(
        requestParameters.username,
        requestParameters.name,
        options
      ).then((request) => request(axios, basePath));
    },
    markNotificationsAsRead(requestParameters, options) {
      return localVarFp.markNotificationsAsRead(
        requestParameters.username,
        requestParameters.markSpecifiedRequest,
        options
      ).then((request) => request(axios, basePath));
    },
    saveUserNotificationPreferences(requestParameters, options) {
      return localVarFp.saveUserNotificationPreferences(
        requestParameters.username,
        requestParameters.reasonTypeNotifierCollectionRequest,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class ApiNotificationHaloRunV1alpha1NotificationApi extends BaseAPI {
  listUserNotificationPreferences(requestParameters, options) {
    return ApiNotificationHaloRunV1alpha1NotificationApiFp(this.configuration).listUserNotificationPreferences(requestParameters.username, options).then((request) => request(this.axios, this.basePath));
  }
  listUserNotifications(requestParameters, options) {
    return ApiNotificationHaloRunV1alpha1NotificationApiFp(this.configuration).listUserNotifications(
      requestParameters.username,
      requestParameters.fieldSelector,
      requestParameters.keyword,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.reason,
      requestParameters.size,
      requestParameters.sort,
      requestParameters.unRead,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  markNotificationAsRead(requestParameters, options) {
    return ApiNotificationHaloRunV1alpha1NotificationApiFp(this.configuration).markNotificationAsRead(
      requestParameters.username,
      requestParameters.name,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  markNotificationsAsRead(requestParameters, options) {
    return ApiNotificationHaloRunV1alpha1NotificationApiFp(this.configuration).markNotificationsAsRead(
      requestParameters.username,
      requestParameters.markSpecifiedRequest,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  saveUserNotificationPreferences(requestParameters, options) {
    return ApiNotificationHaloRunV1alpha1NotificationApiFp(this.configuration).saveUserNotificationPreferences(
      requestParameters.username,
      requestParameters.reasonTypeNotifierCollectionRequest,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const ApiNotificationHaloRunV1alpha1NotifierApiAxiosParamCreator = function(configuration) {
  return {
    fetchReceiverConfig: async (name, options = {}) => {
      assertParamExists("fetchReceiverConfig", "name", name);
      const localVarPath = `/apis/api.notification.halo.run/v1alpha1/notifiers/{name}/receiver-config`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    saveReceiverConfig: async (name, body, options = {}) => {
      assertParamExists("saveReceiverConfig", "name", name);
      assertParamExists("saveReceiverConfig", "body", body);
      const localVarPath = `/apis/api.notification.halo.run/v1alpha1/notifiers/{name}/receiver-config`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ApiNotificationHaloRunV1alpha1NotifierApiFp = function(configuration) {
  const localVarAxiosParamCreator = ApiNotificationHaloRunV1alpha1NotifierApiAxiosParamCreator(configuration);
  return {
    async fetchReceiverConfig(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchReceiverConfig(name, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async saveReceiverConfig(name, body, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.saveReceiverConfig(name, body, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ApiNotificationHaloRunV1alpha1NotifierApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ApiNotificationHaloRunV1alpha1NotifierApiFp(configuration);
  return {
    fetchReceiverConfig(requestParameters, options) {
      return localVarFp.fetchReceiverConfig(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    saveReceiverConfig(requestParameters, options) {
      return localVarFp.saveReceiverConfig(
        requestParameters.name,
        requestParameters.body,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class ApiNotificationHaloRunV1alpha1NotifierApi extends BaseAPI {
  fetchReceiverConfig(requestParameters, options) {
    return ApiNotificationHaloRunV1alpha1NotifierApiFp(this.configuration).fetchReceiverConfig(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  saveReceiverConfig(requestParameters, options) {
    return ApiNotificationHaloRunV1alpha1NotifierApiFp(this.configuration).saveReceiverConfig(
      requestParameters.name,
      requestParameters.body,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const ApiNotificationHaloRunV1alpha1SubscriptionApiAxiosParamCreator = function(configuration) {
  return {
    unsubscribe: async (token, options = {}) => {
      assertParamExists("unsubscribe", "token", token);
      const localVarPath = `/apis/api.notification.halo.run/v1alpha1/subscriptions/{name}/unsubscribe`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (token !== void 0) {
        localVarQueryParameter["token"] = token;
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ApiNotificationHaloRunV1alpha1SubscriptionApiFp = function(configuration) {
  const localVarAxiosParamCreator = ApiNotificationHaloRunV1alpha1SubscriptionApiAxiosParamCreator(
    configuration
  );
  return {
    async unsubscribe(token, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.unsubscribe(
        token,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ApiNotificationHaloRunV1alpha1SubscriptionApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ApiNotificationHaloRunV1alpha1SubscriptionApiFp(configuration);
  return {
    unsubscribe(requestParameters, options) {
      return localVarFp.unsubscribe(requestParameters.token, options).then((request) => request(axios, basePath));
    }
  };
};
class ApiNotificationHaloRunV1alpha1SubscriptionApi extends BaseAPI {
  unsubscribe(requestParameters, options) {
    return ApiNotificationHaloRunV1alpha1SubscriptionApiFp(this.configuration).unsubscribe(requestParameters.token, options).then((request) => request(this.axios, this.basePath));
  }
}

const ApiPluginHaloRunV1alpha1PluginApiAxiosParamCreator = function(configuration) {
  return {
    queryPluginAvailableByName: async (name, options = {}) => {
      assertParamExists("queryPluginAvailableByName", "name", name);
      const localVarPath = `/apis/api.plugin.halo.run/v1alpha1/plugins/{name}/available`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ApiPluginHaloRunV1alpha1PluginApiFp = function(configuration) {
  const localVarAxiosParamCreator = ApiPluginHaloRunV1alpha1PluginApiAxiosParamCreator(configuration);
  return {
    async queryPluginAvailableByName(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryPluginAvailableByName(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ApiPluginHaloRunV1alpha1PluginApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ApiPluginHaloRunV1alpha1PluginApiFp(configuration);
  return {
    queryPluginAvailableByName(requestParameters, options) {
      return localVarFp.queryPluginAvailableByName(requestParameters.name, options).then((request) => request(axios, basePath));
    }
  };
};
class ApiPluginHaloRunV1alpha1PluginApi extends BaseAPI {
  queryPluginAvailableByName(requestParameters, options) {
    return ApiPluginHaloRunV1alpha1PluginApiFp(this.configuration).queryPluginAvailableByName(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
}

const ApiSecurityHaloRunV1alpha1PersonalAccessTokenApiAxiosParamCreator = function(configuration) {
  return {
    deletePat: async (name, options = {}) => {
      assertParamExists("deletePat", "name", name);
      const localVarPath = `/apis/api.security.halo.run/v1alpha1/personalaccesstokens/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    generatePat: async (personalAccessToken, options = {}) => {
      assertParamExists(
        "generatePat",
        "personalAccessToken",
        personalAccessToken
      );
      const localVarPath = `/apis/api.security.halo.run/v1alpha1/personalaccesstokens`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        personalAccessToken,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    obtainPat: async (name, options = {}) => {
      assertParamExists("obtainPat", "name", name);
      const localVarPath = `/apis/api.security.halo.run/v1alpha1/personalaccesstokens/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    obtainPats: async (options = {}) => {
      const localVarPath = `/apis/api.security.halo.run/v1alpha1/personalaccesstokens`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    restorePat: async (name, options = {}) => {
      assertParamExists("restorePat", "name", name);
      const localVarPath = `/apis/api.security.halo.run/v1alpha1/personalaccesstokens/{name}/actions/restoration`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    revokePat: async (name, options = {}) => {
      assertParamExists("revokePat", "name", name);
      const localVarPath = `/apis/api.security.halo.run/v1alpha1/personalaccesstokens/{name}/actions/revocation`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ApiSecurityHaloRunV1alpha1PersonalAccessTokenApiFp = function(configuration) {
  const localVarAxiosParamCreator = ApiSecurityHaloRunV1alpha1PersonalAccessTokenApiAxiosParamCreator(
    configuration
  );
  return {
    async deletePat(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePat(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async generatePat(personalAccessToken, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.generatePat(
        personalAccessToken,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async obtainPat(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.obtainPat(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async obtainPats(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.obtainPats(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async restorePat(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.restorePat(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async revokePat(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.revokePat(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ApiSecurityHaloRunV1alpha1PersonalAccessTokenApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ApiSecurityHaloRunV1alpha1PersonalAccessTokenApiFp(configuration);
  return {
    deletePat(requestParameters, options) {
      return localVarFp.deletePat(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    generatePat(requestParameters, options) {
      return localVarFp.generatePat(requestParameters.personalAccessToken, options).then((request) => request(axios, basePath));
    },
    obtainPat(requestParameters, options) {
      return localVarFp.obtainPat(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    obtainPats(options) {
      return localVarFp.obtainPats(options).then((request) => request(axios, basePath));
    },
    restorePat(requestParameters, options) {
      return localVarFp.restorePat(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    revokePat(requestParameters, options) {
      return localVarFp.revokePat(requestParameters.name, options).then((request) => request(axios, basePath));
    }
  };
};
class ApiSecurityHaloRunV1alpha1PersonalAccessTokenApi extends BaseAPI {
  deletePat(requestParameters, options) {
    return ApiSecurityHaloRunV1alpha1PersonalAccessTokenApiFp(
      this.configuration
    ).deletePat(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  generatePat(requestParameters, options) {
    return ApiSecurityHaloRunV1alpha1PersonalAccessTokenApiFp(
      this.configuration
    ).generatePat(requestParameters.personalAccessToken, options).then((request) => request(this.axios, this.basePath));
  }
  obtainPat(requestParameters, options) {
    return ApiSecurityHaloRunV1alpha1PersonalAccessTokenApiFp(
      this.configuration
    ).obtainPat(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  obtainPats(options) {
    return ApiSecurityHaloRunV1alpha1PersonalAccessTokenApiFp(
      this.configuration
    ).obtainPats(options).then((request) => request(this.axios, this.basePath));
  }
  restorePat(requestParameters, options) {
    return ApiSecurityHaloRunV1alpha1PersonalAccessTokenApiFp(
      this.configuration
    ).restorePat(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  revokePat(requestParameters, options) {
    return ApiSecurityHaloRunV1alpha1PersonalAccessTokenApiFp(
      this.configuration
    ).revokePat(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
}

const AuthHaloRunV1alpha1AuthProviderApiAxiosParamCreator = function(configuration) {
  return {
    createauthHaloRunV1alpha1AuthProvider: async (authProvider, options = {}) => {
      const localVarPath = `/apis/auth.halo.run/v1alpha1/authproviders`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authProvider,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deleteauthHaloRunV1alpha1AuthProvider: async (name, options = {}) => {
      assertParamExists("deleteauthHaloRunV1alpha1AuthProvider", "name", name);
      const localVarPath = `/apis/auth.halo.run/v1alpha1/authproviders/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getauthHaloRunV1alpha1AuthProvider: async (name, options = {}) => {
      assertParamExists("getauthHaloRunV1alpha1AuthProvider", "name", name);
      const localVarPath = `/apis/auth.halo.run/v1alpha1/authproviders/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listauthHaloRunV1alpha1AuthProvider: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/auth.halo.run/v1alpha1/authproviders`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updateauthHaloRunV1alpha1AuthProvider: async (name, authProvider, options = {}) => {
      assertParamExists("updateauthHaloRunV1alpha1AuthProvider", "name", name);
      const localVarPath = `/apis/auth.halo.run/v1alpha1/authproviders/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authProvider,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const AuthHaloRunV1alpha1AuthProviderApiFp = function(configuration) {
  const localVarAxiosParamCreator = AuthHaloRunV1alpha1AuthProviderApiAxiosParamCreator(configuration);
  return {
    async createauthHaloRunV1alpha1AuthProvider(authProvider, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createauthHaloRunV1alpha1AuthProvider(
        authProvider,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deleteauthHaloRunV1alpha1AuthProvider(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteauthHaloRunV1alpha1AuthProvider(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getauthHaloRunV1alpha1AuthProvider(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getauthHaloRunV1alpha1AuthProvider(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listauthHaloRunV1alpha1AuthProvider(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listauthHaloRunV1alpha1AuthProvider(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updateauthHaloRunV1alpha1AuthProvider(name, authProvider, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateauthHaloRunV1alpha1AuthProvider(
        name,
        authProvider,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const AuthHaloRunV1alpha1AuthProviderApiFactory = function(configuration, basePath, axios) {
  const localVarFp = AuthHaloRunV1alpha1AuthProviderApiFp(configuration);
  return {
    createauthHaloRunV1alpha1AuthProvider(requestParameters = {}, options) {
      return localVarFp.createauthHaloRunV1alpha1AuthProvider(
        requestParameters.authProvider,
        options
      ).then((request) => request(axios, basePath));
    },
    deleteauthHaloRunV1alpha1AuthProvider(requestParameters, options) {
      return localVarFp.deleteauthHaloRunV1alpha1AuthProvider(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    getauthHaloRunV1alpha1AuthProvider(requestParameters, options) {
      return localVarFp.getauthHaloRunV1alpha1AuthProvider(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    listauthHaloRunV1alpha1AuthProvider(requestParameters = {}, options) {
      return localVarFp.listauthHaloRunV1alpha1AuthProvider(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updateauthHaloRunV1alpha1AuthProvider(requestParameters, options) {
      return localVarFp.updateauthHaloRunV1alpha1AuthProvider(
        requestParameters.name,
        requestParameters.authProvider,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class AuthHaloRunV1alpha1AuthProviderApi extends BaseAPI {
  createauthHaloRunV1alpha1AuthProvider(requestParameters = {}, options) {
    return AuthHaloRunV1alpha1AuthProviderApiFp(this.configuration).createauthHaloRunV1alpha1AuthProvider(
      requestParameters.authProvider,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  deleteauthHaloRunV1alpha1AuthProvider(requestParameters, options) {
    return AuthHaloRunV1alpha1AuthProviderApiFp(this.configuration).deleteauthHaloRunV1alpha1AuthProvider(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  getauthHaloRunV1alpha1AuthProvider(requestParameters, options) {
    return AuthHaloRunV1alpha1AuthProviderApiFp(this.configuration).getauthHaloRunV1alpha1AuthProvider(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  listauthHaloRunV1alpha1AuthProvider(requestParameters = {}, options) {
    return AuthHaloRunV1alpha1AuthProviderApiFp(this.configuration).listauthHaloRunV1alpha1AuthProvider(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updateauthHaloRunV1alpha1AuthProvider(requestParameters, options) {
    return AuthHaloRunV1alpha1AuthProviderApiFp(this.configuration).updateauthHaloRunV1alpha1AuthProvider(
      requestParameters.name,
      requestParameters.authProvider,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const AuthHaloRunV1alpha1UserConnectionApiAxiosParamCreator = function(configuration) {
  return {
    createauthHaloRunV1alpha1UserConnection: async (userConnection, options = {}) => {
      const localVarPath = `/apis/auth.halo.run/v1alpha1/userconnections`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userConnection,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deleteauthHaloRunV1alpha1UserConnection: async (name, options = {}) => {
      assertParamExists(
        "deleteauthHaloRunV1alpha1UserConnection",
        "name",
        name
      );
      const localVarPath = `/apis/auth.halo.run/v1alpha1/userconnections/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getauthHaloRunV1alpha1UserConnection: async (name, options = {}) => {
      assertParamExists("getauthHaloRunV1alpha1UserConnection", "name", name);
      const localVarPath = `/apis/auth.halo.run/v1alpha1/userconnections/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listauthHaloRunV1alpha1UserConnection: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/auth.halo.run/v1alpha1/userconnections`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updateauthHaloRunV1alpha1UserConnection: async (name, userConnection, options = {}) => {
      assertParamExists(
        "updateauthHaloRunV1alpha1UserConnection",
        "name",
        name
      );
      const localVarPath = `/apis/auth.halo.run/v1alpha1/userconnections/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userConnection,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const AuthHaloRunV1alpha1UserConnectionApiFp = function(configuration) {
  const localVarAxiosParamCreator = AuthHaloRunV1alpha1UserConnectionApiAxiosParamCreator(configuration);
  return {
    async createauthHaloRunV1alpha1UserConnection(userConnection, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createauthHaloRunV1alpha1UserConnection(
        userConnection,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deleteauthHaloRunV1alpha1UserConnection(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteauthHaloRunV1alpha1UserConnection(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getauthHaloRunV1alpha1UserConnection(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getauthHaloRunV1alpha1UserConnection(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listauthHaloRunV1alpha1UserConnection(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listauthHaloRunV1alpha1UserConnection(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updateauthHaloRunV1alpha1UserConnection(name, userConnection, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateauthHaloRunV1alpha1UserConnection(
        name,
        userConnection,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const AuthHaloRunV1alpha1UserConnectionApiFactory = function(configuration, basePath, axios) {
  const localVarFp = AuthHaloRunV1alpha1UserConnectionApiFp(configuration);
  return {
    createauthHaloRunV1alpha1UserConnection(requestParameters = {}, options) {
      return localVarFp.createauthHaloRunV1alpha1UserConnection(
        requestParameters.userConnection,
        options
      ).then((request) => request(axios, basePath));
    },
    deleteauthHaloRunV1alpha1UserConnection(requestParameters, options) {
      return localVarFp.deleteauthHaloRunV1alpha1UserConnection(
        requestParameters.name,
        options
      ).then((request) => request(axios, basePath));
    },
    getauthHaloRunV1alpha1UserConnection(requestParameters, options) {
      return localVarFp.getauthHaloRunV1alpha1UserConnection(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    listauthHaloRunV1alpha1UserConnection(requestParameters = {}, options) {
      return localVarFp.listauthHaloRunV1alpha1UserConnection(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updateauthHaloRunV1alpha1UserConnection(requestParameters, options) {
      return localVarFp.updateauthHaloRunV1alpha1UserConnection(
        requestParameters.name,
        requestParameters.userConnection,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class AuthHaloRunV1alpha1UserConnectionApi extends BaseAPI {
  createauthHaloRunV1alpha1UserConnection(requestParameters = {}, options) {
    return AuthHaloRunV1alpha1UserConnectionApiFp(this.configuration).createauthHaloRunV1alpha1UserConnection(
      requestParameters.userConnection,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  deleteauthHaloRunV1alpha1UserConnection(requestParameters, options) {
    return AuthHaloRunV1alpha1UserConnectionApiFp(this.configuration).deleteauthHaloRunV1alpha1UserConnection(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  getauthHaloRunV1alpha1UserConnection(requestParameters, options) {
    return AuthHaloRunV1alpha1UserConnectionApiFp(this.configuration).getauthHaloRunV1alpha1UserConnection(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  listauthHaloRunV1alpha1UserConnection(requestParameters = {}, options) {
    return AuthHaloRunV1alpha1UserConnectionApiFp(this.configuration).listauthHaloRunV1alpha1UserConnection(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updateauthHaloRunV1alpha1UserConnection(requestParameters, options) {
    return AuthHaloRunV1alpha1UserConnectionApiFp(this.configuration).updateauthHaloRunV1alpha1UserConnection(
      requestParameters.name,
      requestParameters.userConnection,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const ContentHaloRunV1alpha1CategoryApiAxiosParamCreator = function(configuration) {
  return {
    createcontentHaloRunV1alpha1Category: async (category, options = {}) => {
      const localVarPath = `/apis/content.halo.run/v1alpha1/categories`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        category,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletecontentHaloRunV1alpha1Category: async (name, options = {}) => {
      assertParamExists("deletecontentHaloRunV1alpha1Category", "name", name);
      const localVarPath = `/apis/content.halo.run/v1alpha1/categories/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getcontentHaloRunV1alpha1Category: async (name, options = {}) => {
      assertParamExists("getcontentHaloRunV1alpha1Category", "name", name);
      const localVarPath = `/apis/content.halo.run/v1alpha1/categories/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listcontentHaloRunV1alpha1Category: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/content.halo.run/v1alpha1/categories`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatecontentHaloRunV1alpha1Category: async (name, category, options = {}) => {
      assertParamExists("updatecontentHaloRunV1alpha1Category", "name", name);
      const localVarPath = `/apis/content.halo.run/v1alpha1/categories/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        category,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ContentHaloRunV1alpha1CategoryApiFp = function(configuration) {
  const localVarAxiosParamCreator = ContentHaloRunV1alpha1CategoryApiAxiosParamCreator(configuration);
  return {
    async createcontentHaloRunV1alpha1Category(category, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createcontentHaloRunV1alpha1Category(
        category,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletecontentHaloRunV1alpha1Category(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletecontentHaloRunV1alpha1Category(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getcontentHaloRunV1alpha1Category(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getcontentHaloRunV1alpha1Category(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listcontentHaloRunV1alpha1Category(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listcontentHaloRunV1alpha1Category(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatecontentHaloRunV1alpha1Category(name, category, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatecontentHaloRunV1alpha1Category(
        name,
        category,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ContentHaloRunV1alpha1CategoryApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ContentHaloRunV1alpha1CategoryApiFp(configuration);
  return {
    createcontentHaloRunV1alpha1Category(requestParameters = {}, options) {
      return localVarFp.createcontentHaloRunV1alpha1Category(
        requestParameters.category,
        options
      ).then((request) => request(axios, basePath));
    },
    deletecontentHaloRunV1alpha1Category(requestParameters, options) {
      return localVarFp.deletecontentHaloRunV1alpha1Category(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    getcontentHaloRunV1alpha1Category(requestParameters, options) {
      return localVarFp.getcontentHaloRunV1alpha1Category(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    listcontentHaloRunV1alpha1Category(requestParameters = {}, options) {
      return localVarFp.listcontentHaloRunV1alpha1Category(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatecontentHaloRunV1alpha1Category(requestParameters, options) {
      return localVarFp.updatecontentHaloRunV1alpha1Category(
        requestParameters.name,
        requestParameters.category,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class ContentHaloRunV1alpha1CategoryApi extends BaseAPI {
  createcontentHaloRunV1alpha1Category(requestParameters = {}, options) {
    return ContentHaloRunV1alpha1CategoryApiFp(this.configuration).createcontentHaloRunV1alpha1Category(requestParameters.category, options).then((request) => request(this.axios, this.basePath));
  }
  deletecontentHaloRunV1alpha1Category(requestParameters, options) {
    return ContentHaloRunV1alpha1CategoryApiFp(this.configuration).deletecontentHaloRunV1alpha1Category(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  getcontentHaloRunV1alpha1Category(requestParameters, options) {
    return ContentHaloRunV1alpha1CategoryApiFp(this.configuration).getcontentHaloRunV1alpha1Category(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  listcontentHaloRunV1alpha1Category(requestParameters = {}, options) {
    return ContentHaloRunV1alpha1CategoryApiFp(this.configuration).listcontentHaloRunV1alpha1Category(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatecontentHaloRunV1alpha1Category(requestParameters, options) {
    return ContentHaloRunV1alpha1CategoryApiFp(this.configuration).updatecontentHaloRunV1alpha1Category(
      requestParameters.name,
      requestParameters.category,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const ContentHaloRunV1alpha1CommentApiAxiosParamCreator = function(configuration) {
  return {
    createcontentHaloRunV1alpha1Comment: async (comment, options = {}) => {
      const localVarPath = `/apis/content.halo.run/v1alpha1/comments`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        comment,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletecontentHaloRunV1alpha1Comment: async (name, options = {}) => {
      assertParamExists("deletecontentHaloRunV1alpha1Comment", "name", name);
      const localVarPath = `/apis/content.halo.run/v1alpha1/comments/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getcontentHaloRunV1alpha1Comment: async (name, options = {}) => {
      assertParamExists("getcontentHaloRunV1alpha1Comment", "name", name);
      const localVarPath = `/apis/content.halo.run/v1alpha1/comments/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listcontentHaloRunV1alpha1Comment: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/content.halo.run/v1alpha1/comments`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatecontentHaloRunV1alpha1Comment: async (name, comment, options = {}) => {
      assertParamExists("updatecontentHaloRunV1alpha1Comment", "name", name);
      const localVarPath = `/apis/content.halo.run/v1alpha1/comments/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        comment,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ContentHaloRunV1alpha1CommentApiFp = function(configuration) {
  const localVarAxiosParamCreator = ContentHaloRunV1alpha1CommentApiAxiosParamCreator(configuration);
  return {
    async createcontentHaloRunV1alpha1Comment(comment, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createcontentHaloRunV1alpha1Comment(
        comment,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletecontentHaloRunV1alpha1Comment(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletecontentHaloRunV1alpha1Comment(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getcontentHaloRunV1alpha1Comment(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getcontentHaloRunV1alpha1Comment(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listcontentHaloRunV1alpha1Comment(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listcontentHaloRunV1alpha1Comment(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatecontentHaloRunV1alpha1Comment(name, comment, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatecontentHaloRunV1alpha1Comment(
        name,
        comment,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ContentHaloRunV1alpha1CommentApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ContentHaloRunV1alpha1CommentApiFp(configuration);
  return {
    createcontentHaloRunV1alpha1Comment(requestParameters = {}, options) {
      return localVarFp.createcontentHaloRunV1alpha1Comment(requestParameters.comment, options).then((request) => request(axios, basePath));
    },
    deletecontentHaloRunV1alpha1Comment(requestParameters, options) {
      return localVarFp.deletecontentHaloRunV1alpha1Comment(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    getcontentHaloRunV1alpha1Comment(requestParameters, options) {
      return localVarFp.getcontentHaloRunV1alpha1Comment(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    listcontentHaloRunV1alpha1Comment(requestParameters = {}, options) {
      return localVarFp.listcontentHaloRunV1alpha1Comment(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatecontentHaloRunV1alpha1Comment(requestParameters, options) {
      return localVarFp.updatecontentHaloRunV1alpha1Comment(
        requestParameters.name,
        requestParameters.comment,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class ContentHaloRunV1alpha1CommentApi extends BaseAPI {
  createcontentHaloRunV1alpha1Comment(requestParameters = {}, options) {
    return ContentHaloRunV1alpha1CommentApiFp(this.configuration).createcontentHaloRunV1alpha1Comment(requestParameters.comment, options).then((request) => request(this.axios, this.basePath));
  }
  deletecontentHaloRunV1alpha1Comment(requestParameters, options) {
    return ContentHaloRunV1alpha1CommentApiFp(this.configuration).deletecontentHaloRunV1alpha1Comment(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  getcontentHaloRunV1alpha1Comment(requestParameters, options) {
    return ContentHaloRunV1alpha1CommentApiFp(this.configuration).getcontentHaloRunV1alpha1Comment(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  listcontentHaloRunV1alpha1Comment(requestParameters = {}, options) {
    return ContentHaloRunV1alpha1CommentApiFp(this.configuration).listcontentHaloRunV1alpha1Comment(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatecontentHaloRunV1alpha1Comment(requestParameters, options) {
    return ContentHaloRunV1alpha1CommentApiFp(this.configuration).updatecontentHaloRunV1alpha1Comment(
      requestParameters.name,
      requestParameters.comment,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const ContentHaloRunV1alpha1PostApiAxiosParamCreator = function(configuration) {
  return {
    createcontentHaloRunV1alpha1Post: async (post, options = {}) => {
      const localVarPath = `/apis/content.halo.run/v1alpha1/posts`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        post,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletecontentHaloRunV1alpha1Post: async (name, options = {}) => {
      assertParamExists("deletecontentHaloRunV1alpha1Post", "name", name);
      const localVarPath = `/apis/content.halo.run/v1alpha1/posts/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getcontentHaloRunV1alpha1Post: async (name, options = {}) => {
      assertParamExists("getcontentHaloRunV1alpha1Post", "name", name);
      const localVarPath = `/apis/content.halo.run/v1alpha1/posts/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listcontentHaloRunV1alpha1Post: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/content.halo.run/v1alpha1/posts`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatecontentHaloRunV1alpha1Post: async (name, post, options = {}) => {
      assertParamExists("updatecontentHaloRunV1alpha1Post", "name", name);
      const localVarPath = `/apis/content.halo.run/v1alpha1/posts/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        post,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ContentHaloRunV1alpha1PostApiFp = function(configuration) {
  const localVarAxiosParamCreator = ContentHaloRunV1alpha1PostApiAxiosParamCreator(configuration);
  return {
    async createcontentHaloRunV1alpha1Post(post, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createcontentHaloRunV1alpha1Post(
        post,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletecontentHaloRunV1alpha1Post(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletecontentHaloRunV1alpha1Post(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getcontentHaloRunV1alpha1Post(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getcontentHaloRunV1alpha1Post(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listcontentHaloRunV1alpha1Post(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listcontentHaloRunV1alpha1Post(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatecontentHaloRunV1alpha1Post(name, post, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatecontentHaloRunV1alpha1Post(
        name,
        post,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ContentHaloRunV1alpha1PostApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ContentHaloRunV1alpha1PostApiFp(configuration);
  return {
    createcontentHaloRunV1alpha1Post(requestParameters = {}, options) {
      return localVarFp.createcontentHaloRunV1alpha1Post(requestParameters.post, options).then((request) => request(axios, basePath));
    },
    deletecontentHaloRunV1alpha1Post(requestParameters, options) {
      return localVarFp.deletecontentHaloRunV1alpha1Post(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    getcontentHaloRunV1alpha1Post(requestParameters, options) {
      return localVarFp.getcontentHaloRunV1alpha1Post(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    listcontentHaloRunV1alpha1Post(requestParameters = {}, options) {
      return localVarFp.listcontentHaloRunV1alpha1Post(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatecontentHaloRunV1alpha1Post(requestParameters, options) {
      return localVarFp.updatecontentHaloRunV1alpha1Post(
        requestParameters.name,
        requestParameters.post,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class ContentHaloRunV1alpha1PostApi extends BaseAPI {
  createcontentHaloRunV1alpha1Post(requestParameters = {}, options) {
    return ContentHaloRunV1alpha1PostApiFp(this.configuration).createcontentHaloRunV1alpha1Post(requestParameters.post, options).then((request) => request(this.axios, this.basePath));
  }
  deletecontentHaloRunV1alpha1Post(requestParameters, options) {
    return ContentHaloRunV1alpha1PostApiFp(this.configuration).deletecontentHaloRunV1alpha1Post(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  getcontentHaloRunV1alpha1Post(requestParameters, options) {
    return ContentHaloRunV1alpha1PostApiFp(this.configuration).getcontentHaloRunV1alpha1Post(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  listcontentHaloRunV1alpha1Post(requestParameters = {}, options) {
    return ContentHaloRunV1alpha1PostApiFp(this.configuration).listcontentHaloRunV1alpha1Post(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatecontentHaloRunV1alpha1Post(requestParameters, options) {
    return ContentHaloRunV1alpha1PostApiFp(this.configuration).updatecontentHaloRunV1alpha1Post(
      requestParameters.name,
      requestParameters.post,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const ContentHaloRunV1alpha1ReplyApiAxiosParamCreator = function(configuration) {
  return {
    createcontentHaloRunV1alpha1Reply: async (reply, options = {}) => {
      const localVarPath = `/apis/content.halo.run/v1alpha1/replies`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        reply,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletecontentHaloRunV1alpha1Reply: async (name, options = {}) => {
      assertParamExists("deletecontentHaloRunV1alpha1Reply", "name", name);
      const localVarPath = `/apis/content.halo.run/v1alpha1/replies/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getcontentHaloRunV1alpha1Reply: async (name, options = {}) => {
      assertParamExists("getcontentHaloRunV1alpha1Reply", "name", name);
      const localVarPath = `/apis/content.halo.run/v1alpha1/replies/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listcontentHaloRunV1alpha1Reply: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/content.halo.run/v1alpha1/replies`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatecontentHaloRunV1alpha1Reply: async (name, reply, options = {}) => {
      assertParamExists("updatecontentHaloRunV1alpha1Reply", "name", name);
      const localVarPath = `/apis/content.halo.run/v1alpha1/replies/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        reply,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ContentHaloRunV1alpha1ReplyApiFp = function(configuration) {
  const localVarAxiosParamCreator = ContentHaloRunV1alpha1ReplyApiAxiosParamCreator(configuration);
  return {
    async createcontentHaloRunV1alpha1Reply(reply, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createcontentHaloRunV1alpha1Reply(
        reply,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletecontentHaloRunV1alpha1Reply(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletecontentHaloRunV1alpha1Reply(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getcontentHaloRunV1alpha1Reply(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getcontentHaloRunV1alpha1Reply(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listcontentHaloRunV1alpha1Reply(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listcontentHaloRunV1alpha1Reply(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatecontentHaloRunV1alpha1Reply(name, reply, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatecontentHaloRunV1alpha1Reply(
        name,
        reply,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ContentHaloRunV1alpha1ReplyApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ContentHaloRunV1alpha1ReplyApiFp(configuration);
  return {
    createcontentHaloRunV1alpha1Reply(requestParameters = {}, options) {
      return localVarFp.createcontentHaloRunV1alpha1Reply(requestParameters.reply, options).then((request) => request(axios, basePath));
    },
    deletecontentHaloRunV1alpha1Reply(requestParameters, options) {
      return localVarFp.deletecontentHaloRunV1alpha1Reply(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    getcontentHaloRunV1alpha1Reply(requestParameters, options) {
      return localVarFp.getcontentHaloRunV1alpha1Reply(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    listcontentHaloRunV1alpha1Reply(requestParameters = {}, options) {
      return localVarFp.listcontentHaloRunV1alpha1Reply(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatecontentHaloRunV1alpha1Reply(requestParameters, options) {
      return localVarFp.updatecontentHaloRunV1alpha1Reply(
        requestParameters.name,
        requestParameters.reply,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class ContentHaloRunV1alpha1ReplyApi extends BaseAPI {
  createcontentHaloRunV1alpha1Reply(requestParameters = {}, options) {
    return ContentHaloRunV1alpha1ReplyApiFp(this.configuration).createcontentHaloRunV1alpha1Reply(requestParameters.reply, options).then((request) => request(this.axios, this.basePath));
  }
  deletecontentHaloRunV1alpha1Reply(requestParameters, options) {
    return ContentHaloRunV1alpha1ReplyApiFp(this.configuration).deletecontentHaloRunV1alpha1Reply(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  getcontentHaloRunV1alpha1Reply(requestParameters, options) {
    return ContentHaloRunV1alpha1ReplyApiFp(this.configuration).getcontentHaloRunV1alpha1Reply(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  listcontentHaloRunV1alpha1Reply(requestParameters = {}, options) {
    return ContentHaloRunV1alpha1ReplyApiFp(this.configuration).listcontentHaloRunV1alpha1Reply(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatecontentHaloRunV1alpha1Reply(requestParameters, options) {
    return ContentHaloRunV1alpha1ReplyApiFp(this.configuration).updatecontentHaloRunV1alpha1Reply(
      requestParameters.name,
      requestParameters.reply,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const ContentHaloRunV1alpha1SinglePageApiAxiosParamCreator = function(configuration) {
  return {
    createcontentHaloRunV1alpha1SinglePage: async (singlePage, options = {}) => {
      const localVarPath = `/apis/content.halo.run/v1alpha1/singlepages`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        singlePage,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletecontentHaloRunV1alpha1SinglePage: async (name, options = {}) => {
      assertParamExists("deletecontentHaloRunV1alpha1SinglePage", "name", name);
      const localVarPath = `/apis/content.halo.run/v1alpha1/singlepages/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getcontentHaloRunV1alpha1SinglePage: async (name, options = {}) => {
      assertParamExists("getcontentHaloRunV1alpha1SinglePage", "name", name);
      const localVarPath = `/apis/content.halo.run/v1alpha1/singlepages/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listcontentHaloRunV1alpha1SinglePage: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/content.halo.run/v1alpha1/singlepages`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatecontentHaloRunV1alpha1SinglePage: async (name, singlePage, options = {}) => {
      assertParamExists("updatecontentHaloRunV1alpha1SinglePage", "name", name);
      const localVarPath = `/apis/content.halo.run/v1alpha1/singlepages/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        singlePage,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ContentHaloRunV1alpha1SinglePageApiFp = function(configuration) {
  const localVarAxiosParamCreator = ContentHaloRunV1alpha1SinglePageApiAxiosParamCreator(configuration);
  return {
    async createcontentHaloRunV1alpha1SinglePage(singlePage, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createcontentHaloRunV1alpha1SinglePage(
        singlePage,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletecontentHaloRunV1alpha1SinglePage(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletecontentHaloRunV1alpha1SinglePage(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getcontentHaloRunV1alpha1SinglePage(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getcontentHaloRunV1alpha1SinglePage(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listcontentHaloRunV1alpha1SinglePage(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listcontentHaloRunV1alpha1SinglePage(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatecontentHaloRunV1alpha1SinglePage(name, singlePage, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatecontentHaloRunV1alpha1SinglePage(
        name,
        singlePage,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ContentHaloRunV1alpha1SinglePageApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ContentHaloRunV1alpha1SinglePageApiFp(configuration);
  return {
    createcontentHaloRunV1alpha1SinglePage(requestParameters = {}, options) {
      return localVarFp.createcontentHaloRunV1alpha1SinglePage(
        requestParameters.singlePage,
        options
      ).then((request) => request(axios, basePath));
    },
    deletecontentHaloRunV1alpha1SinglePage(requestParameters, options) {
      return localVarFp.deletecontentHaloRunV1alpha1SinglePage(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    getcontentHaloRunV1alpha1SinglePage(requestParameters, options) {
      return localVarFp.getcontentHaloRunV1alpha1SinglePage(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    listcontentHaloRunV1alpha1SinglePage(requestParameters = {}, options) {
      return localVarFp.listcontentHaloRunV1alpha1SinglePage(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatecontentHaloRunV1alpha1SinglePage(requestParameters, options) {
      return localVarFp.updatecontentHaloRunV1alpha1SinglePage(
        requestParameters.name,
        requestParameters.singlePage,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class ContentHaloRunV1alpha1SinglePageApi extends BaseAPI {
  createcontentHaloRunV1alpha1SinglePage(requestParameters = {}, options) {
    return ContentHaloRunV1alpha1SinglePageApiFp(this.configuration).createcontentHaloRunV1alpha1SinglePage(
      requestParameters.singlePage,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  deletecontentHaloRunV1alpha1SinglePage(requestParameters, options) {
    return ContentHaloRunV1alpha1SinglePageApiFp(this.configuration).deletecontentHaloRunV1alpha1SinglePage(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  getcontentHaloRunV1alpha1SinglePage(requestParameters, options) {
    return ContentHaloRunV1alpha1SinglePageApiFp(this.configuration).getcontentHaloRunV1alpha1SinglePage(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  listcontentHaloRunV1alpha1SinglePage(requestParameters = {}, options) {
    return ContentHaloRunV1alpha1SinglePageApiFp(this.configuration).listcontentHaloRunV1alpha1SinglePage(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatecontentHaloRunV1alpha1SinglePage(requestParameters, options) {
    return ContentHaloRunV1alpha1SinglePageApiFp(this.configuration).updatecontentHaloRunV1alpha1SinglePage(
      requestParameters.name,
      requestParameters.singlePage,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const ContentHaloRunV1alpha1SnapshotApiAxiosParamCreator = function(configuration) {
  return {
    createcontentHaloRunV1alpha1Snapshot: async (snapshot, options = {}) => {
      const localVarPath = `/apis/content.halo.run/v1alpha1/snapshots`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        snapshot,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletecontentHaloRunV1alpha1Snapshot: async (name, options = {}) => {
      assertParamExists("deletecontentHaloRunV1alpha1Snapshot", "name", name);
      const localVarPath = `/apis/content.halo.run/v1alpha1/snapshots/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getcontentHaloRunV1alpha1Snapshot: async (name, options = {}) => {
      assertParamExists("getcontentHaloRunV1alpha1Snapshot", "name", name);
      const localVarPath = `/apis/content.halo.run/v1alpha1/snapshots/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listcontentHaloRunV1alpha1Snapshot: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/content.halo.run/v1alpha1/snapshots`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatecontentHaloRunV1alpha1Snapshot: async (name, snapshot, options = {}) => {
      assertParamExists("updatecontentHaloRunV1alpha1Snapshot", "name", name);
      const localVarPath = `/apis/content.halo.run/v1alpha1/snapshots/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        snapshot,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ContentHaloRunV1alpha1SnapshotApiFp = function(configuration) {
  const localVarAxiosParamCreator = ContentHaloRunV1alpha1SnapshotApiAxiosParamCreator(configuration);
  return {
    async createcontentHaloRunV1alpha1Snapshot(snapshot, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createcontentHaloRunV1alpha1Snapshot(
        snapshot,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletecontentHaloRunV1alpha1Snapshot(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletecontentHaloRunV1alpha1Snapshot(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getcontentHaloRunV1alpha1Snapshot(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getcontentHaloRunV1alpha1Snapshot(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listcontentHaloRunV1alpha1Snapshot(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listcontentHaloRunV1alpha1Snapshot(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatecontentHaloRunV1alpha1Snapshot(name, snapshot, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatecontentHaloRunV1alpha1Snapshot(
        name,
        snapshot,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ContentHaloRunV1alpha1SnapshotApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ContentHaloRunV1alpha1SnapshotApiFp(configuration);
  return {
    createcontentHaloRunV1alpha1Snapshot(requestParameters = {}, options) {
      return localVarFp.createcontentHaloRunV1alpha1Snapshot(
        requestParameters.snapshot,
        options
      ).then((request) => request(axios, basePath));
    },
    deletecontentHaloRunV1alpha1Snapshot(requestParameters, options) {
      return localVarFp.deletecontentHaloRunV1alpha1Snapshot(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    getcontentHaloRunV1alpha1Snapshot(requestParameters, options) {
      return localVarFp.getcontentHaloRunV1alpha1Snapshot(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    listcontentHaloRunV1alpha1Snapshot(requestParameters = {}, options) {
      return localVarFp.listcontentHaloRunV1alpha1Snapshot(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatecontentHaloRunV1alpha1Snapshot(requestParameters, options) {
      return localVarFp.updatecontentHaloRunV1alpha1Snapshot(
        requestParameters.name,
        requestParameters.snapshot,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class ContentHaloRunV1alpha1SnapshotApi extends BaseAPI {
  createcontentHaloRunV1alpha1Snapshot(requestParameters = {}, options) {
    return ContentHaloRunV1alpha1SnapshotApiFp(this.configuration).createcontentHaloRunV1alpha1Snapshot(requestParameters.snapshot, options).then((request) => request(this.axios, this.basePath));
  }
  deletecontentHaloRunV1alpha1Snapshot(requestParameters, options) {
    return ContentHaloRunV1alpha1SnapshotApiFp(this.configuration).deletecontentHaloRunV1alpha1Snapshot(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  getcontentHaloRunV1alpha1Snapshot(requestParameters, options) {
    return ContentHaloRunV1alpha1SnapshotApiFp(this.configuration).getcontentHaloRunV1alpha1Snapshot(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  listcontentHaloRunV1alpha1Snapshot(requestParameters = {}, options) {
    return ContentHaloRunV1alpha1SnapshotApiFp(this.configuration).listcontentHaloRunV1alpha1Snapshot(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatecontentHaloRunV1alpha1Snapshot(requestParameters, options) {
    return ContentHaloRunV1alpha1SnapshotApiFp(this.configuration).updatecontentHaloRunV1alpha1Snapshot(
      requestParameters.name,
      requestParameters.snapshot,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const ContentHaloRunV1alpha1TagApiAxiosParamCreator = function(configuration) {
  return {
    createcontentHaloRunV1alpha1Tag: async (tag, options = {}) => {
      const localVarPath = `/apis/content.halo.run/v1alpha1/tags`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        tag,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletecontentHaloRunV1alpha1Tag: async (name, options = {}) => {
      assertParamExists("deletecontentHaloRunV1alpha1Tag", "name", name);
      const localVarPath = `/apis/content.halo.run/v1alpha1/tags/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getcontentHaloRunV1alpha1Tag: async (name, options = {}) => {
      assertParamExists("getcontentHaloRunV1alpha1Tag", "name", name);
      const localVarPath = `/apis/content.halo.run/v1alpha1/tags/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listcontentHaloRunV1alpha1Tag: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/content.halo.run/v1alpha1/tags`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatecontentHaloRunV1alpha1Tag: async (name, tag, options = {}) => {
      assertParamExists("updatecontentHaloRunV1alpha1Tag", "name", name);
      const localVarPath = `/apis/content.halo.run/v1alpha1/tags/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        tag,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ContentHaloRunV1alpha1TagApiFp = function(configuration) {
  const localVarAxiosParamCreator = ContentHaloRunV1alpha1TagApiAxiosParamCreator(configuration);
  return {
    async createcontentHaloRunV1alpha1Tag(tag, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createcontentHaloRunV1alpha1Tag(
        tag,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletecontentHaloRunV1alpha1Tag(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletecontentHaloRunV1alpha1Tag(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getcontentHaloRunV1alpha1Tag(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getcontentHaloRunV1alpha1Tag(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listcontentHaloRunV1alpha1Tag(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listcontentHaloRunV1alpha1Tag(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatecontentHaloRunV1alpha1Tag(name, tag, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatecontentHaloRunV1alpha1Tag(
        name,
        tag,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ContentHaloRunV1alpha1TagApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ContentHaloRunV1alpha1TagApiFp(configuration);
  return {
    createcontentHaloRunV1alpha1Tag(requestParameters = {}, options) {
      return localVarFp.createcontentHaloRunV1alpha1Tag(requestParameters.tag, options).then((request) => request(axios, basePath));
    },
    deletecontentHaloRunV1alpha1Tag(requestParameters, options) {
      return localVarFp.deletecontentHaloRunV1alpha1Tag(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    getcontentHaloRunV1alpha1Tag(requestParameters, options) {
      return localVarFp.getcontentHaloRunV1alpha1Tag(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    listcontentHaloRunV1alpha1Tag(requestParameters = {}, options) {
      return localVarFp.listcontentHaloRunV1alpha1Tag(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatecontentHaloRunV1alpha1Tag(requestParameters, options) {
      return localVarFp.updatecontentHaloRunV1alpha1Tag(
        requestParameters.name,
        requestParameters.tag,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class ContentHaloRunV1alpha1TagApi extends BaseAPI {
  createcontentHaloRunV1alpha1Tag(requestParameters = {}, options) {
    return ContentHaloRunV1alpha1TagApiFp(this.configuration).createcontentHaloRunV1alpha1Tag(requestParameters.tag, options).then((request) => request(this.axios, this.basePath));
  }
  deletecontentHaloRunV1alpha1Tag(requestParameters, options) {
    return ContentHaloRunV1alpha1TagApiFp(this.configuration).deletecontentHaloRunV1alpha1Tag(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  getcontentHaloRunV1alpha1Tag(requestParameters, options) {
    return ContentHaloRunV1alpha1TagApiFp(this.configuration).getcontentHaloRunV1alpha1Tag(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  listcontentHaloRunV1alpha1Tag(requestParameters = {}, options) {
    return ContentHaloRunV1alpha1TagApiFp(this.configuration).listcontentHaloRunV1alpha1Tag(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatecontentHaloRunV1alpha1Tag(requestParameters, options) {
    return ContentHaloRunV1alpha1TagApiFp(this.configuration).updatecontentHaloRunV1alpha1Tag(
      requestParameters.name,
      requestParameters.tag,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const LoginApiAxiosParamCreator = function(configuration) {
  return {
    getPublicKey: async (options = {}) => {
      const localVarPath = `/login/public-key`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const LoginApiFp = function(configuration) {
  const localVarAxiosParamCreator = LoginApiAxiosParamCreator(configuration);
  return {
    async getPublicKey(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPublicKey(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const LoginApiFactory = function(configuration, basePath, axios) {
  const localVarFp = LoginApiFp(configuration);
  return {
    getPublicKey(options) {
      return localVarFp.getPublicKey(options).then((request) => request(axios, basePath));
    }
  };
};
class LoginApi extends BaseAPI {
  getPublicKey(options) {
    return LoginApiFp(this.configuration).getPublicKey(options).then((request) => request(this.axios, this.basePath));
  }
}

const MetricsHaloRunV1alpha1CounterApiAxiosParamCreator = function(configuration) {
  return {
    createmetricsHaloRunV1alpha1Counter: async (counter, options = {}) => {
      const localVarPath = `/apis/metrics.halo.run/v1alpha1/counters`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        counter,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletemetricsHaloRunV1alpha1Counter: async (name, options = {}) => {
      assertParamExists("deletemetricsHaloRunV1alpha1Counter", "name", name);
      const localVarPath = `/apis/metrics.halo.run/v1alpha1/counters/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getmetricsHaloRunV1alpha1Counter: async (name, options = {}) => {
      assertParamExists("getmetricsHaloRunV1alpha1Counter", "name", name);
      const localVarPath = `/apis/metrics.halo.run/v1alpha1/counters/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listmetricsHaloRunV1alpha1Counter: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/metrics.halo.run/v1alpha1/counters`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatemetricsHaloRunV1alpha1Counter: async (name, counter, options = {}) => {
      assertParamExists("updatemetricsHaloRunV1alpha1Counter", "name", name);
      const localVarPath = `/apis/metrics.halo.run/v1alpha1/counters/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        counter,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const MetricsHaloRunV1alpha1CounterApiFp = function(configuration) {
  const localVarAxiosParamCreator = MetricsHaloRunV1alpha1CounterApiAxiosParamCreator(configuration);
  return {
    async createmetricsHaloRunV1alpha1Counter(counter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createmetricsHaloRunV1alpha1Counter(
        counter,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletemetricsHaloRunV1alpha1Counter(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletemetricsHaloRunV1alpha1Counter(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getmetricsHaloRunV1alpha1Counter(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getmetricsHaloRunV1alpha1Counter(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listmetricsHaloRunV1alpha1Counter(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listmetricsHaloRunV1alpha1Counter(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatemetricsHaloRunV1alpha1Counter(name, counter, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatemetricsHaloRunV1alpha1Counter(
        name,
        counter,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const MetricsHaloRunV1alpha1CounterApiFactory = function(configuration, basePath, axios) {
  const localVarFp = MetricsHaloRunV1alpha1CounterApiFp(configuration);
  return {
    createmetricsHaloRunV1alpha1Counter(requestParameters = {}, options) {
      return localVarFp.createmetricsHaloRunV1alpha1Counter(requestParameters.counter, options).then((request) => request(axios, basePath));
    },
    deletemetricsHaloRunV1alpha1Counter(requestParameters, options) {
      return localVarFp.deletemetricsHaloRunV1alpha1Counter(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    getmetricsHaloRunV1alpha1Counter(requestParameters, options) {
      return localVarFp.getmetricsHaloRunV1alpha1Counter(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    listmetricsHaloRunV1alpha1Counter(requestParameters = {}, options) {
      return localVarFp.listmetricsHaloRunV1alpha1Counter(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatemetricsHaloRunV1alpha1Counter(requestParameters, options) {
      return localVarFp.updatemetricsHaloRunV1alpha1Counter(
        requestParameters.name,
        requestParameters.counter,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class MetricsHaloRunV1alpha1CounterApi extends BaseAPI {
  createmetricsHaloRunV1alpha1Counter(requestParameters = {}, options) {
    return MetricsHaloRunV1alpha1CounterApiFp(this.configuration).createmetricsHaloRunV1alpha1Counter(requestParameters.counter, options).then((request) => request(this.axios, this.basePath));
  }
  deletemetricsHaloRunV1alpha1Counter(requestParameters, options) {
    return MetricsHaloRunV1alpha1CounterApiFp(this.configuration).deletemetricsHaloRunV1alpha1Counter(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  getmetricsHaloRunV1alpha1Counter(requestParameters, options) {
    return MetricsHaloRunV1alpha1CounterApiFp(this.configuration).getmetricsHaloRunV1alpha1Counter(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  listmetricsHaloRunV1alpha1Counter(requestParameters = {}, options) {
    return MetricsHaloRunV1alpha1CounterApiFp(this.configuration).listmetricsHaloRunV1alpha1Counter(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatemetricsHaloRunV1alpha1Counter(requestParameters, options) {
    return MetricsHaloRunV1alpha1CounterApiFp(this.configuration).updatemetricsHaloRunV1alpha1Counter(
      requestParameters.name,
      requestParameters.counter,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const MigrationHaloRunV1alpha1BackupApiAxiosParamCreator = function(configuration) {
  return {
    createmigrationHaloRunV1alpha1Backup: async (backup, options = {}) => {
      const localVarPath = `/apis/migration.halo.run/v1alpha1/backups`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        backup,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletemigrationHaloRunV1alpha1Backup: async (name, options = {}) => {
      assertParamExists("deletemigrationHaloRunV1alpha1Backup", "name", name);
      const localVarPath = `/apis/migration.halo.run/v1alpha1/backups/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getmigrationHaloRunV1alpha1Backup: async (name, options = {}) => {
      assertParamExists("getmigrationHaloRunV1alpha1Backup", "name", name);
      const localVarPath = `/apis/migration.halo.run/v1alpha1/backups/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listmigrationHaloRunV1alpha1Backup: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/migration.halo.run/v1alpha1/backups`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatemigrationHaloRunV1alpha1Backup: async (name, backup, options = {}) => {
      assertParamExists("updatemigrationHaloRunV1alpha1Backup", "name", name);
      const localVarPath = `/apis/migration.halo.run/v1alpha1/backups/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        backup,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const MigrationHaloRunV1alpha1BackupApiFp = function(configuration) {
  const localVarAxiosParamCreator = MigrationHaloRunV1alpha1BackupApiAxiosParamCreator(configuration);
  return {
    async createmigrationHaloRunV1alpha1Backup(backup, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createmigrationHaloRunV1alpha1Backup(
        backup,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletemigrationHaloRunV1alpha1Backup(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletemigrationHaloRunV1alpha1Backup(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getmigrationHaloRunV1alpha1Backup(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getmigrationHaloRunV1alpha1Backup(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listmigrationHaloRunV1alpha1Backup(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listmigrationHaloRunV1alpha1Backup(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatemigrationHaloRunV1alpha1Backup(name, backup, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatemigrationHaloRunV1alpha1Backup(
        name,
        backup,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const MigrationHaloRunV1alpha1BackupApiFactory = function(configuration, basePath, axios) {
  const localVarFp = MigrationHaloRunV1alpha1BackupApiFp(configuration);
  return {
    createmigrationHaloRunV1alpha1Backup(requestParameters = {}, options) {
      return localVarFp.createmigrationHaloRunV1alpha1Backup(requestParameters.backup, options).then((request) => request(axios, basePath));
    },
    deletemigrationHaloRunV1alpha1Backup(requestParameters, options) {
      return localVarFp.deletemigrationHaloRunV1alpha1Backup(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    getmigrationHaloRunV1alpha1Backup(requestParameters, options) {
      return localVarFp.getmigrationHaloRunV1alpha1Backup(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    listmigrationHaloRunV1alpha1Backup(requestParameters = {}, options) {
      return localVarFp.listmigrationHaloRunV1alpha1Backup(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatemigrationHaloRunV1alpha1Backup(requestParameters, options) {
      return localVarFp.updatemigrationHaloRunV1alpha1Backup(
        requestParameters.name,
        requestParameters.backup,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class MigrationHaloRunV1alpha1BackupApi extends BaseAPI {
  createmigrationHaloRunV1alpha1Backup(requestParameters = {}, options) {
    return MigrationHaloRunV1alpha1BackupApiFp(this.configuration).createmigrationHaloRunV1alpha1Backup(requestParameters.backup, options).then((request) => request(this.axios, this.basePath));
  }
  deletemigrationHaloRunV1alpha1Backup(requestParameters, options) {
    return MigrationHaloRunV1alpha1BackupApiFp(this.configuration).deletemigrationHaloRunV1alpha1Backup(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  getmigrationHaloRunV1alpha1Backup(requestParameters, options) {
    return MigrationHaloRunV1alpha1BackupApiFp(this.configuration).getmigrationHaloRunV1alpha1Backup(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  listmigrationHaloRunV1alpha1Backup(requestParameters = {}, options) {
    return MigrationHaloRunV1alpha1BackupApiFp(this.configuration).listmigrationHaloRunV1alpha1Backup(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatemigrationHaloRunV1alpha1Backup(requestParameters, options) {
    return MigrationHaloRunV1alpha1BackupApiFp(this.configuration).updatemigrationHaloRunV1alpha1Backup(
      requestParameters.name,
      requestParameters.backup,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const NotificationHaloRunV1alpha1NotificationApiAxiosParamCreator = function(configuration) {
  return {
    createnotificationHaloRunV1alpha1Notification: async (notification, options = {}) => {
      const localVarPath = `/apis/notification.halo.run/v1alpha1/notifications`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        notification,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletenotificationHaloRunV1alpha1Notification: async (name, options = {}) => {
      assertParamExists(
        "deletenotificationHaloRunV1alpha1Notification",
        "name",
        name
      );
      const localVarPath = `/apis/notification.halo.run/v1alpha1/notifications/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getnotificationHaloRunV1alpha1Notification: async (name, options = {}) => {
      assertParamExists(
        "getnotificationHaloRunV1alpha1Notification",
        "name",
        name
      );
      const localVarPath = `/apis/notification.halo.run/v1alpha1/notifications/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listnotificationHaloRunV1alpha1Notification: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/notification.halo.run/v1alpha1/notifications`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatenotificationHaloRunV1alpha1Notification: async (name, notification, options = {}) => {
      assertParamExists(
        "updatenotificationHaloRunV1alpha1Notification",
        "name",
        name
      );
      const localVarPath = `/apis/notification.halo.run/v1alpha1/notifications/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        notification,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const NotificationHaloRunV1alpha1NotificationApiFp = function(configuration) {
  const localVarAxiosParamCreator = NotificationHaloRunV1alpha1NotificationApiAxiosParamCreator(configuration);
  return {
    async createnotificationHaloRunV1alpha1Notification(notification, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createnotificationHaloRunV1alpha1Notification(
        notification,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletenotificationHaloRunV1alpha1Notification(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletenotificationHaloRunV1alpha1Notification(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getnotificationHaloRunV1alpha1Notification(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getnotificationHaloRunV1alpha1Notification(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listnotificationHaloRunV1alpha1Notification(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listnotificationHaloRunV1alpha1Notification(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatenotificationHaloRunV1alpha1Notification(name, notification, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatenotificationHaloRunV1alpha1Notification(
        name,
        notification,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const NotificationHaloRunV1alpha1NotificationApiFactory = function(configuration, basePath, axios) {
  const localVarFp = NotificationHaloRunV1alpha1NotificationApiFp(configuration);
  return {
    createnotificationHaloRunV1alpha1Notification(requestParameters = {}, options) {
      return localVarFp.createnotificationHaloRunV1alpha1Notification(
        requestParameters.notification,
        options
      ).then((request) => request(axios, basePath));
    },
    deletenotificationHaloRunV1alpha1Notification(requestParameters, options) {
      return localVarFp.deletenotificationHaloRunV1alpha1Notification(
        requestParameters.name,
        options
      ).then((request) => request(axios, basePath));
    },
    getnotificationHaloRunV1alpha1Notification(requestParameters, options) {
      return localVarFp.getnotificationHaloRunV1alpha1Notification(
        requestParameters.name,
        options
      ).then((request) => request(axios, basePath));
    },
    listnotificationHaloRunV1alpha1Notification(requestParameters = {}, options) {
      return localVarFp.listnotificationHaloRunV1alpha1Notification(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatenotificationHaloRunV1alpha1Notification(requestParameters, options) {
      return localVarFp.updatenotificationHaloRunV1alpha1Notification(
        requestParameters.name,
        requestParameters.notification,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class NotificationHaloRunV1alpha1NotificationApi extends BaseAPI {
  createnotificationHaloRunV1alpha1Notification(requestParameters = {}, options) {
    return NotificationHaloRunV1alpha1NotificationApiFp(this.configuration).createnotificationHaloRunV1alpha1Notification(
      requestParameters.notification,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  deletenotificationHaloRunV1alpha1Notification(requestParameters, options) {
    return NotificationHaloRunV1alpha1NotificationApiFp(this.configuration).deletenotificationHaloRunV1alpha1Notification(
      requestParameters.name,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  getnotificationHaloRunV1alpha1Notification(requestParameters, options) {
    return NotificationHaloRunV1alpha1NotificationApiFp(this.configuration).getnotificationHaloRunV1alpha1Notification(
      requestParameters.name,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  listnotificationHaloRunV1alpha1Notification(requestParameters = {}, options) {
    return NotificationHaloRunV1alpha1NotificationApiFp(this.configuration).listnotificationHaloRunV1alpha1Notification(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatenotificationHaloRunV1alpha1Notification(requestParameters, options) {
    return NotificationHaloRunV1alpha1NotificationApiFp(this.configuration).updatenotificationHaloRunV1alpha1Notification(
      requestParameters.name,
      requestParameters.notification,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const NotificationHaloRunV1alpha1NotificationTemplateApiAxiosParamCreator = function(configuration) {
  return {
    createnotificationHaloRunV1alpha1NotificationTemplate: async (notificationTemplate, options = {}) => {
      const localVarPath = `/apis/notification.halo.run/v1alpha1/notificationtemplates`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        notificationTemplate,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletenotificationHaloRunV1alpha1NotificationTemplate: async (name, options = {}) => {
      assertParamExists(
        "deletenotificationHaloRunV1alpha1NotificationTemplate",
        "name",
        name
      );
      const localVarPath = `/apis/notification.halo.run/v1alpha1/notificationtemplates/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getnotificationHaloRunV1alpha1NotificationTemplate: async (name, options = {}) => {
      assertParamExists(
        "getnotificationHaloRunV1alpha1NotificationTemplate",
        "name",
        name
      );
      const localVarPath = `/apis/notification.halo.run/v1alpha1/notificationtemplates/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listnotificationHaloRunV1alpha1NotificationTemplate: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/notification.halo.run/v1alpha1/notificationtemplates`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatenotificationHaloRunV1alpha1NotificationTemplate: async (name, notificationTemplate, options = {}) => {
      assertParamExists(
        "updatenotificationHaloRunV1alpha1NotificationTemplate",
        "name",
        name
      );
      const localVarPath = `/apis/notification.halo.run/v1alpha1/notificationtemplates/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        notificationTemplate,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const NotificationHaloRunV1alpha1NotificationTemplateApiFp = function(configuration) {
  const localVarAxiosParamCreator = NotificationHaloRunV1alpha1NotificationTemplateApiAxiosParamCreator(
    configuration
  );
  return {
    async createnotificationHaloRunV1alpha1NotificationTemplate(notificationTemplate, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createnotificationHaloRunV1alpha1NotificationTemplate(
        notificationTemplate,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletenotificationHaloRunV1alpha1NotificationTemplate(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletenotificationHaloRunV1alpha1NotificationTemplate(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getnotificationHaloRunV1alpha1NotificationTemplate(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getnotificationHaloRunV1alpha1NotificationTemplate(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listnotificationHaloRunV1alpha1NotificationTemplate(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listnotificationHaloRunV1alpha1NotificationTemplate(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatenotificationHaloRunV1alpha1NotificationTemplate(name, notificationTemplate, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatenotificationHaloRunV1alpha1NotificationTemplate(
        name,
        notificationTemplate,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const NotificationHaloRunV1alpha1NotificationTemplateApiFactory = function(configuration, basePath, axios) {
  const localVarFp = NotificationHaloRunV1alpha1NotificationTemplateApiFp(configuration);
  return {
    createnotificationHaloRunV1alpha1NotificationTemplate(requestParameters = {}, options) {
      return localVarFp.createnotificationHaloRunV1alpha1NotificationTemplate(
        requestParameters.notificationTemplate,
        options
      ).then((request) => request(axios, basePath));
    },
    deletenotificationHaloRunV1alpha1NotificationTemplate(requestParameters, options) {
      return localVarFp.deletenotificationHaloRunV1alpha1NotificationTemplate(
        requestParameters.name,
        options
      ).then((request) => request(axios, basePath));
    },
    getnotificationHaloRunV1alpha1NotificationTemplate(requestParameters, options) {
      return localVarFp.getnotificationHaloRunV1alpha1NotificationTemplate(
        requestParameters.name,
        options
      ).then((request) => request(axios, basePath));
    },
    listnotificationHaloRunV1alpha1NotificationTemplate(requestParameters = {}, options) {
      return localVarFp.listnotificationHaloRunV1alpha1NotificationTemplate(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatenotificationHaloRunV1alpha1NotificationTemplate(requestParameters, options) {
      return localVarFp.updatenotificationHaloRunV1alpha1NotificationTemplate(
        requestParameters.name,
        requestParameters.notificationTemplate,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class NotificationHaloRunV1alpha1NotificationTemplateApi extends BaseAPI {
  createnotificationHaloRunV1alpha1NotificationTemplate(requestParameters = {}, options) {
    return NotificationHaloRunV1alpha1NotificationTemplateApiFp(
      this.configuration
    ).createnotificationHaloRunV1alpha1NotificationTemplate(
      requestParameters.notificationTemplate,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  deletenotificationHaloRunV1alpha1NotificationTemplate(requestParameters, options) {
    return NotificationHaloRunV1alpha1NotificationTemplateApiFp(
      this.configuration
    ).deletenotificationHaloRunV1alpha1NotificationTemplate(
      requestParameters.name,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  getnotificationHaloRunV1alpha1NotificationTemplate(requestParameters, options) {
    return NotificationHaloRunV1alpha1NotificationTemplateApiFp(
      this.configuration
    ).getnotificationHaloRunV1alpha1NotificationTemplate(
      requestParameters.name,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  listnotificationHaloRunV1alpha1NotificationTemplate(requestParameters = {}, options) {
    return NotificationHaloRunV1alpha1NotificationTemplateApiFp(
      this.configuration
    ).listnotificationHaloRunV1alpha1NotificationTemplate(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatenotificationHaloRunV1alpha1NotificationTemplate(requestParameters, options) {
    return NotificationHaloRunV1alpha1NotificationTemplateApiFp(
      this.configuration
    ).updatenotificationHaloRunV1alpha1NotificationTemplate(
      requestParameters.name,
      requestParameters.notificationTemplate,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const NotificationHaloRunV1alpha1NotifierDescriptorApiAxiosParamCreator = function(configuration) {
  return {
    createnotificationHaloRunV1alpha1NotifierDescriptor: async (notifierDescriptor, options = {}) => {
      const localVarPath = `/apis/notification.halo.run/v1alpha1/notifierDescriptors`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        notifierDescriptor,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletenotificationHaloRunV1alpha1NotifierDescriptor: async (name, options = {}) => {
      assertParamExists(
        "deletenotificationHaloRunV1alpha1NotifierDescriptor",
        "name",
        name
      );
      const localVarPath = `/apis/notification.halo.run/v1alpha1/notifierDescriptors/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getnotificationHaloRunV1alpha1NotifierDescriptor: async (name, options = {}) => {
      assertParamExists(
        "getnotificationHaloRunV1alpha1NotifierDescriptor",
        "name",
        name
      );
      const localVarPath = `/apis/notification.halo.run/v1alpha1/notifierDescriptors/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listnotificationHaloRunV1alpha1NotifierDescriptor: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/notification.halo.run/v1alpha1/notifierDescriptors`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatenotificationHaloRunV1alpha1NotifierDescriptor: async (name, notifierDescriptor, options = {}) => {
      assertParamExists(
        "updatenotificationHaloRunV1alpha1NotifierDescriptor",
        "name",
        name
      );
      const localVarPath = `/apis/notification.halo.run/v1alpha1/notifierDescriptors/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        notifierDescriptor,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const NotificationHaloRunV1alpha1NotifierDescriptorApiFp = function(configuration) {
  const localVarAxiosParamCreator = NotificationHaloRunV1alpha1NotifierDescriptorApiAxiosParamCreator(
    configuration
  );
  return {
    async createnotificationHaloRunV1alpha1NotifierDescriptor(notifierDescriptor, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createnotificationHaloRunV1alpha1NotifierDescriptor(
        notifierDescriptor,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletenotificationHaloRunV1alpha1NotifierDescriptor(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletenotificationHaloRunV1alpha1NotifierDescriptor(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getnotificationHaloRunV1alpha1NotifierDescriptor(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getnotificationHaloRunV1alpha1NotifierDescriptor(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listnotificationHaloRunV1alpha1NotifierDescriptor(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listnotificationHaloRunV1alpha1NotifierDescriptor(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatenotificationHaloRunV1alpha1NotifierDescriptor(name, notifierDescriptor, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatenotificationHaloRunV1alpha1NotifierDescriptor(
        name,
        notifierDescriptor,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const NotificationHaloRunV1alpha1NotifierDescriptorApiFactory = function(configuration, basePath, axios) {
  const localVarFp = NotificationHaloRunV1alpha1NotifierDescriptorApiFp(configuration);
  return {
    createnotificationHaloRunV1alpha1NotifierDescriptor(requestParameters = {}, options) {
      return localVarFp.createnotificationHaloRunV1alpha1NotifierDescriptor(
        requestParameters.notifierDescriptor,
        options
      ).then((request) => request(axios, basePath));
    },
    deletenotificationHaloRunV1alpha1NotifierDescriptor(requestParameters, options) {
      return localVarFp.deletenotificationHaloRunV1alpha1NotifierDescriptor(
        requestParameters.name,
        options
      ).then((request) => request(axios, basePath));
    },
    getnotificationHaloRunV1alpha1NotifierDescriptor(requestParameters, options) {
      return localVarFp.getnotificationHaloRunV1alpha1NotifierDescriptor(
        requestParameters.name,
        options
      ).then((request) => request(axios, basePath));
    },
    listnotificationHaloRunV1alpha1NotifierDescriptor(requestParameters = {}, options) {
      return localVarFp.listnotificationHaloRunV1alpha1NotifierDescriptor(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatenotificationHaloRunV1alpha1NotifierDescriptor(requestParameters, options) {
      return localVarFp.updatenotificationHaloRunV1alpha1NotifierDescriptor(
        requestParameters.name,
        requestParameters.notifierDescriptor,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class NotificationHaloRunV1alpha1NotifierDescriptorApi extends BaseAPI {
  createnotificationHaloRunV1alpha1NotifierDescriptor(requestParameters = {}, options) {
    return NotificationHaloRunV1alpha1NotifierDescriptorApiFp(
      this.configuration
    ).createnotificationHaloRunV1alpha1NotifierDescriptor(
      requestParameters.notifierDescriptor,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  deletenotificationHaloRunV1alpha1NotifierDescriptor(requestParameters, options) {
    return NotificationHaloRunV1alpha1NotifierDescriptorApiFp(
      this.configuration
    ).deletenotificationHaloRunV1alpha1NotifierDescriptor(
      requestParameters.name,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  getnotificationHaloRunV1alpha1NotifierDescriptor(requestParameters, options) {
    return NotificationHaloRunV1alpha1NotifierDescriptorApiFp(
      this.configuration
    ).getnotificationHaloRunV1alpha1NotifierDescriptor(
      requestParameters.name,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  listnotificationHaloRunV1alpha1NotifierDescriptor(requestParameters = {}, options) {
    return NotificationHaloRunV1alpha1NotifierDescriptorApiFp(
      this.configuration
    ).listnotificationHaloRunV1alpha1NotifierDescriptor(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatenotificationHaloRunV1alpha1NotifierDescriptor(requestParameters, options) {
    return NotificationHaloRunV1alpha1NotifierDescriptorApiFp(
      this.configuration
    ).updatenotificationHaloRunV1alpha1NotifierDescriptor(
      requestParameters.name,
      requestParameters.notifierDescriptor,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const NotificationHaloRunV1alpha1ReasonApiAxiosParamCreator = function(configuration) {
  return {
    createnotificationHaloRunV1alpha1Reason: async (reason, options = {}) => {
      const localVarPath = `/apis/notification.halo.run/v1alpha1/reasons`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        reason,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletenotificationHaloRunV1alpha1Reason: async (name, options = {}) => {
      assertParamExists(
        "deletenotificationHaloRunV1alpha1Reason",
        "name",
        name
      );
      const localVarPath = `/apis/notification.halo.run/v1alpha1/reasons/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getnotificationHaloRunV1alpha1Reason: async (name, options = {}) => {
      assertParamExists("getnotificationHaloRunV1alpha1Reason", "name", name);
      const localVarPath = `/apis/notification.halo.run/v1alpha1/reasons/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listnotificationHaloRunV1alpha1Reason: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/notification.halo.run/v1alpha1/reasons`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatenotificationHaloRunV1alpha1Reason: async (name, reason, options = {}) => {
      assertParamExists(
        "updatenotificationHaloRunV1alpha1Reason",
        "name",
        name
      );
      const localVarPath = `/apis/notification.halo.run/v1alpha1/reasons/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        reason,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const NotificationHaloRunV1alpha1ReasonApiFp = function(configuration) {
  const localVarAxiosParamCreator = NotificationHaloRunV1alpha1ReasonApiAxiosParamCreator(configuration);
  return {
    async createnotificationHaloRunV1alpha1Reason(reason, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createnotificationHaloRunV1alpha1Reason(
        reason,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletenotificationHaloRunV1alpha1Reason(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletenotificationHaloRunV1alpha1Reason(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getnotificationHaloRunV1alpha1Reason(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getnotificationHaloRunV1alpha1Reason(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listnotificationHaloRunV1alpha1Reason(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listnotificationHaloRunV1alpha1Reason(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatenotificationHaloRunV1alpha1Reason(name, reason, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatenotificationHaloRunV1alpha1Reason(
        name,
        reason,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const NotificationHaloRunV1alpha1ReasonApiFactory = function(configuration, basePath, axios) {
  const localVarFp = NotificationHaloRunV1alpha1ReasonApiFp(configuration);
  return {
    createnotificationHaloRunV1alpha1Reason(requestParameters = {}, options) {
      return localVarFp.createnotificationHaloRunV1alpha1Reason(
        requestParameters.reason,
        options
      ).then((request) => request(axios, basePath));
    },
    deletenotificationHaloRunV1alpha1Reason(requestParameters, options) {
      return localVarFp.deletenotificationHaloRunV1alpha1Reason(
        requestParameters.name,
        options
      ).then((request) => request(axios, basePath));
    },
    getnotificationHaloRunV1alpha1Reason(requestParameters, options) {
      return localVarFp.getnotificationHaloRunV1alpha1Reason(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    listnotificationHaloRunV1alpha1Reason(requestParameters = {}, options) {
      return localVarFp.listnotificationHaloRunV1alpha1Reason(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatenotificationHaloRunV1alpha1Reason(requestParameters, options) {
      return localVarFp.updatenotificationHaloRunV1alpha1Reason(
        requestParameters.name,
        requestParameters.reason,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class NotificationHaloRunV1alpha1ReasonApi extends BaseAPI {
  createnotificationHaloRunV1alpha1Reason(requestParameters = {}, options) {
    return NotificationHaloRunV1alpha1ReasonApiFp(this.configuration).createnotificationHaloRunV1alpha1Reason(
      requestParameters.reason,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  deletenotificationHaloRunV1alpha1Reason(requestParameters, options) {
    return NotificationHaloRunV1alpha1ReasonApiFp(this.configuration).deletenotificationHaloRunV1alpha1Reason(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  getnotificationHaloRunV1alpha1Reason(requestParameters, options) {
    return NotificationHaloRunV1alpha1ReasonApiFp(this.configuration).getnotificationHaloRunV1alpha1Reason(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  listnotificationHaloRunV1alpha1Reason(requestParameters = {}, options) {
    return NotificationHaloRunV1alpha1ReasonApiFp(this.configuration).listnotificationHaloRunV1alpha1Reason(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatenotificationHaloRunV1alpha1Reason(requestParameters, options) {
    return NotificationHaloRunV1alpha1ReasonApiFp(this.configuration).updatenotificationHaloRunV1alpha1Reason(
      requestParameters.name,
      requestParameters.reason,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const NotificationHaloRunV1alpha1ReasonTypeApiAxiosParamCreator = function(configuration) {
  return {
    createnotificationHaloRunV1alpha1ReasonType: async (reasonType, options = {}) => {
      const localVarPath = `/apis/notification.halo.run/v1alpha1/reasontypes`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        reasonType,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletenotificationHaloRunV1alpha1ReasonType: async (name, options = {}) => {
      assertParamExists(
        "deletenotificationHaloRunV1alpha1ReasonType",
        "name",
        name
      );
      const localVarPath = `/apis/notification.halo.run/v1alpha1/reasontypes/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getnotificationHaloRunV1alpha1ReasonType: async (name, options = {}) => {
      assertParamExists(
        "getnotificationHaloRunV1alpha1ReasonType",
        "name",
        name
      );
      const localVarPath = `/apis/notification.halo.run/v1alpha1/reasontypes/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listnotificationHaloRunV1alpha1ReasonType: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/notification.halo.run/v1alpha1/reasontypes`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatenotificationHaloRunV1alpha1ReasonType: async (name, reasonType, options = {}) => {
      assertParamExists(
        "updatenotificationHaloRunV1alpha1ReasonType",
        "name",
        name
      );
      const localVarPath = `/apis/notification.halo.run/v1alpha1/reasontypes/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        reasonType,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const NotificationHaloRunV1alpha1ReasonTypeApiFp = function(configuration) {
  const localVarAxiosParamCreator = NotificationHaloRunV1alpha1ReasonTypeApiAxiosParamCreator(configuration);
  return {
    async createnotificationHaloRunV1alpha1ReasonType(reasonType, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createnotificationHaloRunV1alpha1ReasonType(
        reasonType,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletenotificationHaloRunV1alpha1ReasonType(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletenotificationHaloRunV1alpha1ReasonType(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getnotificationHaloRunV1alpha1ReasonType(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getnotificationHaloRunV1alpha1ReasonType(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listnotificationHaloRunV1alpha1ReasonType(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listnotificationHaloRunV1alpha1ReasonType(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatenotificationHaloRunV1alpha1ReasonType(name, reasonType, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatenotificationHaloRunV1alpha1ReasonType(
        name,
        reasonType,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const NotificationHaloRunV1alpha1ReasonTypeApiFactory = function(configuration, basePath, axios) {
  const localVarFp = NotificationHaloRunV1alpha1ReasonTypeApiFp(configuration);
  return {
    createnotificationHaloRunV1alpha1ReasonType(requestParameters = {}, options) {
      return localVarFp.createnotificationHaloRunV1alpha1ReasonType(
        requestParameters.reasonType,
        options
      ).then((request) => request(axios, basePath));
    },
    deletenotificationHaloRunV1alpha1ReasonType(requestParameters, options) {
      return localVarFp.deletenotificationHaloRunV1alpha1ReasonType(
        requestParameters.name,
        options
      ).then((request) => request(axios, basePath));
    },
    getnotificationHaloRunV1alpha1ReasonType(requestParameters, options) {
      return localVarFp.getnotificationHaloRunV1alpha1ReasonType(
        requestParameters.name,
        options
      ).then((request) => request(axios, basePath));
    },
    listnotificationHaloRunV1alpha1ReasonType(requestParameters = {}, options) {
      return localVarFp.listnotificationHaloRunV1alpha1ReasonType(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatenotificationHaloRunV1alpha1ReasonType(requestParameters, options) {
      return localVarFp.updatenotificationHaloRunV1alpha1ReasonType(
        requestParameters.name,
        requestParameters.reasonType,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class NotificationHaloRunV1alpha1ReasonTypeApi extends BaseAPI {
  createnotificationHaloRunV1alpha1ReasonType(requestParameters = {}, options) {
    return NotificationHaloRunV1alpha1ReasonTypeApiFp(this.configuration).createnotificationHaloRunV1alpha1ReasonType(
      requestParameters.reasonType,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  deletenotificationHaloRunV1alpha1ReasonType(requestParameters, options) {
    return NotificationHaloRunV1alpha1ReasonTypeApiFp(this.configuration).deletenotificationHaloRunV1alpha1ReasonType(
      requestParameters.name,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  getnotificationHaloRunV1alpha1ReasonType(requestParameters, options) {
    return NotificationHaloRunV1alpha1ReasonTypeApiFp(this.configuration).getnotificationHaloRunV1alpha1ReasonType(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  listnotificationHaloRunV1alpha1ReasonType(requestParameters = {}, options) {
    return NotificationHaloRunV1alpha1ReasonTypeApiFp(this.configuration).listnotificationHaloRunV1alpha1ReasonType(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatenotificationHaloRunV1alpha1ReasonType(requestParameters, options) {
    return NotificationHaloRunV1alpha1ReasonTypeApiFp(this.configuration).updatenotificationHaloRunV1alpha1ReasonType(
      requestParameters.name,
      requestParameters.reasonType,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const NotificationHaloRunV1alpha1SubscriptionApiAxiosParamCreator = function(configuration) {
  return {
    createnotificationHaloRunV1alpha1Subscription: async (subscription, options = {}) => {
      const localVarPath = `/apis/notification.halo.run/v1alpha1/subscriptions`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        subscription,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletenotificationHaloRunV1alpha1Subscription: async (name, options = {}) => {
      assertParamExists(
        "deletenotificationHaloRunV1alpha1Subscription",
        "name",
        name
      );
      const localVarPath = `/apis/notification.halo.run/v1alpha1/subscriptions/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getnotificationHaloRunV1alpha1Subscription: async (name, options = {}) => {
      assertParamExists(
        "getnotificationHaloRunV1alpha1Subscription",
        "name",
        name
      );
      const localVarPath = `/apis/notification.halo.run/v1alpha1/subscriptions/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listnotificationHaloRunV1alpha1Subscription: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/notification.halo.run/v1alpha1/subscriptions`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatenotificationHaloRunV1alpha1Subscription: async (name, subscription, options = {}) => {
      assertParamExists(
        "updatenotificationHaloRunV1alpha1Subscription",
        "name",
        name
      );
      const localVarPath = `/apis/notification.halo.run/v1alpha1/subscriptions/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        subscription,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const NotificationHaloRunV1alpha1SubscriptionApiFp = function(configuration) {
  const localVarAxiosParamCreator = NotificationHaloRunV1alpha1SubscriptionApiAxiosParamCreator(configuration);
  return {
    async createnotificationHaloRunV1alpha1Subscription(subscription, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createnotificationHaloRunV1alpha1Subscription(
        subscription,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletenotificationHaloRunV1alpha1Subscription(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletenotificationHaloRunV1alpha1Subscription(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getnotificationHaloRunV1alpha1Subscription(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getnotificationHaloRunV1alpha1Subscription(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listnotificationHaloRunV1alpha1Subscription(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listnotificationHaloRunV1alpha1Subscription(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatenotificationHaloRunV1alpha1Subscription(name, subscription, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatenotificationHaloRunV1alpha1Subscription(
        name,
        subscription,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const NotificationHaloRunV1alpha1SubscriptionApiFactory = function(configuration, basePath, axios) {
  const localVarFp = NotificationHaloRunV1alpha1SubscriptionApiFp(configuration);
  return {
    createnotificationHaloRunV1alpha1Subscription(requestParameters = {}, options) {
      return localVarFp.createnotificationHaloRunV1alpha1Subscription(
        requestParameters.subscription,
        options
      ).then((request) => request(axios, basePath));
    },
    deletenotificationHaloRunV1alpha1Subscription(requestParameters, options) {
      return localVarFp.deletenotificationHaloRunV1alpha1Subscription(
        requestParameters.name,
        options
      ).then((request) => request(axios, basePath));
    },
    getnotificationHaloRunV1alpha1Subscription(requestParameters, options) {
      return localVarFp.getnotificationHaloRunV1alpha1Subscription(
        requestParameters.name,
        options
      ).then((request) => request(axios, basePath));
    },
    listnotificationHaloRunV1alpha1Subscription(requestParameters = {}, options) {
      return localVarFp.listnotificationHaloRunV1alpha1Subscription(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatenotificationHaloRunV1alpha1Subscription(requestParameters, options) {
      return localVarFp.updatenotificationHaloRunV1alpha1Subscription(
        requestParameters.name,
        requestParameters.subscription,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class NotificationHaloRunV1alpha1SubscriptionApi extends BaseAPI {
  createnotificationHaloRunV1alpha1Subscription(requestParameters = {}, options) {
    return NotificationHaloRunV1alpha1SubscriptionApiFp(this.configuration).createnotificationHaloRunV1alpha1Subscription(
      requestParameters.subscription,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  deletenotificationHaloRunV1alpha1Subscription(requestParameters, options) {
    return NotificationHaloRunV1alpha1SubscriptionApiFp(this.configuration).deletenotificationHaloRunV1alpha1Subscription(
      requestParameters.name,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  getnotificationHaloRunV1alpha1Subscription(requestParameters, options) {
    return NotificationHaloRunV1alpha1SubscriptionApiFp(this.configuration).getnotificationHaloRunV1alpha1Subscription(
      requestParameters.name,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  listnotificationHaloRunV1alpha1Subscription(requestParameters = {}, options) {
    return NotificationHaloRunV1alpha1SubscriptionApiFp(this.configuration).listnotificationHaloRunV1alpha1Subscription(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatenotificationHaloRunV1alpha1Subscription(requestParameters, options) {
    return NotificationHaloRunV1alpha1SubscriptionApiFp(this.configuration).updatenotificationHaloRunV1alpha1Subscription(
      requestParameters.name,
      requestParameters.subscription,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const PluginHaloRunV1alpha1ExtensionDefinitionApiAxiosParamCreator = function(configuration) {
  return {
    createpluginHaloRunV1alpha1ExtensionDefinition: async (extensionDefinition, options = {}) => {
      const localVarPath = `/apis/plugin.halo.run/v1alpha1/extensiondefinitions`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        extensionDefinition,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletepluginHaloRunV1alpha1ExtensionDefinition: async (name, options = {}) => {
      assertParamExists(
        "deletepluginHaloRunV1alpha1ExtensionDefinition",
        "name",
        name
      );
      const localVarPath = `/apis/plugin.halo.run/v1alpha1/extensiondefinitions/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getpluginHaloRunV1alpha1ExtensionDefinition: async (name, options = {}) => {
      assertParamExists(
        "getpluginHaloRunV1alpha1ExtensionDefinition",
        "name",
        name
      );
      const localVarPath = `/apis/plugin.halo.run/v1alpha1/extensiondefinitions/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listpluginHaloRunV1alpha1ExtensionDefinition: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/plugin.halo.run/v1alpha1/extensiondefinitions`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatepluginHaloRunV1alpha1ExtensionDefinition: async (name, extensionDefinition, options = {}) => {
      assertParamExists(
        "updatepluginHaloRunV1alpha1ExtensionDefinition",
        "name",
        name
      );
      const localVarPath = `/apis/plugin.halo.run/v1alpha1/extensiondefinitions/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        extensionDefinition,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const PluginHaloRunV1alpha1ExtensionDefinitionApiFp = function(configuration) {
  const localVarAxiosParamCreator = PluginHaloRunV1alpha1ExtensionDefinitionApiAxiosParamCreator(configuration);
  return {
    async createpluginHaloRunV1alpha1ExtensionDefinition(extensionDefinition, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createpluginHaloRunV1alpha1ExtensionDefinition(
        extensionDefinition,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletepluginHaloRunV1alpha1ExtensionDefinition(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletepluginHaloRunV1alpha1ExtensionDefinition(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getpluginHaloRunV1alpha1ExtensionDefinition(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getpluginHaloRunV1alpha1ExtensionDefinition(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listpluginHaloRunV1alpha1ExtensionDefinition(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listpluginHaloRunV1alpha1ExtensionDefinition(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatepluginHaloRunV1alpha1ExtensionDefinition(name, extensionDefinition, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatepluginHaloRunV1alpha1ExtensionDefinition(
        name,
        extensionDefinition,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const PluginHaloRunV1alpha1ExtensionDefinitionApiFactory = function(configuration, basePath, axios) {
  const localVarFp = PluginHaloRunV1alpha1ExtensionDefinitionApiFp(configuration);
  return {
    createpluginHaloRunV1alpha1ExtensionDefinition(requestParameters = {}, options) {
      return localVarFp.createpluginHaloRunV1alpha1ExtensionDefinition(
        requestParameters.extensionDefinition,
        options
      ).then((request) => request(axios, basePath));
    },
    deletepluginHaloRunV1alpha1ExtensionDefinition(requestParameters, options) {
      return localVarFp.deletepluginHaloRunV1alpha1ExtensionDefinition(
        requestParameters.name,
        options
      ).then((request) => request(axios, basePath));
    },
    getpluginHaloRunV1alpha1ExtensionDefinition(requestParameters, options) {
      return localVarFp.getpluginHaloRunV1alpha1ExtensionDefinition(
        requestParameters.name,
        options
      ).then((request) => request(axios, basePath));
    },
    listpluginHaloRunV1alpha1ExtensionDefinition(requestParameters = {}, options) {
      return localVarFp.listpluginHaloRunV1alpha1ExtensionDefinition(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatepluginHaloRunV1alpha1ExtensionDefinition(requestParameters, options) {
      return localVarFp.updatepluginHaloRunV1alpha1ExtensionDefinition(
        requestParameters.name,
        requestParameters.extensionDefinition,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class PluginHaloRunV1alpha1ExtensionDefinitionApi extends BaseAPI {
  createpluginHaloRunV1alpha1ExtensionDefinition(requestParameters = {}, options) {
    return PluginHaloRunV1alpha1ExtensionDefinitionApiFp(this.configuration).createpluginHaloRunV1alpha1ExtensionDefinition(
      requestParameters.extensionDefinition,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  deletepluginHaloRunV1alpha1ExtensionDefinition(requestParameters, options) {
    return PluginHaloRunV1alpha1ExtensionDefinitionApiFp(this.configuration).deletepluginHaloRunV1alpha1ExtensionDefinition(
      requestParameters.name,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  getpluginHaloRunV1alpha1ExtensionDefinition(requestParameters, options) {
    return PluginHaloRunV1alpha1ExtensionDefinitionApiFp(this.configuration).getpluginHaloRunV1alpha1ExtensionDefinition(
      requestParameters.name,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  listpluginHaloRunV1alpha1ExtensionDefinition(requestParameters = {}, options) {
    return PluginHaloRunV1alpha1ExtensionDefinitionApiFp(this.configuration).listpluginHaloRunV1alpha1ExtensionDefinition(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatepluginHaloRunV1alpha1ExtensionDefinition(requestParameters, options) {
    return PluginHaloRunV1alpha1ExtensionDefinitionApiFp(this.configuration).updatepluginHaloRunV1alpha1ExtensionDefinition(
      requestParameters.name,
      requestParameters.extensionDefinition,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const PluginHaloRunV1alpha1ExtensionPointDefinitionApiAxiosParamCreator = function(configuration) {
  return {
    createpluginHaloRunV1alpha1ExtensionPointDefinition: async (extensionPointDefinition, options = {}) => {
      const localVarPath = `/apis/plugin.halo.run/v1alpha1/extensionpointdefinitions`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        extensionPointDefinition,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletepluginHaloRunV1alpha1ExtensionPointDefinition: async (name, options = {}) => {
      assertParamExists(
        "deletepluginHaloRunV1alpha1ExtensionPointDefinition",
        "name",
        name
      );
      const localVarPath = `/apis/plugin.halo.run/v1alpha1/extensionpointdefinitions/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getpluginHaloRunV1alpha1ExtensionPointDefinition: async (name, options = {}) => {
      assertParamExists(
        "getpluginHaloRunV1alpha1ExtensionPointDefinition",
        "name",
        name
      );
      const localVarPath = `/apis/plugin.halo.run/v1alpha1/extensionpointdefinitions/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listpluginHaloRunV1alpha1ExtensionPointDefinition: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/plugin.halo.run/v1alpha1/extensionpointdefinitions`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatepluginHaloRunV1alpha1ExtensionPointDefinition: async (name, extensionPointDefinition, options = {}) => {
      assertParamExists(
        "updatepluginHaloRunV1alpha1ExtensionPointDefinition",
        "name",
        name
      );
      const localVarPath = `/apis/plugin.halo.run/v1alpha1/extensionpointdefinitions/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        extensionPointDefinition,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const PluginHaloRunV1alpha1ExtensionPointDefinitionApiFp = function(configuration) {
  const localVarAxiosParamCreator = PluginHaloRunV1alpha1ExtensionPointDefinitionApiAxiosParamCreator(
    configuration
  );
  return {
    async createpluginHaloRunV1alpha1ExtensionPointDefinition(extensionPointDefinition, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createpluginHaloRunV1alpha1ExtensionPointDefinition(
        extensionPointDefinition,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletepluginHaloRunV1alpha1ExtensionPointDefinition(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletepluginHaloRunV1alpha1ExtensionPointDefinition(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getpluginHaloRunV1alpha1ExtensionPointDefinition(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getpluginHaloRunV1alpha1ExtensionPointDefinition(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listpluginHaloRunV1alpha1ExtensionPointDefinition(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listpluginHaloRunV1alpha1ExtensionPointDefinition(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatepluginHaloRunV1alpha1ExtensionPointDefinition(name, extensionPointDefinition, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatepluginHaloRunV1alpha1ExtensionPointDefinition(
        name,
        extensionPointDefinition,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const PluginHaloRunV1alpha1ExtensionPointDefinitionApiFactory = function(configuration, basePath, axios) {
  const localVarFp = PluginHaloRunV1alpha1ExtensionPointDefinitionApiFp(configuration);
  return {
    createpluginHaloRunV1alpha1ExtensionPointDefinition(requestParameters = {}, options) {
      return localVarFp.createpluginHaloRunV1alpha1ExtensionPointDefinition(
        requestParameters.extensionPointDefinition,
        options
      ).then((request) => request(axios, basePath));
    },
    deletepluginHaloRunV1alpha1ExtensionPointDefinition(requestParameters, options) {
      return localVarFp.deletepluginHaloRunV1alpha1ExtensionPointDefinition(
        requestParameters.name,
        options
      ).then((request) => request(axios, basePath));
    },
    getpluginHaloRunV1alpha1ExtensionPointDefinition(requestParameters, options) {
      return localVarFp.getpluginHaloRunV1alpha1ExtensionPointDefinition(
        requestParameters.name,
        options
      ).then((request) => request(axios, basePath));
    },
    listpluginHaloRunV1alpha1ExtensionPointDefinition(requestParameters = {}, options) {
      return localVarFp.listpluginHaloRunV1alpha1ExtensionPointDefinition(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatepluginHaloRunV1alpha1ExtensionPointDefinition(requestParameters, options) {
      return localVarFp.updatepluginHaloRunV1alpha1ExtensionPointDefinition(
        requestParameters.name,
        requestParameters.extensionPointDefinition,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class PluginHaloRunV1alpha1ExtensionPointDefinitionApi extends BaseAPI {
  createpluginHaloRunV1alpha1ExtensionPointDefinition(requestParameters = {}, options) {
    return PluginHaloRunV1alpha1ExtensionPointDefinitionApiFp(
      this.configuration
    ).createpluginHaloRunV1alpha1ExtensionPointDefinition(
      requestParameters.extensionPointDefinition,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  deletepluginHaloRunV1alpha1ExtensionPointDefinition(requestParameters, options) {
    return PluginHaloRunV1alpha1ExtensionPointDefinitionApiFp(
      this.configuration
    ).deletepluginHaloRunV1alpha1ExtensionPointDefinition(
      requestParameters.name,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  getpluginHaloRunV1alpha1ExtensionPointDefinition(requestParameters, options) {
    return PluginHaloRunV1alpha1ExtensionPointDefinitionApiFp(
      this.configuration
    ).getpluginHaloRunV1alpha1ExtensionPointDefinition(
      requestParameters.name,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  listpluginHaloRunV1alpha1ExtensionPointDefinition(requestParameters = {}, options) {
    return PluginHaloRunV1alpha1ExtensionPointDefinitionApiFp(
      this.configuration
    ).listpluginHaloRunV1alpha1ExtensionPointDefinition(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatepluginHaloRunV1alpha1ExtensionPointDefinition(requestParameters, options) {
    return PluginHaloRunV1alpha1ExtensionPointDefinitionApiFp(
      this.configuration
    ).updatepluginHaloRunV1alpha1ExtensionPointDefinition(
      requestParameters.name,
      requestParameters.extensionPointDefinition,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const PluginHaloRunV1alpha1PluginApiAxiosParamCreator = function(configuration) {
  return {
    createpluginHaloRunV1alpha1Plugin: async (plugin, options = {}) => {
      const localVarPath = `/apis/plugin.halo.run/v1alpha1/plugins`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        plugin,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletepluginHaloRunV1alpha1Plugin: async (name, options = {}) => {
      assertParamExists("deletepluginHaloRunV1alpha1Plugin", "name", name);
      const localVarPath = `/apis/plugin.halo.run/v1alpha1/plugins/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getpluginHaloRunV1alpha1Plugin: async (name, options = {}) => {
      assertParamExists("getpluginHaloRunV1alpha1Plugin", "name", name);
      const localVarPath = `/apis/plugin.halo.run/v1alpha1/plugins/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listpluginHaloRunV1alpha1Plugin: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/plugin.halo.run/v1alpha1/plugins`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatepluginHaloRunV1alpha1Plugin: async (name, plugin, options = {}) => {
      assertParamExists("updatepluginHaloRunV1alpha1Plugin", "name", name);
      const localVarPath = `/apis/plugin.halo.run/v1alpha1/plugins/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        plugin,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const PluginHaloRunV1alpha1PluginApiFp = function(configuration) {
  const localVarAxiosParamCreator = PluginHaloRunV1alpha1PluginApiAxiosParamCreator(configuration);
  return {
    async createpluginHaloRunV1alpha1Plugin(plugin, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createpluginHaloRunV1alpha1Plugin(
        plugin,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletepluginHaloRunV1alpha1Plugin(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletepluginHaloRunV1alpha1Plugin(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getpluginHaloRunV1alpha1Plugin(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getpluginHaloRunV1alpha1Plugin(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listpluginHaloRunV1alpha1Plugin(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listpluginHaloRunV1alpha1Plugin(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatepluginHaloRunV1alpha1Plugin(name, plugin, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatepluginHaloRunV1alpha1Plugin(
        name,
        plugin,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const PluginHaloRunV1alpha1PluginApiFactory = function(configuration, basePath, axios) {
  const localVarFp = PluginHaloRunV1alpha1PluginApiFp(configuration);
  return {
    createpluginHaloRunV1alpha1Plugin(requestParameters = {}, options) {
      return localVarFp.createpluginHaloRunV1alpha1Plugin(requestParameters.plugin, options).then((request) => request(axios, basePath));
    },
    deletepluginHaloRunV1alpha1Plugin(requestParameters, options) {
      return localVarFp.deletepluginHaloRunV1alpha1Plugin(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    getpluginHaloRunV1alpha1Plugin(requestParameters, options) {
      return localVarFp.getpluginHaloRunV1alpha1Plugin(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    listpluginHaloRunV1alpha1Plugin(requestParameters = {}, options) {
      return localVarFp.listpluginHaloRunV1alpha1Plugin(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatepluginHaloRunV1alpha1Plugin(requestParameters, options) {
      return localVarFp.updatepluginHaloRunV1alpha1Plugin(
        requestParameters.name,
        requestParameters.plugin,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class PluginHaloRunV1alpha1PluginApi extends BaseAPI {
  createpluginHaloRunV1alpha1Plugin(requestParameters = {}, options) {
    return PluginHaloRunV1alpha1PluginApiFp(this.configuration).createpluginHaloRunV1alpha1Plugin(requestParameters.plugin, options).then((request) => request(this.axios, this.basePath));
  }
  deletepluginHaloRunV1alpha1Plugin(requestParameters, options) {
    return PluginHaloRunV1alpha1PluginApiFp(this.configuration).deletepluginHaloRunV1alpha1Plugin(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  getpluginHaloRunV1alpha1Plugin(requestParameters, options) {
    return PluginHaloRunV1alpha1PluginApiFp(this.configuration).getpluginHaloRunV1alpha1Plugin(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  listpluginHaloRunV1alpha1Plugin(requestParameters = {}, options) {
    return PluginHaloRunV1alpha1PluginApiFp(this.configuration).listpluginHaloRunV1alpha1Plugin(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatepluginHaloRunV1alpha1Plugin(requestParameters, options) {
    return PluginHaloRunV1alpha1PluginApiFp(this.configuration).updatepluginHaloRunV1alpha1Plugin(
      requestParameters.name,
      requestParameters.plugin,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const PluginHaloRunV1alpha1ReverseProxyApiAxiosParamCreator = function(configuration) {
  return {
    createpluginHaloRunV1alpha1ReverseProxy: async (reverseProxy, options = {}) => {
      const localVarPath = `/apis/plugin.halo.run/v1alpha1/reverseproxies`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        reverseProxy,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletepluginHaloRunV1alpha1ReverseProxy: async (name, options = {}) => {
      assertParamExists(
        "deletepluginHaloRunV1alpha1ReverseProxy",
        "name",
        name
      );
      const localVarPath = `/apis/plugin.halo.run/v1alpha1/reverseproxies/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getpluginHaloRunV1alpha1ReverseProxy: async (name, options = {}) => {
      assertParamExists("getpluginHaloRunV1alpha1ReverseProxy", "name", name);
      const localVarPath = `/apis/plugin.halo.run/v1alpha1/reverseproxies/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listpluginHaloRunV1alpha1ReverseProxy: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/plugin.halo.run/v1alpha1/reverseproxies`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatepluginHaloRunV1alpha1ReverseProxy: async (name, reverseProxy, options = {}) => {
      assertParamExists(
        "updatepluginHaloRunV1alpha1ReverseProxy",
        "name",
        name
      );
      const localVarPath = `/apis/plugin.halo.run/v1alpha1/reverseproxies/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        reverseProxy,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const PluginHaloRunV1alpha1ReverseProxyApiFp = function(configuration) {
  const localVarAxiosParamCreator = PluginHaloRunV1alpha1ReverseProxyApiAxiosParamCreator(configuration);
  return {
    async createpluginHaloRunV1alpha1ReverseProxy(reverseProxy, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createpluginHaloRunV1alpha1ReverseProxy(
        reverseProxy,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletepluginHaloRunV1alpha1ReverseProxy(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletepluginHaloRunV1alpha1ReverseProxy(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getpluginHaloRunV1alpha1ReverseProxy(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getpluginHaloRunV1alpha1ReverseProxy(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listpluginHaloRunV1alpha1ReverseProxy(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listpluginHaloRunV1alpha1ReverseProxy(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatepluginHaloRunV1alpha1ReverseProxy(name, reverseProxy, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatepluginHaloRunV1alpha1ReverseProxy(
        name,
        reverseProxy,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const PluginHaloRunV1alpha1ReverseProxyApiFactory = function(configuration, basePath, axios) {
  const localVarFp = PluginHaloRunV1alpha1ReverseProxyApiFp(configuration);
  return {
    createpluginHaloRunV1alpha1ReverseProxy(requestParameters = {}, options) {
      return localVarFp.createpluginHaloRunV1alpha1ReverseProxy(
        requestParameters.reverseProxy,
        options
      ).then((request) => request(axios, basePath));
    },
    deletepluginHaloRunV1alpha1ReverseProxy(requestParameters, options) {
      return localVarFp.deletepluginHaloRunV1alpha1ReverseProxy(
        requestParameters.name,
        options
      ).then((request) => request(axios, basePath));
    },
    getpluginHaloRunV1alpha1ReverseProxy(requestParameters, options) {
      return localVarFp.getpluginHaloRunV1alpha1ReverseProxy(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    listpluginHaloRunV1alpha1ReverseProxy(requestParameters = {}, options) {
      return localVarFp.listpluginHaloRunV1alpha1ReverseProxy(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatepluginHaloRunV1alpha1ReverseProxy(requestParameters, options) {
      return localVarFp.updatepluginHaloRunV1alpha1ReverseProxy(
        requestParameters.name,
        requestParameters.reverseProxy,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class PluginHaloRunV1alpha1ReverseProxyApi extends BaseAPI {
  createpluginHaloRunV1alpha1ReverseProxy(requestParameters = {}, options) {
    return PluginHaloRunV1alpha1ReverseProxyApiFp(this.configuration).createpluginHaloRunV1alpha1ReverseProxy(
      requestParameters.reverseProxy,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  deletepluginHaloRunV1alpha1ReverseProxy(requestParameters, options) {
    return PluginHaloRunV1alpha1ReverseProxyApiFp(this.configuration).deletepluginHaloRunV1alpha1ReverseProxy(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  getpluginHaloRunV1alpha1ReverseProxy(requestParameters, options) {
    return PluginHaloRunV1alpha1ReverseProxyApiFp(this.configuration).getpluginHaloRunV1alpha1ReverseProxy(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  listpluginHaloRunV1alpha1ReverseProxy(requestParameters = {}, options) {
    return PluginHaloRunV1alpha1ReverseProxyApiFp(this.configuration).listpluginHaloRunV1alpha1ReverseProxy(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatepluginHaloRunV1alpha1ReverseProxy(requestParameters, options) {
    return PluginHaloRunV1alpha1ReverseProxyApiFp(this.configuration).updatepluginHaloRunV1alpha1ReverseProxy(
      requestParameters.name,
      requestParameters.reverseProxy,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const PluginHaloRunV1alpha1SearchEngineApiAxiosParamCreator = function(configuration) {
  return {
    createpluginHaloRunV1alpha1SearchEngine: async (searchEngine, options = {}) => {
      const localVarPath = `/apis/plugin.halo.run/v1alpha1/searchengines`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        searchEngine,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletepluginHaloRunV1alpha1SearchEngine: async (name, options = {}) => {
      assertParamExists(
        "deletepluginHaloRunV1alpha1SearchEngine",
        "name",
        name
      );
      const localVarPath = `/apis/plugin.halo.run/v1alpha1/searchengines/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getpluginHaloRunV1alpha1SearchEngine: async (name, options = {}) => {
      assertParamExists("getpluginHaloRunV1alpha1SearchEngine", "name", name);
      const localVarPath = `/apis/plugin.halo.run/v1alpha1/searchengines/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listpluginHaloRunV1alpha1SearchEngine: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/plugin.halo.run/v1alpha1/searchengines`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatepluginHaloRunV1alpha1SearchEngine: async (name, searchEngine, options = {}) => {
      assertParamExists(
        "updatepluginHaloRunV1alpha1SearchEngine",
        "name",
        name
      );
      const localVarPath = `/apis/plugin.halo.run/v1alpha1/searchengines/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        searchEngine,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const PluginHaloRunV1alpha1SearchEngineApiFp = function(configuration) {
  const localVarAxiosParamCreator = PluginHaloRunV1alpha1SearchEngineApiAxiosParamCreator(configuration);
  return {
    async createpluginHaloRunV1alpha1SearchEngine(searchEngine, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createpluginHaloRunV1alpha1SearchEngine(
        searchEngine,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletepluginHaloRunV1alpha1SearchEngine(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletepluginHaloRunV1alpha1SearchEngine(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getpluginHaloRunV1alpha1SearchEngine(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getpluginHaloRunV1alpha1SearchEngine(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listpluginHaloRunV1alpha1SearchEngine(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listpluginHaloRunV1alpha1SearchEngine(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatepluginHaloRunV1alpha1SearchEngine(name, searchEngine, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatepluginHaloRunV1alpha1SearchEngine(
        name,
        searchEngine,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const PluginHaloRunV1alpha1SearchEngineApiFactory = function(configuration, basePath, axios) {
  const localVarFp = PluginHaloRunV1alpha1SearchEngineApiFp(configuration);
  return {
    createpluginHaloRunV1alpha1SearchEngine(requestParameters = {}, options) {
      return localVarFp.createpluginHaloRunV1alpha1SearchEngine(
        requestParameters.searchEngine,
        options
      ).then((request) => request(axios, basePath));
    },
    deletepluginHaloRunV1alpha1SearchEngine(requestParameters, options) {
      return localVarFp.deletepluginHaloRunV1alpha1SearchEngine(
        requestParameters.name,
        options
      ).then((request) => request(axios, basePath));
    },
    getpluginHaloRunV1alpha1SearchEngine(requestParameters, options) {
      return localVarFp.getpluginHaloRunV1alpha1SearchEngine(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    listpluginHaloRunV1alpha1SearchEngine(requestParameters = {}, options) {
      return localVarFp.listpluginHaloRunV1alpha1SearchEngine(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatepluginHaloRunV1alpha1SearchEngine(requestParameters, options) {
      return localVarFp.updatepluginHaloRunV1alpha1SearchEngine(
        requestParameters.name,
        requestParameters.searchEngine,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class PluginHaloRunV1alpha1SearchEngineApi extends BaseAPI {
  createpluginHaloRunV1alpha1SearchEngine(requestParameters = {}, options) {
    return PluginHaloRunV1alpha1SearchEngineApiFp(this.configuration).createpluginHaloRunV1alpha1SearchEngine(
      requestParameters.searchEngine,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  deletepluginHaloRunV1alpha1SearchEngine(requestParameters, options) {
    return PluginHaloRunV1alpha1SearchEngineApiFp(this.configuration).deletepluginHaloRunV1alpha1SearchEngine(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  getpluginHaloRunV1alpha1SearchEngine(requestParameters, options) {
    return PluginHaloRunV1alpha1SearchEngineApiFp(this.configuration).getpluginHaloRunV1alpha1SearchEngine(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  listpluginHaloRunV1alpha1SearchEngine(requestParameters = {}, options) {
    return PluginHaloRunV1alpha1SearchEngineApiFp(this.configuration).listpluginHaloRunV1alpha1SearchEngine(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatepluginHaloRunV1alpha1SearchEngine(requestParameters, options) {
    return PluginHaloRunV1alpha1SearchEngineApiFp(this.configuration).updatepluginHaloRunV1alpha1SearchEngine(
      requestParameters.name,
      requestParameters.searchEngine,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const SecurityHaloRunV1alpha1PersonalAccessTokenApiAxiosParamCreator = function(configuration) {
  return {
    createsecurityHaloRunV1alpha1PersonalAccessToken: async (personalAccessToken, options = {}) => {
      const localVarPath = `/apis/security.halo.run/v1alpha1/personalaccesstokens`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        personalAccessToken,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletesecurityHaloRunV1alpha1PersonalAccessToken: async (name, options = {}) => {
      assertParamExists(
        "deletesecurityHaloRunV1alpha1PersonalAccessToken",
        "name",
        name
      );
      const localVarPath = `/apis/security.halo.run/v1alpha1/personalaccesstokens/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getsecurityHaloRunV1alpha1PersonalAccessToken: async (name, options = {}) => {
      assertParamExists(
        "getsecurityHaloRunV1alpha1PersonalAccessToken",
        "name",
        name
      );
      const localVarPath = `/apis/security.halo.run/v1alpha1/personalaccesstokens/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listsecurityHaloRunV1alpha1PersonalAccessToken: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/security.halo.run/v1alpha1/personalaccesstokens`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatesecurityHaloRunV1alpha1PersonalAccessToken: async (name, personalAccessToken, options = {}) => {
      assertParamExists(
        "updatesecurityHaloRunV1alpha1PersonalAccessToken",
        "name",
        name
      );
      const localVarPath = `/apis/security.halo.run/v1alpha1/personalaccesstokens/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        personalAccessToken,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const SecurityHaloRunV1alpha1PersonalAccessTokenApiFp = function(configuration) {
  const localVarAxiosParamCreator = SecurityHaloRunV1alpha1PersonalAccessTokenApiAxiosParamCreator(
    configuration
  );
  return {
    async createsecurityHaloRunV1alpha1PersonalAccessToken(personalAccessToken, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createsecurityHaloRunV1alpha1PersonalAccessToken(
        personalAccessToken,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletesecurityHaloRunV1alpha1PersonalAccessToken(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletesecurityHaloRunV1alpha1PersonalAccessToken(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getsecurityHaloRunV1alpha1PersonalAccessToken(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getsecurityHaloRunV1alpha1PersonalAccessToken(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listsecurityHaloRunV1alpha1PersonalAccessToken(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listsecurityHaloRunV1alpha1PersonalAccessToken(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatesecurityHaloRunV1alpha1PersonalAccessToken(name, personalAccessToken, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatesecurityHaloRunV1alpha1PersonalAccessToken(
        name,
        personalAccessToken,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const SecurityHaloRunV1alpha1PersonalAccessTokenApiFactory = function(configuration, basePath, axios) {
  const localVarFp = SecurityHaloRunV1alpha1PersonalAccessTokenApiFp(configuration);
  return {
    createsecurityHaloRunV1alpha1PersonalAccessToken(requestParameters = {}, options) {
      return localVarFp.createsecurityHaloRunV1alpha1PersonalAccessToken(
        requestParameters.personalAccessToken,
        options
      ).then((request) => request(axios, basePath));
    },
    deletesecurityHaloRunV1alpha1PersonalAccessToken(requestParameters, options) {
      return localVarFp.deletesecurityHaloRunV1alpha1PersonalAccessToken(
        requestParameters.name,
        options
      ).then((request) => request(axios, basePath));
    },
    getsecurityHaloRunV1alpha1PersonalAccessToken(requestParameters, options) {
      return localVarFp.getsecurityHaloRunV1alpha1PersonalAccessToken(
        requestParameters.name,
        options
      ).then((request) => request(axios, basePath));
    },
    listsecurityHaloRunV1alpha1PersonalAccessToken(requestParameters = {}, options) {
      return localVarFp.listsecurityHaloRunV1alpha1PersonalAccessToken(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatesecurityHaloRunV1alpha1PersonalAccessToken(requestParameters, options) {
      return localVarFp.updatesecurityHaloRunV1alpha1PersonalAccessToken(
        requestParameters.name,
        requestParameters.personalAccessToken,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class SecurityHaloRunV1alpha1PersonalAccessTokenApi extends BaseAPI {
  createsecurityHaloRunV1alpha1PersonalAccessToken(requestParameters = {}, options) {
    return SecurityHaloRunV1alpha1PersonalAccessTokenApiFp(this.configuration).createsecurityHaloRunV1alpha1PersonalAccessToken(
      requestParameters.personalAccessToken,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  deletesecurityHaloRunV1alpha1PersonalAccessToken(requestParameters, options) {
    return SecurityHaloRunV1alpha1PersonalAccessTokenApiFp(this.configuration).deletesecurityHaloRunV1alpha1PersonalAccessToken(
      requestParameters.name,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  getsecurityHaloRunV1alpha1PersonalAccessToken(requestParameters, options) {
    return SecurityHaloRunV1alpha1PersonalAccessTokenApiFp(this.configuration).getsecurityHaloRunV1alpha1PersonalAccessToken(
      requestParameters.name,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  listsecurityHaloRunV1alpha1PersonalAccessToken(requestParameters = {}, options) {
    return SecurityHaloRunV1alpha1PersonalAccessTokenApiFp(this.configuration).listsecurityHaloRunV1alpha1PersonalAccessToken(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatesecurityHaloRunV1alpha1PersonalAccessToken(requestParameters, options) {
    return SecurityHaloRunV1alpha1PersonalAccessTokenApiFp(this.configuration).updatesecurityHaloRunV1alpha1PersonalAccessToken(
      requestParameters.name,
      requestParameters.personalAccessToken,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const StorageHaloRunV1alpha1AttachmentApiAxiosParamCreator = function(configuration) {
  return {
    createstorageHaloRunV1alpha1Attachment: async (attachment, options = {}) => {
      const localVarPath = `/apis/storage.halo.run/v1alpha1/attachments`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        attachment,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletestorageHaloRunV1alpha1Attachment: async (name, options = {}) => {
      assertParamExists("deletestorageHaloRunV1alpha1Attachment", "name", name);
      const localVarPath = `/apis/storage.halo.run/v1alpha1/attachments/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getstorageHaloRunV1alpha1Attachment: async (name, options = {}) => {
      assertParamExists("getstorageHaloRunV1alpha1Attachment", "name", name);
      const localVarPath = `/apis/storage.halo.run/v1alpha1/attachments/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    liststorageHaloRunV1alpha1Attachment: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/storage.halo.run/v1alpha1/attachments`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatestorageHaloRunV1alpha1Attachment: async (name, attachment, options = {}) => {
      assertParamExists("updatestorageHaloRunV1alpha1Attachment", "name", name);
      const localVarPath = `/apis/storage.halo.run/v1alpha1/attachments/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        attachment,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const StorageHaloRunV1alpha1AttachmentApiFp = function(configuration) {
  const localVarAxiosParamCreator = StorageHaloRunV1alpha1AttachmentApiAxiosParamCreator(configuration);
  return {
    async createstorageHaloRunV1alpha1Attachment(attachment, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createstorageHaloRunV1alpha1Attachment(
        attachment,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletestorageHaloRunV1alpha1Attachment(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletestorageHaloRunV1alpha1Attachment(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getstorageHaloRunV1alpha1Attachment(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getstorageHaloRunV1alpha1Attachment(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async liststorageHaloRunV1alpha1Attachment(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.liststorageHaloRunV1alpha1Attachment(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatestorageHaloRunV1alpha1Attachment(name, attachment, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatestorageHaloRunV1alpha1Attachment(
        name,
        attachment,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const StorageHaloRunV1alpha1AttachmentApiFactory = function(configuration, basePath, axios) {
  const localVarFp = StorageHaloRunV1alpha1AttachmentApiFp(configuration);
  return {
    createstorageHaloRunV1alpha1Attachment(requestParameters = {}, options) {
      return localVarFp.createstorageHaloRunV1alpha1Attachment(
        requestParameters.attachment,
        options
      ).then((request) => request(axios, basePath));
    },
    deletestorageHaloRunV1alpha1Attachment(requestParameters, options) {
      return localVarFp.deletestorageHaloRunV1alpha1Attachment(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    getstorageHaloRunV1alpha1Attachment(requestParameters, options) {
      return localVarFp.getstorageHaloRunV1alpha1Attachment(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    liststorageHaloRunV1alpha1Attachment(requestParameters = {}, options) {
      return localVarFp.liststorageHaloRunV1alpha1Attachment(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatestorageHaloRunV1alpha1Attachment(requestParameters, options) {
      return localVarFp.updatestorageHaloRunV1alpha1Attachment(
        requestParameters.name,
        requestParameters.attachment,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class StorageHaloRunV1alpha1AttachmentApi extends BaseAPI {
  createstorageHaloRunV1alpha1Attachment(requestParameters = {}, options) {
    return StorageHaloRunV1alpha1AttachmentApiFp(this.configuration).createstorageHaloRunV1alpha1Attachment(
      requestParameters.attachment,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  deletestorageHaloRunV1alpha1Attachment(requestParameters, options) {
    return StorageHaloRunV1alpha1AttachmentApiFp(this.configuration).deletestorageHaloRunV1alpha1Attachment(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  getstorageHaloRunV1alpha1Attachment(requestParameters, options) {
    return StorageHaloRunV1alpha1AttachmentApiFp(this.configuration).getstorageHaloRunV1alpha1Attachment(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  liststorageHaloRunV1alpha1Attachment(requestParameters = {}, options) {
    return StorageHaloRunV1alpha1AttachmentApiFp(this.configuration).liststorageHaloRunV1alpha1Attachment(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatestorageHaloRunV1alpha1Attachment(requestParameters, options) {
    return StorageHaloRunV1alpha1AttachmentApiFp(this.configuration).updatestorageHaloRunV1alpha1Attachment(
      requestParameters.name,
      requestParameters.attachment,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const StorageHaloRunV1alpha1GroupApiAxiosParamCreator = function(configuration) {
  return {
    createstorageHaloRunV1alpha1Group: async (group, options = {}) => {
      const localVarPath = `/apis/storage.halo.run/v1alpha1/groups`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        group,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletestorageHaloRunV1alpha1Group: async (name, options = {}) => {
      assertParamExists("deletestorageHaloRunV1alpha1Group", "name", name);
      const localVarPath = `/apis/storage.halo.run/v1alpha1/groups/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getstorageHaloRunV1alpha1Group: async (name, options = {}) => {
      assertParamExists("getstorageHaloRunV1alpha1Group", "name", name);
      const localVarPath = `/apis/storage.halo.run/v1alpha1/groups/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    liststorageHaloRunV1alpha1Group: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/storage.halo.run/v1alpha1/groups`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatestorageHaloRunV1alpha1Group: async (name, group, options = {}) => {
      assertParamExists("updatestorageHaloRunV1alpha1Group", "name", name);
      const localVarPath = `/apis/storage.halo.run/v1alpha1/groups/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        group,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const StorageHaloRunV1alpha1GroupApiFp = function(configuration) {
  const localVarAxiosParamCreator = StorageHaloRunV1alpha1GroupApiAxiosParamCreator(configuration);
  return {
    async createstorageHaloRunV1alpha1Group(group, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createstorageHaloRunV1alpha1Group(
        group,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletestorageHaloRunV1alpha1Group(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletestorageHaloRunV1alpha1Group(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getstorageHaloRunV1alpha1Group(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getstorageHaloRunV1alpha1Group(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async liststorageHaloRunV1alpha1Group(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.liststorageHaloRunV1alpha1Group(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatestorageHaloRunV1alpha1Group(name, group, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatestorageHaloRunV1alpha1Group(
        name,
        group,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const StorageHaloRunV1alpha1GroupApiFactory = function(configuration, basePath, axios) {
  const localVarFp = StorageHaloRunV1alpha1GroupApiFp(configuration);
  return {
    createstorageHaloRunV1alpha1Group(requestParameters = {}, options) {
      return localVarFp.createstorageHaloRunV1alpha1Group(requestParameters.group, options).then((request) => request(axios, basePath));
    },
    deletestorageHaloRunV1alpha1Group(requestParameters, options) {
      return localVarFp.deletestorageHaloRunV1alpha1Group(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    getstorageHaloRunV1alpha1Group(requestParameters, options) {
      return localVarFp.getstorageHaloRunV1alpha1Group(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    liststorageHaloRunV1alpha1Group(requestParameters = {}, options) {
      return localVarFp.liststorageHaloRunV1alpha1Group(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatestorageHaloRunV1alpha1Group(requestParameters, options) {
      return localVarFp.updatestorageHaloRunV1alpha1Group(
        requestParameters.name,
        requestParameters.group,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class StorageHaloRunV1alpha1GroupApi extends BaseAPI {
  createstorageHaloRunV1alpha1Group(requestParameters = {}, options) {
    return StorageHaloRunV1alpha1GroupApiFp(this.configuration).createstorageHaloRunV1alpha1Group(requestParameters.group, options).then((request) => request(this.axios, this.basePath));
  }
  deletestorageHaloRunV1alpha1Group(requestParameters, options) {
    return StorageHaloRunV1alpha1GroupApiFp(this.configuration).deletestorageHaloRunV1alpha1Group(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  getstorageHaloRunV1alpha1Group(requestParameters, options) {
    return StorageHaloRunV1alpha1GroupApiFp(this.configuration).getstorageHaloRunV1alpha1Group(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  liststorageHaloRunV1alpha1Group(requestParameters = {}, options) {
    return StorageHaloRunV1alpha1GroupApiFp(this.configuration).liststorageHaloRunV1alpha1Group(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatestorageHaloRunV1alpha1Group(requestParameters, options) {
    return StorageHaloRunV1alpha1GroupApiFp(this.configuration).updatestorageHaloRunV1alpha1Group(
      requestParameters.name,
      requestParameters.group,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const StorageHaloRunV1alpha1PolicyApiAxiosParamCreator = function(configuration) {
  return {
    createstorageHaloRunV1alpha1Policy: async (policy, options = {}) => {
      const localVarPath = `/apis/storage.halo.run/v1alpha1/policies`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        policy,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletestorageHaloRunV1alpha1Policy: async (name, options = {}) => {
      assertParamExists("deletestorageHaloRunV1alpha1Policy", "name", name);
      const localVarPath = `/apis/storage.halo.run/v1alpha1/policies/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getstorageHaloRunV1alpha1Policy: async (name, options = {}) => {
      assertParamExists("getstorageHaloRunV1alpha1Policy", "name", name);
      const localVarPath = `/apis/storage.halo.run/v1alpha1/policies/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    liststorageHaloRunV1alpha1Policy: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/storage.halo.run/v1alpha1/policies`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatestorageHaloRunV1alpha1Policy: async (name, policy, options = {}) => {
      assertParamExists("updatestorageHaloRunV1alpha1Policy", "name", name);
      const localVarPath = `/apis/storage.halo.run/v1alpha1/policies/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        policy,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const StorageHaloRunV1alpha1PolicyApiFp = function(configuration) {
  const localVarAxiosParamCreator = StorageHaloRunV1alpha1PolicyApiAxiosParamCreator(configuration);
  return {
    async createstorageHaloRunV1alpha1Policy(policy, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createstorageHaloRunV1alpha1Policy(
        policy,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletestorageHaloRunV1alpha1Policy(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletestorageHaloRunV1alpha1Policy(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getstorageHaloRunV1alpha1Policy(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getstorageHaloRunV1alpha1Policy(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async liststorageHaloRunV1alpha1Policy(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.liststorageHaloRunV1alpha1Policy(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatestorageHaloRunV1alpha1Policy(name, policy, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatestorageHaloRunV1alpha1Policy(
        name,
        policy,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const StorageHaloRunV1alpha1PolicyApiFactory = function(configuration, basePath, axios) {
  const localVarFp = StorageHaloRunV1alpha1PolicyApiFp(configuration);
  return {
    createstorageHaloRunV1alpha1Policy(requestParameters = {}, options) {
      return localVarFp.createstorageHaloRunV1alpha1Policy(requestParameters.policy, options).then((request) => request(axios, basePath));
    },
    deletestorageHaloRunV1alpha1Policy(requestParameters, options) {
      return localVarFp.deletestorageHaloRunV1alpha1Policy(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    getstorageHaloRunV1alpha1Policy(requestParameters, options) {
      return localVarFp.getstorageHaloRunV1alpha1Policy(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    liststorageHaloRunV1alpha1Policy(requestParameters = {}, options) {
      return localVarFp.liststorageHaloRunV1alpha1Policy(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatestorageHaloRunV1alpha1Policy(requestParameters, options) {
      return localVarFp.updatestorageHaloRunV1alpha1Policy(
        requestParameters.name,
        requestParameters.policy,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class StorageHaloRunV1alpha1PolicyApi extends BaseAPI {
  createstorageHaloRunV1alpha1Policy(requestParameters = {}, options) {
    return StorageHaloRunV1alpha1PolicyApiFp(this.configuration).createstorageHaloRunV1alpha1Policy(requestParameters.policy, options).then((request) => request(this.axios, this.basePath));
  }
  deletestorageHaloRunV1alpha1Policy(requestParameters, options) {
    return StorageHaloRunV1alpha1PolicyApiFp(this.configuration).deletestorageHaloRunV1alpha1Policy(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  getstorageHaloRunV1alpha1Policy(requestParameters, options) {
    return StorageHaloRunV1alpha1PolicyApiFp(this.configuration).getstorageHaloRunV1alpha1Policy(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  liststorageHaloRunV1alpha1Policy(requestParameters = {}, options) {
    return StorageHaloRunV1alpha1PolicyApiFp(this.configuration).liststorageHaloRunV1alpha1Policy(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatestorageHaloRunV1alpha1Policy(requestParameters, options) {
    return StorageHaloRunV1alpha1PolicyApiFp(this.configuration).updatestorageHaloRunV1alpha1Policy(
      requestParameters.name,
      requestParameters.policy,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const StorageHaloRunV1alpha1PolicyTemplateApiAxiosParamCreator = function(configuration) {
  return {
    createstorageHaloRunV1alpha1PolicyTemplate: async (policyTemplate, options = {}) => {
      const localVarPath = `/apis/storage.halo.run/v1alpha1/policytemplates`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        policyTemplate,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletestorageHaloRunV1alpha1PolicyTemplate: async (name, options = {}) => {
      assertParamExists(
        "deletestorageHaloRunV1alpha1PolicyTemplate",
        "name",
        name
      );
      const localVarPath = `/apis/storage.halo.run/v1alpha1/policytemplates/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getstorageHaloRunV1alpha1PolicyTemplate: async (name, options = {}) => {
      assertParamExists(
        "getstorageHaloRunV1alpha1PolicyTemplate",
        "name",
        name
      );
      const localVarPath = `/apis/storage.halo.run/v1alpha1/policytemplates/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    liststorageHaloRunV1alpha1PolicyTemplate: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/storage.halo.run/v1alpha1/policytemplates`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatestorageHaloRunV1alpha1PolicyTemplate: async (name, policyTemplate, options = {}) => {
      assertParamExists(
        "updatestorageHaloRunV1alpha1PolicyTemplate",
        "name",
        name
      );
      const localVarPath = `/apis/storage.halo.run/v1alpha1/policytemplates/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        policyTemplate,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const StorageHaloRunV1alpha1PolicyTemplateApiFp = function(configuration) {
  const localVarAxiosParamCreator = StorageHaloRunV1alpha1PolicyTemplateApiAxiosParamCreator(configuration);
  return {
    async createstorageHaloRunV1alpha1PolicyTemplate(policyTemplate, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createstorageHaloRunV1alpha1PolicyTemplate(
        policyTemplate,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletestorageHaloRunV1alpha1PolicyTemplate(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletestorageHaloRunV1alpha1PolicyTemplate(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getstorageHaloRunV1alpha1PolicyTemplate(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getstorageHaloRunV1alpha1PolicyTemplate(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async liststorageHaloRunV1alpha1PolicyTemplate(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.liststorageHaloRunV1alpha1PolicyTemplate(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatestorageHaloRunV1alpha1PolicyTemplate(name, policyTemplate, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatestorageHaloRunV1alpha1PolicyTemplate(
        name,
        policyTemplate,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const StorageHaloRunV1alpha1PolicyTemplateApiFactory = function(configuration, basePath, axios) {
  const localVarFp = StorageHaloRunV1alpha1PolicyTemplateApiFp(configuration);
  return {
    createstorageHaloRunV1alpha1PolicyTemplate(requestParameters = {}, options) {
      return localVarFp.createstorageHaloRunV1alpha1PolicyTemplate(
        requestParameters.policyTemplate,
        options
      ).then((request) => request(axios, basePath));
    },
    deletestorageHaloRunV1alpha1PolicyTemplate(requestParameters, options) {
      return localVarFp.deletestorageHaloRunV1alpha1PolicyTemplate(
        requestParameters.name,
        options
      ).then((request) => request(axios, basePath));
    },
    getstorageHaloRunV1alpha1PolicyTemplate(requestParameters, options) {
      return localVarFp.getstorageHaloRunV1alpha1PolicyTemplate(
        requestParameters.name,
        options
      ).then((request) => request(axios, basePath));
    },
    liststorageHaloRunV1alpha1PolicyTemplate(requestParameters = {}, options) {
      return localVarFp.liststorageHaloRunV1alpha1PolicyTemplate(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatestorageHaloRunV1alpha1PolicyTemplate(requestParameters, options) {
      return localVarFp.updatestorageHaloRunV1alpha1PolicyTemplate(
        requestParameters.name,
        requestParameters.policyTemplate,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class StorageHaloRunV1alpha1PolicyTemplateApi extends BaseAPI {
  createstorageHaloRunV1alpha1PolicyTemplate(requestParameters = {}, options) {
    return StorageHaloRunV1alpha1PolicyTemplateApiFp(this.configuration).createstorageHaloRunV1alpha1PolicyTemplate(
      requestParameters.policyTemplate,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  deletestorageHaloRunV1alpha1PolicyTemplate(requestParameters, options) {
    return StorageHaloRunV1alpha1PolicyTemplateApiFp(this.configuration).deletestorageHaloRunV1alpha1PolicyTemplate(
      requestParameters.name,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  getstorageHaloRunV1alpha1PolicyTemplate(requestParameters, options) {
    return StorageHaloRunV1alpha1PolicyTemplateApiFp(this.configuration).getstorageHaloRunV1alpha1PolicyTemplate(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  liststorageHaloRunV1alpha1PolicyTemplate(requestParameters = {}, options) {
    return StorageHaloRunV1alpha1PolicyTemplateApiFp(this.configuration).liststorageHaloRunV1alpha1PolicyTemplate(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatestorageHaloRunV1alpha1PolicyTemplate(requestParameters, options) {
    return StorageHaloRunV1alpha1PolicyTemplateApiFp(this.configuration).updatestorageHaloRunV1alpha1PolicyTemplate(
      requestParameters.name,
      requestParameters.policyTemplate,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const ThemeHaloRunV1alpha1ThemeApiAxiosParamCreator = function(configuration) {
  return {
    createthemeHaloRunV1alpha1Theme: async (theme, options = {}) => {
      const localVarPath = `/apis/theme.halo.run/v1alpha1/themes`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        theme,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletethemeHaloRunV1alpha1Theme: async (name, options = {}) => {
      assertParamExists("deletethemeHaloRunV1alpha1Theme", "name", name);
      const localVarPath = `/apis/theme.halo.run/v1alpha1/themes/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getthemeHaloRunV1alpha1Theme: async (name, options = {}) => {
      assertParamExists("getthemeHaloRunV1alpha1Theme", "name", name);
      const localVarPath = `/apis/theme.halo.run/v1alpha1/themes/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listthemeHaloRunV1alpha1Theme: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/apis/theme.halo.run/v1alpha1/themes`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatethemeHaloRunV1alpha1Theme: async (name, theme, options = {}) => {
      assertParamExists("updatethemeHaloRunV1alpha1Theme", "name", name);
      const localVarPath = `/apis/theme.halo.run/v1alpha1/themes/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        theme,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const ThemeHaloRunV1alpha1ThemeApiFp = function(configuration) {
  const localVarAxiosParamCreator = ThemeHaloRunV1alpha1ThemeApiAxiosParamCreator(configuration);
  return {
    async createthemeHaloRunV1alpha1Theme(theme, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createthemeHaloRunV1alpha1Theme(
        theme,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletethemeHaloRunV1alpha1Theme(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletethemeHaloRunV1alpha1Theme(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getthemeHaloRunV1alpha1Theme(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getthemeHaloRunV1alpha1Theme(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listthemeHaloRunV1alpha1Theme(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listthemeHaloRunV1alpha1Theme(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatethemeHaloRunV1alpha1Theme(name, theme, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatethemeHaloRunV1alpha1Theme(
        name,
        theme,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const ThemeHaloRunV1alpha1ThemeApiFactory = function(configuration, basePath, axios) {
  const localVarFp = ThemeHaloRunV1alpha1ThemeApiFp(configuration);
  return {
    createthemeHaloRunV1alpha1Theme(requestParameters = {}, options) {
      return localVarFp.createthemeHaloRunV1alpha1Theme(requestParameters.theme, options).then((request) => request(axios, basePath));
    },
    deletethemeHaloRunV1alpha1Theme(requestParameters, options) {
      return localVarFp.deletethemeHaloRunV1alpha1Theme(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    getthemeHaloRunV1alpha1Theme(requestParameters, options) {
      return localVarFp.getthemeHaloRunV1alpha1Theme(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    listthemeHaloRunV1alpha1Theme(requestParameters = {}, options) {
      return localVarFp.listthemeHaloRunV1alpha1Theme(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatethemeHaloRunV1alpha1Theme(requestParameters, options) {
      return localVarFp.updatethemeHaloRunV1alpha1Theme(
        requestParameters.name,
        requestParameters.theme,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class ThemeHaloRunV1alpha1ThemeApi extends BaseAPI {
  createthemeHaloRunV1alpha1Theme(requestParameters = {}, options) {
    return ThemeHaloRunV1alpha1ThemeApiFp(this.configuration).createthemeHaloRunV1alpha1Theme(requestParameters.theme, options).then((request) => request(this.axios, this.basePath));
  }
  deletethemeHaloRunV1alpha1Theme(requestParameters, options) {
    return ThemeHaloRunV1alpha1ThemeApiFp(this.configuration).deletethemeHaloRunV1alpha1Theme(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  getthemeHaloRunV1alpha1Theme(requestParameters, options) {
    return ThemeHaloRunV1alpha1ThemeApiFp(this.configuration).getthemeHaloRunV1alpha1Theme(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  listthemeHaloRunV1alpha1Theme(requestParameters = {}, options) {
    return ThemeHaloRunV1alpha1ThemeApiFp(this.configuration).listthemeHaloRunV1alpha1Theme(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatethemeHaloRunV1alpha1Theme(requestParameters, options) {
    return ThemeHaloRunV1alpha1ThemeApiFp(this.configuration).updatethemeHaloRunV1alpha1Theme(
      requestParameters.name,
      requestParameters.theme,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const V1alpha1AnnotationSettingApiAxiosParamCreator = function(configuration) {
  return {
    createv1alpha1AnnotationSetting: async (annotationSetting, options = {}) => {
      const localVarPath = `/api/v1alpha1/annotationsettings`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        annotationSetting,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletev1alpha1AnnotationSetting: async (name, options = {}) => {
      assertParamExists("deletev1alpha1AnnotationSetting", "name", name);
      const localVarPath = `/api/v1alpha1/annotationsettings/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getv1alpha1AnnotationSetting: async (name, options = {}) => {
      assertParamExists("getv1alpha1AnnotationSetting", "name", name);
      const localVarPath = `/api/v1alpha1/annotationsettings/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listv1alpha1AnnotationSetting: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/api/v1alpha1/annotationsettings`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatev1alpha1AnnotationSetting: async (name, annotationSetting, options = {}) => {
      assertParamExists("updatev1alpha1AnnotationSetting", "name", name);
      const localVarPath = `/api/v1alpha1/annotationsettings/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        annotationSetting,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const V1alpha1AnnotationSettingApiFp = function(configuration) {
  const localVarAxiosParamCreator = V1alpha1AnnotationSettingApiAxiosParamCreator(configuration);
  return {
    async createv1alpha1AnnotationSetting(annotationSetting, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createv1alpha1AnnotationSetting(
        annotationSetting,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletev1alpha1AnnotationSetting(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletev1alpha1AnnotationSetting(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getv1alpha1AnnotationSetting(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getv1alpha1AnnotationSetting(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listv1alpha1AnnotationSetting(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listv1alpha1AnnotationSetting(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatev1alpha1AnnotationSetting(name, annotationSetting, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatev1alpha1AnnotationSetting(
        name,
        annotationSetting,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const V1alpha1AnnotationSettingApiFactory = function(configuration, basePath, axios) {
  const localVarFp = V1alpha1AnnotationSettingApiFp(configuration);
  return {
    createv1alpha1AnnotationSetting(requestParameters = {}, options) {
      return localVarFp.createv1alpha1AnnotationSetting(
        requestParameters.annotationSetting,
        options
      ).then((request) => request(axios, basePath));
    },
    deletev1alpha1AnnotationSetting(requestParameters, options) {
      return localVarFp.deletev1alpha1AnnotationSetting(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    getv1alpha1AnnotationSetting(requestParameters, options) {
      return localVarFp.getv1alpha1AnnotationSetting(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    listv1alpha1AnnotationSetting(requestParameters = {}, options) {
      return localVarFp.listv1alpha1AnnotationSetting(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatev1alpha1AnnotationSetting(requestParameters, options) {
      return localVarFp.updatev1alpha1AnnotationSetting(
        requestParameters.name,
        requestParameters.annotationSetting,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class V1alpha1AnnotationSettingApi extends BaseAPI {
  createv1alpha1AnnotationSetting(requestParameters = {}, options) {
    return V1alpha1AnnotationSettingApiFp(this.configuration).createv1alpha1AnnotationSetting(
      requestParameters.annotationSetting,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  deletev1alpha1AnnotationSetting(requestParameters, options) {
    return V1alpha1AnnotationSettingApiFp(this.configuration).deletev1alpha1AnnotationSetting(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  getv1alpha1AnnotationSetting(requestParameters, options) {
    return V1alpha1AnnotationSettingApiFp(this.configuration).getv1alpha1AnnotationSetting(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  listv1alpha1AnnotationSetting(requestParameters = {}, options) {
    return V1alpha1AnnotationSettingApiFp(this.configuration).listv1alpha1AnnotationSetting(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatev1alpha1AnnotationSetting(requestParameters, options) {
    return V1alpha1AnnotationSettingApiFp(this.configuration).updatev1alpha1AnnotationSetting(
      requestParameters.name,
      requestParameters.annotationSetting,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const V1alpha1CacheApiAxiosParamCreator = function(configuration) {
  return {
    evictCache: async (name, options = {}) => {
      assertParamExists("evictCache", "name", name);
      const localVarPath = `/apis/api.console.halo.run/v1alpha1/caches/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const V1alpha1CacheApiFp = function(configuration) {
  const localVarAxiosParamCreator = V1alpha1CacheApiAxiosParamCreator(configuration);
  return {
    async evictCache(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.evictCache(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const V1alpha1CacheApiFactory = function(configuration, basePath, axios) {
  const localVarFp = V1alpha1CacheApiFp(configuration);
  return {
    evictCache(requestParameters, options) {
      return localVarFp.evictCache(requestParameters.name, options).then((request) => request(axios, basePath));
    }
  };
};
class V1alpha1CacheApi extends BaseAPI {
  evictCache(requestParameters, options) {
    return V1alpha1CacheApiFp(this.configuration).evictCache(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
}

const V1alpha1ConfigMapApiAxiosParamCreator = function(configuration) {
  return {
    createv1alpha1ConfigMap: async (configMap, options = {}) => {
      const localVarPath = `/api/v1alpha1/configmaps`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        configMap,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletev1alpha1ConfigMap: async (name, options = {}) => {
      assertParamExists("deletev1alpha1ConfigMap", "name", name);
      const localVarPath = `/api/v1alpha1/configmaps/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getv1alpha1ConfigMap: async (name, options = {}) => {
      assertParamExists("getv1alpha1ConfigMap", "name", name);
      const localVarPath = `/api/v1alpha1/configmaps/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listv1alpha1ConfigMap: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/api/v1alpha1/configmaps`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatev1alpha1ConfigMap: async (name, configMap, options = {}) => {
      assertParamExists("updatev1alpha1ConfigMap", "name", name);
      const localVarPath = `/api/v1alpha1/configmaps/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        configMap,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const V1alpha1ConfigMapApiFp = function(configuration) {
  const localVarAxiosParamCreator = V1alpha1ConfigMapApiAxiosParamCreator(configuration);
  return {
    async createv1alpha1ConfigMap(configMap, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createv1alpha1ConfigMap(
        configMap,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletev1alpha1ConfigMap(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletev1alpha1ConfigMap(name, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getv1alpha1ConfigMap(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getv1alpha1ConfigMap(name, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listv1alpha1ConfigMap(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listv1alpha1ConfigMap(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatev1alpha1ConfigMap(name, configMap, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatev1alpha1ConfigMap(
        name,
        configMap,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const V1alpha1ConfigMapApiFactory = function(configuration, basePath, axios) {
  const localVarFp = V1alpha1ConfigMapApiFp(configuration);
  return {
    createv1alpha1ConfigMap(requestParameters = {}, options) {
      return localVarFp.createv1alpha1ConfigMap(requestParameters.configMap, options).then((request) => request(axios, basePath));
    },
    deletev1alpha1ConfigMap(requestParameters, options) {
      return localVarFp.deletev1alpha1ConfigMap(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    getv1alpha1ConfigMap(requestParameters, options) {
      return localVarFp.getv1alpha1ConfigMap(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    listv1alpha1ConfigMap(requestParameters = {}, options) {
      return localVarFp.listv1alpha1ConfigMap(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatev1alpha1ConfigMap(requestParameters, options) {
      return localVarFp.updatev1alpha1ConfigMap(
        requestParameters.name,
        requestParameters.configMap,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class V1alpha1ConfigMapApi extends BaseAPI {
  createv1alpha1ConfigMap(requestParameters = {}, options) {
    return V1alpha1ConfigMapApiFp(this.configuration).createv1alpha1ConfigMap(requestParameters.configMap, options).then((request) => request(this.axios, this.basePath));
  }
  deletev1alpha1ConfigMap(requestParameters, options) {
    return V1alpha1ConfigMapApiFp(this.configuration).deletev1alpha1ConfigMap(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  getv1alpha1ConfigMap(requestParameters, options) {
    return V1alpha1ConfigMapApiFp(this.configuration).getv1alpha1ConfigMap(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  listv1alpha1ConfigMap(requestParameters = {}, options) {
    return V1alpha1ConfigMapApiFp(this.configuration).listv1alpha1ConfigMap(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatev1alpha1ConfigMap(requestParameters, options) {
    return V1alpha1ConfigMapApiFp(this.configuration).updatev1alpha1ConfigMap(
      requestParameters.name,
      requestParameters.configMap,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const V1alpha1MenuApiAxiosParamCreator = function(configuration) {
  return {
    createv1alpha1Menu: async (menu, options = {}) => {
      const localVarPath = `/api/v1alpha1/menus`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        menu,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletev1alpha1Menu: async (name, options = {}) => {
      assertParamExists("deletev1alpha1Menu", "name", name);
      const localVarPath = `/api/v1alpha1/menus/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getv1alpha1Menu: async (name, options = {}) => {
      assertParamExists("getv1alpha1Menu", "name", name);
      const localVarPath = `/api/v1alpha1/menus/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listv1alpha1Menu: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/api/v1alpha1/menus`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatev1alpha1Menu: async (name, menu, options = {}) => {
      assertParamExists("updatev1alpha1Menu", "name", name);
      const localVarPath = `/api/v1alpha1/menus/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        menu,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const V1alpha1MenuApiFp = function(configuration) {
  const localVarAxiosParamCreator = V1alpha1MenuApiAxiosParamCreator(configuration);
  return {
    async createv1alpha1Menu(menu, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createv1alpha1Menu(menu, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletev1alpha1Menu(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletev1alpha1Menu(name, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getv1alpha1Menu(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getv1alpha1Menu(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listv1alpha1Menu(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listv1alpha1Menu(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatev1alpha1Menu(name, menu, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatev1alpha1Menu(name, menu, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const V1alpha1MenuApiFactory = function(configuration, basePath, axios) {
  const localVarFp = V1alpha1MenuApiFp(configuration);
  return {
    createv1alpha1Menu(requestParameters = {}, options) {
      return localVarFp.createv1alpha1Menu(requestParameters.menu, options).then((request) => request(axios, basePath));
    },
    deletev1alpha1Menu(requestParameters, options) {
      return localVarFp.deletev1alpha1Menu(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    getv1alpha1Menu(requestParameters, options) {
      return localVarFp.getv1alpha1Menu(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    listv1alpha1Menu(requestParameters = {}, options) {
      return localVarFp.listv1alpha1Menu(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatev1alpha1Menu(requestParameters, options) {
      return localVarFp.updatev1alpha1Menu(
        requestParameters.name,
        requestParameters.menu,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class V1alpha1MenuApi extends BaseAPI {
  createv1alpha1Menu(requestParameters = {}, options) {
    return V1alpha1MenuApiFp(this.configuration).createv1alpha1Menu(requestParameters.menu, options).then((request) => request(this.axios, this.basePath));
  }
  deletev1alpha1Menu(requestParameters, options) {
    return V1alpha1MenuApiFp(this.configuration).deletev1alpha1Menu(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  getv1alpha1Menu(requestParameters, options) {
    return V1alpha1MenuApiFp(this.configuration).getv1alpha1Menu(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  listv1alpha1Menu(requestParameters = {}, options) {
    return V1alpha1MenuApiFp(this.configuration).listv1alpha1Menu(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatev1alpha1Menu(requestParameters, options) {
    return V1alpha1MenuApiFp(this.configuration).updatev1alpha1Menu(
      requestParameters.name,
      requestParameters.menu,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const V1alpha1MenuItemApiAxiosParamCreator = function(configuration) {
  return {
    createv1alpha1MenuItem: async (menuItem, options = {}) => {
      const localVarPath = `/api/v1alpha1/menuitems`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        menuItem,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletev1alpha1MenuItem: async (name, options = {}) => {
      assertParamExists("deletev1alpha1MenuItem", "name", name);
      const localVarPath = `/api/v1alpha1/menuitems/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getv1alpha1MenuItem: async (name, options = {}) => {
      assertParamExists("getv1alpha1MenuItem", "name", name);
      const localVarPath = `/api/v1alpha1/menuitems/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listv1alpha1MenuItem: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/api/v1alpha1/menuitems`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatev1alpha1MenuItem: async (name, menuItem, options = {}) => {
      assertParamExists("updatev1alpha1MenuItem", "name", name);
      const localVarPath = `/api/v1alpha1/menuitems/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        menuItem,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const V1alpha1MenuItemApiFp = function(configuration) {
  const localVarAxiosParamCreator = V1alpha1MenuItemApiAxiosParamCreator(configuration);
  return {
    async createv1alpha1MenuItem(menuItem, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createv1alpha1MenuItem(
        menuItem,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletev1alpha1MenuItem(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletev1alpha1MenuItem(name, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getv1alpha1MenuItem(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getv1alpha1MenuItem(name, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listv1alpha1MenuItem(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listv1alpha1MenuItem(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatev1alpha1MenuItem(name, menuItem, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatev1alpha1MenuItem(
        name,
        menuItem,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const V1alpha1MenuItemApiFactory = function(configuration, basePath, axios) {
  const localVarFp = V1alpha1MenuItemApiFp(configuration);
  return {
    createv1alpha1MenuItem(requestParameters = {}, options) {
      return localVarFp.createv1alpha1MenuItem(requestParameters.menuItem, options).then((request) => request(axios, basePath));
    },
    deletev1alpha1MenuItem(requestParameters, options) {
      return localVarFp.deletev1alpha1MenuItem(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    getv1alpha1MenuItem(requestParameters, options) {
      return localVarFp.getv1alpha1MenuItem(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    listv1alpha1MenuItem(requestParameters = {}, options) {
      return localVarFp.listv1alpha1MenuItem(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatev1alpha1MenuItem(requestParameters, options) {
      return localVarFp.updatev1alpha1MenuItem(
        requestParameters.name,
        requestParameters.menuItem,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class V1alpha1MenuItemApi extends BaseAPI {
  createv1alpha1MenuItem(requestParameters = {}, options) {
    return V1alpha1MenuItemApiFp(this.configuration).createv1alpha1MenuItem(requestParameters.menuItem, options).then((request) => request(this.axios, this.basePath));
  }
  deletev1alpha1MenuItem(requestParameters, options) {
    return V1alpha1MenuItemApiFp(this.configuration).deletev1alpha1MenuItem(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  getv1alpha1MenuItem(requestParameters, options) {
    return V1alpha1MenuItemApiFp(this.configuration).getv1alpha1MenuItem(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  listv1alpha1MenuItem(requestParameters = {}, options) {
    return V1alpha1MenuItemApiFp(this.configuration).listv1alpha1MenuItem(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatev1alpha1MenuItem(requestParameters, options) {
    return V1alpha1MenuItemApiFp(this.configuration).updatev1alpha1MenuItem(
      requestParameters.name,
      requestParameters.menuItem,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const V1alpha1RoleApiAxiosParamCreator = function(configuration) {
  return {
    createv1alpha1Role: async (role, options = {}) => {
      const localVarPath = `/api/v1alpha1/roles`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        role,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletev1alpha1Role: async (name, options = {}) => {
      assertParamExists("deletev1alpha1Role", "name", name);
      const localVarPath = `/api/v1alpha1/roles/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getv1alpha1Role: async (name, options = {}) => {
      assertParamExists("getv1alpha1Role", "name", name);
      const localVarPath = `/api/v1alpha1/roles/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listv1alpha1Role: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/api/v1alpha1/roles`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatev1alpha1Role: async (name, role, options = {}) => {
      assertParamExists("updatev1alpha1Role", "name", name);
      const localVarPath = `/api/v1alpha1/roles/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        role,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const V1alpha1RoleApiFp = function(configuration) {
  const localVarAxiosParamCreator = V1alpha1RoleApiAxiosParamCreator(configuration);
  return {
    async createv1alpha1Role(role, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createv1alpha1Role(role, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletev1alpha1Role(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletev1alpha1Role(name, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getv1alpha1Role(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getv1alpha1Role(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listv1alpha1Role(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listv1alpha1Role(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatev1alpha1Role(name, role, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatev1alpha1Role(name, role, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const V1alpha1RoleApiFactory = function(configuration, basePath, axios) {
  const localVarFp = V1alpha1RoleApiFp(configuration);
  return {
    createv1alpha1Role(requestParameters = {}, options) {
      return localVarFp.createv1alpha1Role(requestParameters.role, options).then((request) => request(axios, basePath));
    },
    deletev1alpha1Role(requestParameters, options) {
      return localVarFp.deletev1alpha1Role(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    getv1alpha1Role(requestParameters, options) {
      return localVarFp.getv1alpha1Role(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    listv1alpha1Role(requestParameters = {}, options) {
      return localVarFp.listv1alpha1Role(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatev1alpha1Role(requestParameters, options) {
      return localVarFp.updatev1alpha1Role(
        requestParameters.name,
        requestParameters.role,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class V1alpha1RoleApi extends BaseAPI {
  createv1alpha1Role(requestParameters = {}, options) {
    return V1alpha1RoleApiFp(this.configuration).createv1alpha1Role(requestParameters.role, options).then((request) => request(this.axios, this.basePath));
  }
  deletev1alpha1Role(requestParameters, options) {
    return V1alpha1RoleApiFp(this.configuration).deletev1alpha1Role(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  getv1alpha1Role(requestParameters, options) {
    return V1alpha1RoleApiFp(this.configuration).getv1alpha1Role(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  listv1alpha1Role(requestParameters = {}, options) {
    return V1alpha1RoleApiFp(this.configuration).listv1alpha1Role(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatev1alpha1Role(requestParameters, options) {
    return V1alpha1RoleApiFp(this.configuration).updatev1alpha1Role(
      requestParameters.name,
      requestParameters.role,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const V1alpha1RoleBindingApiAxiosParamCreator = function(configuration) {
  return {
    createv1alpha1RoleBinding: async (roleBinding, options = {}) => {
      const localVarPath = `/api/v1alpha1/rolebindings`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleBinding,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletev1alpha1RoleBinding: async (name, options = {}) => {
      assertParamExists("deletev1alpha1RoleBinding", "name", name);
      const localVarPath = `/api/v1alpha1/rolebindings/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getv1alpha1RoleBinding: async (name, options = {}) => {
      assertParamExists("getv1alpha1RoleBinding", "name", name);
      const localVarPath = `/api/v1alpha1/rolebindings/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listv1alpha1RoleBinding: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/api/v1alpha1/rolebindings`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatev1alpha1RoleBinding: async (name, roleBinding, options = {}) => {
      assertParamExists("updatev1alpha1RoleBinding", "name", name);
      const localVarPath = `/api/v1alpha1/rolebindings/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleBinding,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const V1alpha1RoleBindingApiFp = function(configuration) {
  const localVarAxiosParamCreator = V1alpha1RoleBindingApiAxiosParamCreator(configuration);
  return {
    async createv1alpha1RoleBinding(roleBinding, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createv1alpha1RoleBinding(
        roleBinding,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletev1alpha1RoleBinding(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletev1alpha1RoleBinding(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getv1alpha1RoleBinding(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getv1alpha1RoleBinding(name, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listv1alpha1RoleBinding(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listv1alpha1RoleBinding(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatev1alpha1RoleBinding(name, roleBinding, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatev1alpha1RoleBinding(
        name,
        roleBinding,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const V1alpha1RoleBindingApiFactory = function(configuration, basePath, axios) {
  const localVarFp = V1alpha1RoleBindingApiFp(configuration);
  return {
    createv1alpha1RoleBinding(requestParameters = {}, options) {
      return localVarFp.createv1alpha1RoleBinding(requestParameters.roleBinding, options).then((request) => request(axios, basePath));
    },
    deletev1alpha1RoleBinding(requestParameters, options) {
      return localVarFp.deletev1alpha1RoleBinding(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    getv1alpha1RoleBinding(requestParameters, options) {
      return localVarFp.getv1alpha1RoleBinding(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    listv1alpha1RoleBinding(requestParameters = {}, options) {
      return localVarFp.listv1alpha1RoleBinding(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatev1alpha1RoleBinding(requestParameters, options) {
      return localVarFp.updatev1alpha1RoleBinding(
        requestParameters.name,
        requestParameters.roleBinding,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class V1alpha1RoleBindingApi extends BaseAPI {
  createv1alpha1RoleBinding(requestParameters = {}, options) {
    return V1alpha1RoleBindingApiFp(this.configuration).createv1alpha1RoleBinding(requestParameters.roleBinding, options).then((request) => request(this.axios, this.basePath));
  }
  deletev1alpha1RoleBinding(requestParameters, options) {
    return V1alpha1RoleBindingApiFp(this.configuration).deletev1alpha1RoleBinding(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  getv1alpha1RoleBinding(requestParameters, options) {
    return V1alpha1RoleBindingApiFp(this.configuration).getv1alpha1RoleBinding(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  listv1alpha1RoleBinding(requestParameters = {}, options) {
    return V1alpha1RoleBindingApiFp(this.configuration).listv1alpha1RoleBinding(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatev1alpha1RoleBinding(requestParameters, options) {
    return V1alpha1RoleBindingApiFp(this.configuration).updatev1alpha1RoleBinding(
      requestParameters.name,
      requestParameters.roleBinding,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const V1alpha1SecretApiAxiosParamCreator = function(configuration) {
  return {
    createv1alpha1Secret: async (secret, options = {}) => {
      const localVarPath = `/api/v1alpha1/secrets`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        secret,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletev1alpha1Secret: async (name, options = {}) => {
      assertParamExists("deletev1alpha1Secret", "name", name);
      const localVarPath = `/api/v1alpha1/secrets/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getv1alpha1Secret: async (name, options = {}) => {
      assertParamExists("getv1alpha1Secret", "name", name);
      const localVarPath = `/api/v1alpha1/secrets/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listv1alpha1Secret: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/api/v1alpha1/secrets`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatev1alpha1Secret: async (name, secret, options = {}) => {
      assertParamExists("updatev1alpha1Secret", "name", name);
      const localVarPath = `/api/v1alpha1/secrets/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        secret,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const V1alpha1SecretApiFp = function(configuration) {
  const localVarAxiosParamCreator = V1alpha1SecretApiAxiosParamCreator(configuration);
  return {
    async createv1alpha1Secret(secret, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createv1alpha1Secret(secret, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletev1alpha1Secret(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletev1alpha1Secret(name, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getv1alpha1Secret(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getv1alpha1Secret(name, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listv1alpha1Secret(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listv1alpha1Secret(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatev1alpha1Secret(name, secret, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatev1alpha1Secret(
        name,
        secret,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const V1alpha1SecretApiFactory = function(configuration, basePath, axios) {
  const localVarFp = V1alpha1SecretApiFp(configuration);
  return {
    createv1alpha1Secret(requestParameters = {}, options) {
      return localVarFp.createv1alpha1Secret(requestParameters.secret, options).then((request) => request(axios, basePath));
    },
    deletev1alpha1Secret(requestParameters, options) {
      return localVarFp.deletev1alpha1Secret(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    getv1alpha1Secret(requestParameters, options) {
      return localVarFp.getv1alpha1Secret(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    listv1alpha1Secret(requestParameters = {}, options) {
      return localVarFp.listv1alpha1Secret(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatev1alpha1Secret(requestParameters, options) {
      return localVarFp.updatev1alpha1Secret(
        requestParameters.name,
        requestParameters.secret,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class V1alpha1SecretApi extends BaseAPI {
  createv1alpha1Secret(requestParameters = {}, options) {
    return V1alpha1SecretApiFp(this.configuration).createv1alpha1Secret(requestParameters.secret, options).then((request) => request(this.axios, this.basePath));
  }
  deletev1alpha1Secret(requestParameters, options) {
    return V1alpha1SecretApiFp(this.configuration).deletev1alpha1Secret(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  getv1alpha1Secret(requestParameters, options) {
    return V1alpha1SecretApiFp(this.configuration).getv1alpha1Secret(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  listv1alpha1Secret(requestParameters = {}, options) {
    return V1alpha1SecretApiFp(this.configuration).listv1alpha1Secret(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatev1alpha1Secret(requestParameters, options) {
    return V1alpha1SecretApiFp(this.configuration).updatev1alpha1Secret(
      requestParameters.name,
      requestParameters.secret,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const V1alpha1SettingApiAxiosParamCreator = function(configuration) {
  return {
    createv1alpha1Setting: async (setting, options = {}) => {
      const localVarPath = `/api/v1alpha1/settings`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        setting,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletev1alpha1Setting: async (name, options = {}) => {
      assertParamExists("deletev1alpha1Setting", "name", name);
      const localVarPath = `/api/v1alpha1/settings/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getv1alpha1Setting: async (name, options = {}) => {
      assertParamExists("getv1alpha1Setting", "name", name);
      const localVarPath = `/api/v1alpha1/settings/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listv1alpha1Setting: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/api/v1alpha1/settings`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatev1alpha1Setting: async (name, setting, options = {}) => {
      assertParamExists("updatev1alpha1Setting", "name", name);
      const localVarPath = `/api/v1alpha1/settings/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        setting,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const V1alpha1SettingApiFp = function(configuration) {
  const localVarAxiosParamCreator = V1alpha1SettingApiAxiosParamCreator(configuration);
  return {
    async createv1alpha1Setting(setting, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createv1alpha1Setting(setting, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletev1alpha1Setting(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletev1alpha1Setting(name, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getv1alpha1Setting(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getv1alpha1Setting(name, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listv1alpha1Setting(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listv1alpha1Setting(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatev1alpha1Setting(name, setting, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatev1alpha1Setting(
        name,
        setting,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const V1alpha1SettingApiFactory = function(configuration, basePath, axios) {
  const localVarFp = V1alpha1SettingApiFp(configuration);
  return {
    createv1alpha1Setting(requestParameters = {}, options) {
      return localVarFp.createv1alpha1Setting(requestParameters.setting, options).then((request) => request(axios, basePath));
    },
    deletev1alpha1Setting(requestParameters, options) {
      return localVarFp.deletev1alpha1Setting(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    getv1alpha1Setting(requestParameters, options) {
      return localVarFp.getv1alpha1Setting(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    listv1alpha1Setting(requestParameters = {}, options) {
      return localVarFp.listv1alpha1Setting(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatev1alpha1Setting(requestParameters, options) {
      return localVarFp.updatev1alpha1Setting(
        requestParameters.name,
        requestParameters.setting,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class V1alpha1SettingApi extends BaseAPI {
  createv1alpha1Setting(requestParameters = {}, options) {
    return V1alpha1SettingApiFp(this.configuration).createv1alpha1Setting(requestParameters.setting, options).then((request) => request(this.axios, this.basePath));
  }
  deletev1alpha1Setting(requestParameters, options) {
    return V1alpha1SettingApiFp(this.configuration).deletev1alpha1Setting(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  getv1alpha1Setting(requestParameters, options) {
    return V1alpha1SettingApiFp(this.configuration).getv1alpha1Setting(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  listv1alpha1Setting(requestParameters = {}, options) {
    return V1alpha1SettingApiFp(this.configuration).listv1alpha1Setting(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatev1alpha1Setting(requestParameters, options) {
    return V1alpha1SettingApiFp(this.configuration).updatev1alpha1Setting(
      requestParameters.name,
      requestParameters.setting,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

const V1alpha1UserApiAxiosParamCreator = function(configuration) {
  return {
    createv1alpha1User: async (user, options = {}) => {
      const localVarPath = `/api/v1alpha1/users`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        user,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    deletev1alpha1User: async (name, options = {}) => {
      assertParamExists("deletev1alpha1User", "name", name);
      const localVarPath = `/api/v1alpha1/users/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    getv1alpha1User: async (name, options = {}) => {
      assertParamExists("getv1alpha1User", "name", name);
      const localVarPath = `/api/v1alpha1/users/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    listv1alpha1User: async (fieldSelector, labelSelector, page, size, sort, options = {}) => {
      const localVarPath = `/api/v1alpha1/users`;
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      if (fieldSelector) {
        localVarQueryParameter["fieldSelector"] = fieldSelector;
      }
      if (labelSelector) {
        localVarQueryParameter["labelSelector"] = labelSelector;
      }
      if (page !== void 0) {
        localVarQueryParameter["page"] = page;
      }
      if (size !== void 0) {
        localVarQueryParameter["size"] = size;
      }
      if (sort) {
        localVarQueryParameter["sort"] = Array.from(sort);
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    updatev1alpha1User: async (name, user, options = {}) => {
      assertParamExists("updatev1alpha1User", "name", name);
      const localVarPath = `/api/v1alpha1/users/{name}`.replace(
        `{${"name"}}`,
        encodeURIComponent(String(name))
      );
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {};
      const localVarQueryParameter = {};
      setBasicAuthToObject(localVarRequestOptions, configuration);
      await setBearerAuthToObject(localVarHeaderParameter, configuration);
      localVarHeaderParameter["Content-Type"] = "application/json";
      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        user,
        localVarRequestOptions,
        configuration
      );
      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};
const V1alpha1UserApiFp = function(configuration) {
  const localVarAxiosParamCreator = V1alpha1UserApiAxiosParamCreator(configuration);
  return {
    async createv1alpha1User(user, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createv1alpha1User(user, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async deletev1alpha1User(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletev1alpha1User(name, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async getv1alpha1User(name, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getv1alpha1User(
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async listv1alpha1User(fieldSelector, labelSelector, page, size, sort, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listv1alpha1User(
        fieldSelector,
        labelSelector,
        page,
        size,
        sort,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    async updatev1alpha1User(name, user, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatev1alpha1User(name, user, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    }
  };
};
const V1alpha1UserApiFactory = function(configuration, basePath, axios) {
  const localVarFp = V1alpha1UserApiFp(configuration);
  return {
    createv1alpha1User(requestParameters = {}, options) {
      return localVarFp.createv1alpha1User(requestParameters.user, options).then((request) => request(axios, basePath));
    },
    deletev1alpha1User(requestParameters, options) {
      return localVarFp.deletev1alpha1User(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    getv1alpha1User(requestParameters, options) {
      return localVarFp.getv1alpha1User(requestParameters.name, options).then((request) => request(axios, basePath));
    },
    listv1alpha1User(requestParameters = {}, options) {
      return localVarFp.listv1alpha1User(
        requestParameters.fieldSelector,
        requestParameters.labelSelector,
        requestParameters.page,
        requestParameters.size,
        requestParameters.sort,
        options
      ).then((request) => request(axios, basePath));
    },
    updatev1alpha1User(requestParameters, options) {
      return localVarFp.updatev1alpha1User(
        requestParameters.name,
        requestParameters.user,
        options
      ).then((request) => request(axios, basePath));
    }
  };
};
class V1alpha1UserApi extends BaseAPI {
  createv1alpha1User(requestParameters = {}, options) {
    return V1alpha1UserApiFp(this.configuration).createv1alpha1User(requestParameters.user, options).then((request) => request(this.axios, this.basePath));
  }
  deletev1alpha1User(requestParameters, options) {
    return V1alpha1UserApiFp(this.configuration).deletev1alpha1User(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  getv1alpha1User(requestParameters, options) {
    return V1alpha1UserApiFp(this.configuration).getv1alpha1User(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
  }
  listv1alpha1User(requestParameters = {}, options) {
    return V1alpha1UserApiFp(this.configuration).listv1alpha1User(
      requestParameters.fieldSelector,
      requestParameters.labelSelector,
      requestParameters.page,
      requestParameters.size,
      requestParameters.sort,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
  updatev1alpha1User(requestParameters, options) {
    return V1alpha1UserApiFp(this.configuration).updatev1alpha1User(
      requestParameters.name,
      requestParameters.user,
      options
    ).then((request) => request(this.axios, this.basePath));
  }
}

class Configuration {
  constructor(param = {}) {
    this.apiKey = param.apiKey;
    this.username = param.username;
    this.password = param.password;
    this.accessToken = param.accessToken;
    this.basePath = param.basePath;
    this.baseOptions = param.baseOptions;
    this.formDataCtor = param.formDataCtor;
  }
  isJsonMime(mime) {
    const jsonMime = new RegExp(
      "^(application/json|[^;/ 	]+/[^;/ 	]+[+]json)[ 	]*(;.*)?$",
      "i"
    );
    return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === "application/json-patch+json");
  }
}

const BackupStatusPhaseEnum = {
  Pending: "PENDING",
  Running: "RUNNING",
  Succeeded: "SUCCEEDED",
  Failed: "FAILED"
};

const ConditionStatusEnum = {
  True: "TRUE",
  False: "FALSE",
  Unknown: "UNKNOWN"
};

const ExtensionPointSpecTypeEnum = {
  Singleton: "SINGLETON",
  MultiInstance: "MULTI_INSTANCE"
};

const MenuItemSpecTargetEnum = {
  Blank: "_blank",
  Self: "_self",
  Parent: "_parent",
  Top: "_top"
};

const PluginStatusPhaseEnum = {
  Created: "CREATED",
  Disabled: "DISABLED",
  Resolved: "RESOLVED",
  Started: "STARTED",
  Stopped: "STOPPED",
  Failed: "FAILED"
};

const PostSpecVisibleEnum = {
  Public: "PUBLIC",
  Internal: "INTERNAL",
  Private: "PRIVATE"
};

const SinglePageSpecVisibleEnum = {
  Public: "PUBLIC",
  Internal: "INTERNAL",
  Private: "PRIVATE"
};

const ThemeStatusPhaseEnum = {
  Ready: "READY",
  Failed: "FAILED",
  Unknown: "UNKNOWN"
};

export { ApiConsoleHaloRunV1alpha1AttachmentApi, ApiConsoleHaloRunV1alpha1AttachmentApiAxiosParamCreator, ApiConsoleHaloRunV1alpha1AttachmentApiFactory, ApiConsoleHaloRunV1alpha1AttachmentApiFp, ApiConsoleHaloRunV1alpha1AuthProviderApi, ApiConsoleHaloRunV1alpha1AuthProviderApiAxiosParamCreator, ApiConsoleHaloRunV1alpha1AuthProviderApiFactory, ApiConsoleHaloRunV1alpha1AuthProviderApiFp, ApiConsoleHaloRunV1alpha1CommentApi, ApiConsoleHaloRunV1alpha1CommentApiAxiosParamCreator, ApiConsoleHaloRunV1alpha1CommentApiFactory, ApiConsoleHaloRunV1alpha1CommentApiFp, ApiConsoleHaloRunV1alpha1IndicesApi, ApiConsoleHaloRunV1alpha1IndicesApiAxiosParamCreator, ApiConsoleHaloRunV1alpha1IndicesApiFactory, ApiConsoleHaloRunV1alpha1IndicesApiFp, ApiConsoleHaloRunV1alpha1NotifierApi, ApiConsoleHaloRunV1alpha1NotifierApiAxiosParamCreator, ApiConsoleHaloRunV1alpha1NotifierApiFactory, ApiConsoleHaloRunV1alpha1NotifierApiFp, ApiConsoleHaloRunV1alpha1PluginApi, ApiConsoleHaloRunV1alpha1PluginApiAxiosParamCreator, ApiConsoleHaloRunV1alpha1PluginApiFactory, ApiConsoleHaloRunV1alpha1PluginApiFp, ApiConsoleHaloRunV1alpha1PostApi, ApiConsoleHaloRunV1alpha1PostApiAxiosParamCreator, ApiConsoleHaloRunV1alpha1PostApiFactory, ApiConsoleHaloRunV1alpha1PostApiFp, ApiConsoleHaloRunV1alpha1ReplyApi, ApiConsoleHaloRunV1alpha1ReplyApiAxiosParamCreator, ApiConsoleHaloRunV1alpha1ReplyApiFactory, ApiConsoleHaloRunV1alpha1ReplyApiFp, ApiConsoleHaloRunV1alpha1SinglePageApi, ApiConsoleHaloRunV1alpha1SinglePageApiAxiosParamCreator, ApiConsoleHaloRunV1alpha1SinglePageApiFactory, ApiConsoleHaloRunV1alpha1SinglePageApiFp, ApiConsoleHaloRunV1alpha1StatsApi, ApiConsoleHaloRunV1alpha1StatsApiAxiosParamCreator, ApiConsoleHaloRunV1alpha1StatsApiFactory, ApiConsoleHaloRunV1alpha1StatsApiFp, ApiConsoleHaloRunV1alpha1SystemApi, ApiConsoleHaloRunV1alpha1SystemApiAxiosParamCreator, ApiConsoleHaloRunV1alpha1SystemApiFactory, ApiConsoleHaloRunV1alpha1SystemApiFp, ApiConsoleHaloRunV1alpha1ThemeApi, ApiConsoleHaloRunV1alpha1ThemeApiAxiosParamCreator, ApiConsoleHaloRunV1alpha1ThemeApiFactory, ApiConsoleHaloRunV1alpha1ThemeApiFp, ApiConsoleHaloRunV1alpha1UserApi, ApiConsoleHaloRunV1alpha1UserApiAxiosParamCreator, ApiConsoleHaloRunV1alpha1UserApiFactory, ApiConsoleHaloRunV1alpha1UserApiFp, ApiConsoleMigrationHaloRunV1alpha1MigrationApi, ApiConsoleMigrationHaloRunV1alpha1MigrationApiAxiosParamCreator, ApiConsoleMigrationHaloRunV1alpha1MigrationApiFactory, ApiConsoleMigrationHaloRunV1alpha1MigrationApiFp, ApiContentHaloRunV1alpha1CategoryApi, ApiContentHaloRunV1alpha1CategoryApiAxiosParamCreator, ApiContentHaloRunV1alpha1CategoryApiFactory, ApiContentHaloRunV1alpha1CategoryApiFp, ApiContentHaloRunV1alpha1PostApi, ApiContentHaloRunV1alpha1PostApiAxiosParamCreator, ApiContentHaloRunV1alpha1PostApiFactory, ApiContentHaloRunV1alpha1PostApiFp, ApiContentHaloRunV1alpha1SinglePageApi, ApiContentHaloRunV1alpha1SinglePageApiAxiosParamCreator, ApiContentHaloRunV1alpha1SinglePageApiFactory, ApiContentHaloRunV1alpha1SinglePageApiFp, ApiContentHaloRunV1alpha1TagApi, ApiContentHaloRunV1alpha1TagApiAxiosParamCreator, ApiContentHaloRunV1alpha1TagApiFactory, ApiContentHaloRunV1alpha1TagApiFp, ApiHaloRunV1alpha1CommentApi, ApiHaloRunV1alpha1CommentApiAxiosParamCreator, ApiHaloRunV1alpha1CommentApiFactory, ApiHaloRunV1alpha1CommentApiFp, ApiHaloRunV1alpha1MenuApi, ApiHaloRunV1alpha1MenuApiAxiosParamCreator, ApiHaloRunV1alpha1MenuApiFactory, ApiHaloRunV1alpha1MenuApiFp, ApiHaloRunV1alpha1PostApi, ApiHaloRunV1alpha1PostApiAxiosParamCreator, ApiHaloRunV1alpha1PostApiFactory, ApiHaloRunV1alpha1PostApiFp, ApiHaloRunV1alpha1StatsApi, ApiHaloRunV1alpha1StatsApiAxiosParamCreator, ApiHaloRunV1alpha1StatsApiFactory, ApiHaloRunV1alpha1StatsApiFp, ApiHaloRunV1alpha1TrackerApi, ApiHaloRunV1alpha1TrackerApiAxiosParamCreator, ApiHaloRunV1alpha1TrackerApiFactory, ApiHaloRunV1alpha1TrackerApiFp, ApiHaloRunV1alpha1UserApi, ApiHaloRunV1alpha1UserApiAxiosParamCreator, ApiHaloRunV1alpha1UserApiFactory, ApiHaloRunV1alpha1UserApiFp, ApiNotificationHaloRunV1alpha1NotificationApi, ApiNotificationHaloRunV1alpha1NotificationApiAxiosParamCreator, ApiNotificationHaloRunV1alpha1NotificationApiFactory, ApiNotificationHaloRunV1alpha1NotificationApiFp, ApiNotificationHaloRunV1alpha1NotifierApi, ApiNotificationHaloRunV1alpha1NotifierApiAxiosParamCreator, ApiNotificationHaloRunV1alpha1NotifierApiFactory, ApiNotificationHaloRunV1alpha1NotifierApiFp, ApiNotificationHaloRunV1alpha1SubscriptionApi, ApiNotificationHaloRunV1alpha1SubscriptionApiAxiosParamCreator, ApiNotificationHaloRunV1alpha1SubscriptionApiFactory, ApiNotificationHaloRunV1alpha1SubscriptionApiFp, ApiPluginHaloRunV1alpha1PluginApi, ApiPluginHaloRunV1alpha1PluginApiAxiosParamCreator, ApiPluginHaloRunV1alpha1PluginApiFactory, ApiPluginHaloRunV1alpha1PluginApiFp, ApiSecurityHaloRunV1alpha1PersonalAccessTokenApi, ApiSecurityHaloRunV1alpha1PersonalAccessTokenApiAxiosParamCreator, ApiSecurityHaloRunV1alpha1PersonalAccessTokenApiFactory, ApiSecurityHaloRunV1alpha1PersonalAccessTokenApiFp, AuthHaloRunV1alpha1AuthProviderApi, AuthHaloRunV1alpha1AuthProviderApiAxiosParamCreator, AuthHaloRunV1alpha1AuthProviderApiFactory, AuthHaloRunV1alpha1AuthProviderApiFp, AuthHaloRunV1alpha1UserConnectionApi, AuthHaloRunV1alpha1UserConnectionApiAxiosParamCreator, AuthHaloRunV1alpha1UserConnectionApiFactory, AuthHaloRunV1alpha1UserConnectionApiFp, BackupStatusPhaseEnum, ConditionStatusEnum, Configuration, ContentHaloRunV1alpha1CategoryApi, ContentHaloRunV1alpha1CategoryApiAxiosParamCreator, ContentHaloRunV1alpha1CategoryApiFactory, ContentHaloRunV1alpha1CategoryApiFp, ContentHaloRunV1alpha1CommentApi, ContentHaloRunV1alpha1CommentApiAxiosParamCreator, ContentHaloRunV1alpha1CommentApiFactory, ContentHaloRunV1alpha1CommentApiFp, ContentHaloRunV1alpha1PostApi, ContentHaloRunV1alpha1PostApiAxiosParamCreator, ContentHaloRunV1alpha1PostApiFactory, ContentHaloRunV1alpha1PostApiFp, ContentHaloRunV1alpha1ReplyApi, ContentHaloRunV1alpha1ReplyApiAxiosParamCreator, ContentHaloRunV1alpha1ReplyApiFactory, ContentHaloRunV1alpha1ReplyApiFp, ContentHaloRunV1alpha1SinglePageApi, ContentHaloRunV1alpha1SinglePageApiAxiosParamCreator, ContentHaloRunV1alpha1SinglePageApiFactory, ContentHaloRunV1alpha1SinglePageApiFp, ContentHaloRunV1alpha1SnapshotApi, ContentHaloRunV1alpha1SnapshotApiAxiosParamCreator, ContentHaloRunV1alpha1SnapshotApiFactory, ContentHaloRunV1alpha1SnapshotApiFp, ContentHaloRunV1alpha1TagApi, ContentHaloRunV1alpha1TagApiAxiosParamCreator, ContentHaloRunV1alpha1TagApiFactory, ContentHaloRunV1alpha1TagApiFp, ExtensionPointSpecTypeEnum, LoginApi, LoginApiAxiosParamCreator, LoginApiFactory, LoginApiFp, MenuItemSpecTargetEnum, MetricsHaloRunV1alpha1CounterApi, MetricsHaloRunV1alpha1CounterApiAxiosParamCreator, MetricsHaloRunV1alpha1CounterApiFactory, MetricsHaloRunV1alpha1CounterApiFp, MigrationHaloRunV1alpha1BackupApi, MigrationHaloRunV1alpha1BackupApiAxiosParamCreator, MigrationHaloRunV1alpha1BackupApiFactory, MigrationHaloRunV1alpha1BackupApiFp, NotificationHaloRunV1alpha1NotificationApi, NotificationHaloRunV1alpha1NotificationApiAxiosParamCreator, NotificationHaloRunV1alpha1NotificationApiFactory, NotificationHaloRunV1alpha1NotificationApiFp, NotificationHaloRunV1alpha1NotificationTemplateApi, NotificationHaloRunV1alpha1NotificationTemplateApiAxiosParamCreator, NotificationHaloRunV1alpha1NotificationTemplateApiFactory, NotificationHaloRunV1alpha1NotificationTemplateApiFp, NotificationHaloRunV1alpha1NotifierDescriptorApi, NotificationHaloRunV1alpha1NotifierDescriptorApiAxiosParamCreator, NotificationHaloRunV1alpha1NotifierDescriptorApiFactory, NotificationHaloRunV1alpha1NotifierDescriptorApiFp, NotificationHaloRunV1alpha1ReasonApi, NotificationHaloRunV1alpha1ReasonApiAxiosParamCreator, NotificationHaloRunV1alpha1ReasonApiFactory, NotificationHaloRunV1alpha1ReasonApiFp, NotificationHaloRunV1alpha1ReasonTypeApi, NotificationHaloRunV1alpha1ReasonTypeApiAxiosParamCreator, NotificationHaloRunV1alpha1ReasonTypeApiFactory, NotificationHaloRunV1alpha1ReasonTypeApiFp, NotificationHaloRunV1alpha1SubscriptionApi, NotificationHaloRunV1alpha1SubscriptionApiAxiosParamCreator, NotificationHaloRunV1alpha1SubscriptionApiFactory, NotificationHaloRunV1alpha1SubscriptionApiFp, PluginHaloRunV1alpha1ExtensionDefinitionApi, PluginHaloRunV1alpha1ExtensionDefinitionApiAxiosParamCreator, PluginHaloRunV1alpha1ExtensionDefinitionApiFactory, PluginHaloRunV1alpha1ExtensionDefinitionApiFp, PluginHaloRunV1alpha1ExtensionPointDefinitionApi, PluginHaloRunV1alpha1ExtensionPointDefinitionApiAxiosParamCreator, PluginHaloRunV1alpha1ExtensionPointDefinitionApiFactory, PluginHaloRunV1alpha1ExtensionPointDefinitionApiFp, PluginHaloRunV1alpha1PluginApi, PluginHaloRunV1alpha1PluginApiAxiosParamCreator, PluginHaloRunV1alpha1PluginApiFactory, PluginHaloRunV1alpha1PluginApiFp, PluginHaloRunV1alpha1ReverseProxyApi, PluginHaloRunV1alpha1ReverseProxyApiAxiosParamCreator, PluginHaloRunV1alpha1ReverseProxyApiFactory, PluginHaloRunV1alpha1ReverseProxyApiFp, PluginHaloRunV1alpha1SearchEngineApi, PluginHaloRunV1alpha1SearchEngineApiAxiosParamCreator, PluginHaloRunV1alpha1SearchEngineApiFactory, PluginHaloRunV1alpha1SearchEngineApiFp, PluginStatusPhaseEnum, PostSpecVisibleEnum, SecurityHaloRunV1alpha1PersonalAccessTokenApi, SecurityHaloRunV1alpha1PersonalAccessTokenApiAxiosParamCreator, SecurityHaloRunV1alpha1PersonalAccessTokenApiFactory, SecurityHaloRunV1alpha1PersonalAccessTokenApiFp, SinglePageSpecVisibleEnum, StorageHaloRunV1alpha1AttachmentApi, StorageHaloRunV1alpha1AttachmentApiAxiosParamCreator, StorageHaloRunV1alpha1AttachmentApiFactory, StorageHaloRunV1alpha1AttachmentApiFp, StorageHaloRunV1alpha1GroupApi, StorageHaloRunV1alpha1GroupApiAxiosParamCreator, StorageHaloRunV1alpha1GroupApiFactory, StorageHaloRunV1alpha1GroupApiFp, StorageHaloRunV1alpha1PolicyApi, StorageHaloRunV1alpha1PolicyApiAxiosParamCreator, StorageHaloRunV1alpha1PolicyApiFactory, StorageHaloRunV1alpha1PolicyApiFp, StorageHaloRunV1alpha1PolicyTemplateApi, StorageHaloRunV1alpha1PolicyTemplateApiAxiosParamCreator, StorageHaloRunV1alpha1PolicyTemplateApiFactory, StorageHaloRunV1alpha1PolicyTemplateApiFp, ThemeHaloRunV1alpha1ThemeApi, ThemeHaloRunV1alpha1ThemeApiAxiosParamCreator, ThemeHaloRunV1alpha1ThemeApiFactory, ThemeHaloRunV1alpha1ThemeApiFp, ThemeStatusPhaseEnum, V1alpha1AnnotationSettingApi, V1alpha1AnnotationSettingApiAxiosParamCreator, V1alpha1AnnotationSettingApiFactory, V1alpha1AnnotationSettingApiFp, V1alpha1CacheApi, V1alpha1CacheApiAxiosParamCreator, V1alpha1CacheApiFactory, V1alpha1CacheApiFp, V1alpha1ConfigMapApi, V1alpha1ConfigMapApiAxiosParamCreator, V1alpha1ConfigMapApiFactory, V1alpha1ConfigMapApiFp, V1alpha1MenuApi, V1alpha1MenuApiAxiosParamCreator, V1alpha1MenuApiFactory, V1alpha1MenuApiFp, V1alpha1MenuItemApi, V1alpha1MenuItemApiAxiosParamCreator, V1alpha1MenuItemApiFactory, V1alpha1MenuItemApiFp, V1alpha1RoleApi, V1alpha1RoleApiAxiosParamCreator, V1alpha1RoleApiFactory, V1alpha1RoleApiFp, V1alpha1RoleBindingApi, V1alpha1RoleBindingApiAxiosParamCreator, V1alpha1RoleBindingApiFactory, V1alpha1RoleBindingApiFp, V1alpha1SecretApi, V1alpha1SecretApiAxiosParamCreator, V1alpha1SecretApiFactory, V1alpha1SecretApiFp, V1alpha1SettingApi, V1alpha1SettingApiAxiosParamCreator, V1alpha1SettingApiFactory, V1alpha1SettingApiFp, V1alpha1UserApi, V1alpha1UserApiAxiosParamCreator, V1alpha1UserApiFactory, V1alpha1UserApiFp };
